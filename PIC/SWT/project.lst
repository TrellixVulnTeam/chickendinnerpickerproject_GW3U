CCS PCD C Compiler, Version 5.015, 5967               19-Nov-18 07:30

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\SWT\project.lst

               ROM used:   7576 bytes (22%)
                           Largest free fragment is 23140
               RAM used:   424 (5%) at main() level
                           536 (7%) worst case
               Stack size: 128

*
0C00:  GOTO    26C0
*
0C24:  GOTO    EF2
*
0C50:  GOTO    FF6
*
0C74:  GOTO    F24
*
0C98:  GOTO    F56
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    6D,65,00
0E0A:  DATA    72,67,00
0E0C:  DATA    65,64,00
0E0E:  DATA    20,25,00
0E10:  DATA    64,20,00
0E12:  DATA    61,6E,00
0E14:  DATA    64,20,00
0E16:  DATA    25,64,00
0E18:  DATA    20,69,00
0E1A:  DATA    6E,74,00
0E1C:  DATA    6F,3A,00
0E1E:  DATA    20,25,00
0E20:  DATA    64,20,00
0E22:  DATA    0A,00,00
0E24:  CLR     32
0E26:  MOV     #E30,W3
0E28:  ADD     W3,W0,W0
0E2A:  TBLRDL.B[W0],W0L
0E2C:  CLR.B   1
0E2E:  RETURN  
0E30:  DATA    6D,65,00
0E32:  DATA    72,67,00
0E34:  DATA    65,64,00
0E36:  DATA    20,25,00
0E38:  DATA    64,20,00
0E3A:  DATA    61,6E,00
0E3C:  DATA    64,20,00
0E3E:  DATA    25,64,00
0E40:  DATA    20,69,00
0E42:  DATA    6E,74,00
0E44:  DATA    6F,3A,00
0E46:  DATA    20,25,00
0E48:  DATA    30,2E,00
0E4A:  DATA    32,66,00
0E4C:  DATA    0A,00,00
0E4E:  CLR     32
0E50:  MOV     #E5A,W3
0E52:  ADD     W3,W0,W0
0E54:  TBLRDL.B[W0],W0L
0E56:  CLR.B   1
0E58:  RETURN  
0E5A:  DATA    64,6F,00
0E5C:  DATA    6E,65,00
0E5E:  DATA    00,00,00
0E60:  CLR     32
0E62:  MOV     #E6C,W3
0E64:  ADD     W3,W0,W0
0E66:  TBLRDL.B[W0],W0L
0E68:  CLR.B   1
0E6A:  RETURN  
0E6C:  DATA    72,5F,00
0E6E:  DATA    61,20,00
0E70:  DATA    3D,20,00
0E72:  DATA    25,64,00
0E74:  DATA    0A,00,00
0E76:  CLR     32
0E78:  MOV     #E82,W3
0E7A:  ADD     W3,W0,W0
0E7C:  TBLRDL.B[W0],W0L
0E7E:  CLR.B   1
0E80:  RETURN  
0E82:  DATA    72,5F,00
0E84:  DATA    62,20,00
0E86:  DATA    3D,20,00
0E88:  DATA    25,64,00
0E8A:  DATA    0A,00,00
0E8C:  CLR     32
0E8E:  MOV     #E98,W3
0E90:  ADD     W3,W0,W0
0E92:  TBLRDL.B[W0],W0L
0E94:  CLR.B   1
0E96:  RETURN  
0E98:  DATA    70,6F,00
0E9A:  DATA    73,69,00
0E9C:  DATA    74,69,00
0E9E:  DATA    6F,6E,00
0EA0:  DATA    20,3D,00
0EA2:  DATA    20,25,00
0EA4:  DATA    64,2C,00
0EA6:  DATA    20,25,00
0EA8:  DATA    64,0A,00
0EAA:  DATA    00,00,00
0EAC:  CLR     32
0EAE:  MOV     #EB8,W3
0EB0:  ADD     W3,W0,W0
0EB2:  TBLRDL.B[W0],W0L
0EB4:  CLR.B   1
0EB6:  RETURN  
0EB8:  DATA    72,5F,00
0EBA:  DATA    7A,20,00
0EBC:  DATA    3D,20,00
0EBE:  DATA    25,64,00
0EC0:  DATA    00,00,00
0EC2:  CLR     32
0EC4:  MOV     #ECE,W3
0EC6:  ADD     W3,W0,W0
0EC8:  TBLRDL.B[W0],W0L
0ECA:  CLR.B   1
0ECC:  RETURN  
0ECE:  DATA    70,6F,00
0ED0:  DATA    73,69,00
0ED2:  DATA    74,69,00
0ED4:  DATA    6F,6E,00
0ED6:  DATA    20,3D,00
0ED8:  DATA    20,25,00
0EDA:  DATA    64,0A,00
0EDC:  DATA    00,00,00
0EDE:  CLR     32
0EE0:  MOV     #EEA,W3
0EE2:  ADD     W3,W0,W0
0EE4:  TBLRDL.B[W0],W0L
0EE6:  CLR.B   1
0EE8:  RETURN  
0EEA:  DATA    72,65,00
0EEC:  DATA    73,65,00
0EEE:  DATA    6E,64,00
0EF0:  DATA    00,00,00
*
11BC:  MOV     W6,[W15++]
11BE:  MOV     W7,[W15++]
11C0:  MOV     W8,[W15++]
11C2:  MOV     W9,[W15++]
11C4:  CLR     W4
11C6:  CLR     W5
11C8:  CLR     W6
11CA:  CLR     W7
11CC:  XOR     W2,W3,W8
11CE:  BRA     Z,11F2
11D0:  MOV     #20,W8
11D2:  BCLR.B  42.0
11D4:  RLC     W0,W0
11D6:  RLC     W1,W1
11D8:  RLC     W4,W4
11DA:  RLC     W5,W5
11DC:  CP      W5,W3
11DE:  BRA     NZ,11E2
11E0:  CPB     W4,W2
11E2:  BRA     NC,11EA
11E4:  SUB     W4,W2,W4
11E6:  SUBB    W5,W3,W5
11E8:  BSET.B  42.0
11EA:  RLC     W6,W6
11EC:  RLC     W7,W7
11EE:  DEC     W8,W8
11F0:  BRA     NZ,11D2
11F2:  MOV     W7,W1
11F4:  MOV     W6,W0
11F6:  MOV     [--W15],W9
11F8:  MOV     [--W15],W8
11FA:  MOV     [--W15],W7
11FC:  MOV     [--W15],W6
11FE:  RETURN  
1200:  MOV     W5,[W15++]
1202:  MOV     #C,W5
1204:  REPEAT  #7
1206:  MOV     [W5++],[W15++]
1208:  BTSS    W1.F
120A:  BRA     121A
120C:  NEG     W0,W0
120E:  BRA     Z,1212
1210:  BRA     NZ,1216
1212:  NEG     W1,W1
1214:  BRA     1218
1216:  COM     W1,W1
1218:  BSET    W4.8
121A:  CLR     W5
121C:  MOV     W0,W6
121E:  MOV     W1,W7
1220:  MOV     W4,W12
1222:  BCLR    W4.F
1224:  CP0.B   W4L
1226:  BRA     NZ,122A
1228:  BRA     125A
122A:  SUB.B   W4L,#B,W5L
122C:  BRA     NC,125A
122E:  SUB.B   W4L,W5L,W4L
1230:  BTSS    W12.F
1232:  BRA     124A
1234:  BTSS    W4.8
1236:  BRA     1246
1238:  MOV     #2D,W0
123A:  BTSC.B  223.1
123C:  BRA     123A
123E:  MOV     W0,224
1240:  BCLR    W4.8
1242:  DEC     W5,W5
1244:  BRA     N,125A
1246:  MOV     #30,W0
1248:  BRA     124C
124A:  MOV     #20,W0
124C:  BTSC.B  223.1
124E:  BRA     124C
1250:  MOV     W0,224
1252:  DEC     W5,W5
1254:  BRA     NN,124C
1256:  BTSC    W4.8
1258:  DEC.B   W4L,W4L
125A:  MOV     #E,W8
125C:  MOV     #0,W9
125E:  LNK     #10
1260:  MOV     W12,[W14+W8]
1262:  DEC2    W8,W8
1264:  BRA     NN,1260
1266:  MOV     W4,W5
1268:  MOV     #A,W4
126A:  BTSC    W5.8
126C:  INC     W4,W4
126E:  BSET    W5.E
1270:  BTSC    W12.F
1272:  BSET    W5.F
1274:  CP0.B   W5L
1276:  BRA     Z,127A
1278:  DEC.B   W5L,W5L
127A:  MOV     W4,[W14]
127C:  MOV     W5,[W14+#2]
127E:  MOV     W6,W0
1280:  MOV     W7,W1
1282:  MOV     #CA00,W2
1284:  MOV     #3B9A,W3
1286:  MOV     #2710,W8
1288:  BCLR    W13.F
128A:  BCLR.B  43.0
128C:  CALL    11BC
1290:  BTG     W13.F
1292:  BTSC    W13.F
1294:  BRA     12A4
1296:  MOV     W0,[W14+#8]
1298:  MOV     W1,[W14+#A]
129A:  MOV     W0,W2
129C:  MOV     W1,W3
129E:  MOV     [W14+#4],W0
12A0:  MOV     [W14+#6],W1
12A2:  BRA     128A
12A4:  MOV     W2,[W14+#8]
12A6:  MOV     W3,[W14+#A]
12A8:  MOV     W4,[W14+#4]
12AA:  MOV     W5,[W14+#6]
12AC:  MOV     [W14],W4
12AE:  MOV     [W14+#2],W5
12B0:  MOV     #30,W6
12B2:  CP0     W0
12B4:  BRA     NZ,12D8
12B6:  BTSS    W5.E
12B8:  BRA     12DC
12BA:  DEC     W4,W4
12BC:  MOV     W4,[W14]
12BE:  CP0     W4
12C0:  BRA     Z,12DC
12C2:  CP.B    W4L,W5L
12C4:  BRA     Z,12CA
12C6:  BTSC.B  42.0
12C8:  BRA     12FA
12CA:  BTSS    W5.F
12CC:  BRA     12D4
12CE:  BTSS    W5.8
12D0:  BRA     12F2
12D2:  BRA     12E2
12D4:  MOV     #20,W6
12D6:  BRA     12F2
12D8:  BCLR    W5.E
12DA:  MOV     W5,[W14+#2]
12DC:  MOV     [W14+#2],W5
12DE:  BTSS    W5.8
12E0:  BRA     12F2
12E2:  BCLR    W5.8
12E4:  MOV     W5,[W14+#2]
12E6:  MOV     W0,W10
12E8:  MOV     #2D,W0
12EA:  BTSC.B  223.1
12EC:  BRA     12EA
12EE:  MOV     W0,224
12F0:  MOV     W10,W0
12F2:  ADD.B   W6L,W0L,W0L
12F4:  BTSC.B  223.1
12F6:  BRA     12F4
12F8:  MOV     W0,224
12FA:  MOV     [W14+#8],W0
12FC:  MOV     [W14+#A],W1
12FE:  MOV     #A,W2
1300:  CLR     W3
1302:  CP      W0,#1
1304:  BRA     Z,1308
1306:  BRA     128A
1308:  ULNK    
130A:  MOV     #1A,W5
130C:  REPEAT  #7
130E:  MOV     [--W15],[W5--]
1310:  MOV     [--W15],W5
1312:  RETURN  
*
13F0:  MOV     W5,[W15++]
13F2:  MOV     #C,W5
13F4:  REPEAT  #3
13F6:  MOV     [W5++],[W15++]
13F8:  BTSS    W0.F
13FA:  BRA     1414
13FC:  NEG     W0,W0
13FE:  BSET    W4.8
1400:  BTSS    W4.F
1402:  BRA     1414
1404:  MOV     W0,[W15++]
1406:  MOV     #2D,W0
1408:  BTSC.B  223.1
140A:  BRA     1408
140C:  MOV     W0,224
140E:  MOV     [--W15],W0
1410:  BCLR    W4.8
1412:  DEC.B   0008
1414:  CLR     W5
1416:  MOV     W0,W7
1418:  MOV     W4,W9
141A:  BCLR    W4.F
141C:  CP0.B   W4L
141E:  BRA     NZ,142C
1420:  BTSC    W9.F
1422:  BRA     1428
1424:  MOV     #0,W5
1426:  BRA     1446
1428:  MOV     #0,W5
142A:  BRA     1446
142C:  SUB.B   W4L,#6,W5L
142E:  BRA     NC,1444
1430:  MOV     #30,W0
1432:  BTSS    W9.F
1434:  MOV     #20,W0
1436:  BTSC.B  223.1
1438:  BRA     1436
143A:  MOV     W0,224
143C:  DEC     W5,W5
143E:  BRA     NN,1436
1440:  MOV     #5,W5
1442:  BRA     1446
1444:  MOV     W4,W5
1446:  MOV     #6,W4
1448:  BTSC    W5.8
144A:  INC     W4,W4
144C:  BSET    W5.E
144E:  BTSC    W9.F
1450:  BSET    W5.F
1452:  MOV     #2710,W8
1454:  REPEAT  #11
1456:  DIV.U   W7,W8
1458:  CALL    149C
145C:  MOV     W1,W7
145E:  MOV     #3E8,W8
1460:  REPEAT  #11
1462:  DIV.U   W7,W8
1464:  CALL    149C
1468:  MOV     W1,W7
146A:  MOV     #64,W8
146C:  REPEAT  #11
146E:  DIV.U   W7,W8
1470:  CALL    149C
1474:  MOV     W1,W7
1476:  MOV     #A,W8
1478:  REPEAT  #11
147A:  DIV.U   W7,W8
147C:  CALL    149C
1480:  BTSS    W9.8
1482:  BRA     148E
1484:  MOV     #2D,W0
1486:  BTSC.B  223.1
1488:  BRA     1486
148A:  MOV     W0,224
148C:  BCLR    W9.8
148E:  MOV     #30,W0
1490:  ADD.B   W1L,W0L,W0L
1492:  MOV     W0,2A
1494:  BTSC.B  223.1
1496:  BRA     1494
1498:  MOV     W0,224
149A:  BRA     14DC
149C:  MOV     #30,W6
149E:  CP0     W0
14A0:  BRA     NZ,14BE
14A2:  BTSS    W5.E
14A4:  BRA     14D2
14A6:  DEC     W4,W4
14A8:  CP.B    W4L,W5L
14AA:  BRA     Z,14B0
14AC:  BTSC.B  42.0
14AE:  RETURN  
14B0:  CP0     W0
14B2:  BRA     NZ,14BE
14B4:  BTSS    W5.E
14B6:  BRA     14D2
14B8:  BTSS    W5.F
14BA:  MOV     #20,W6
14BC:  BRA     14D2
14BE:  BCLR    W5.E
14C0:  BTSS    W9.8
14C2:  BRA     14D2
14C4:  MOV     W0,W10
14C6:  MOV     #2D,W0
14C8:  BTSC.B  223.1
14CA:  BRA     14C8
14CC:  MOV     W0,224
14CE:  BCLR    W9.8
14D0:  MOV     W10,W0
14D2:  ADD.B   W6L,W0L,W0L
14D4:  BTSC.B  223.1
14D6:  BRA     14D4
14D8:  MOV     W0,224
14DA:  RETURN  
14DC:  MOV     #12,W5
14DE:  REPEAT  #3
14E0:  MOV     [--W15],[W5--]
14E2:  MOV     [--W15],W5
14E4:  RETURN  
*
157C:  MOV     W5,[W15++]
157E:  MOV     W6,[W15++]
1580:  MOV     W0,W4
1582:  MOV     W1,W5
1584:  CLR     W0
1586:  CLR     W1
1588:  BCLR    W6.0
158A:  BTSS    W5.F
158C:  BRA     159A
158E:  BSET    W6.0
1590:  NEG     W4,W4
1592:  BRA     Z,1598
1594:  COM     W5,W5
1596:  BRA     159A
1598:  NEG     W5,W5
159A:  IOR      W4,  W5,W3
159C:  BRA     Z,15C4
159E:  CLR     W2
15A0:  MOV     #B6,W1
15A2:  BTSC    W2.7
15A4:  BRA     15B4
15A6:  BCLR.B  42.0
15A8:  RLC     W4,W4
15AA:  RLC     W5,W5
15AC:  RLC     W0,W0
15AE:  RLC     W2,W2
15B0:  DEC     W1,W1
15B2:  BRA     NZ,15A2
15B4:  SWAP    W1
15B6:  BCLR.B  42.0
15B8:  RRC     W1,W1
15BA:  BCLR    W1.F
15BC:  BCLR    W2.7
15BE:  XOR.B   W2L,W1L,W1L
15C0:  BTSC    W6.0
15C2:  BSET    W1.F
15C4:  MOV     [--W15],W6
15C6:  MOV     [--W15],W5
15C8:  RETURN  
15CA:  MOV     W5,[W15++]
15CC:  MOV     #C,W5
15CE:  REPEAT  #4
15D0:  MOV     [W5++],[W15++]
15D2:  MOV     W0,W4
15D4:  MOV     W1,W5
15D6:  MOV     W3,W7
15D8:  MOV     W2,W6
15DA:  BCLR.B  42.0
15DC:  BCLR.B  42.1
15DE:  RLC     W1,W1
15E0:  SWAP    W1
15E2:  AND     #FF,W1
15E4:  CP0     W1
15E6:  BRA     Z,167E
15E8:  BCLR.B  42.0
15EA:  BCLR.B  42.1
15EC:  RLC     W3,W3
15EE:  SWAP    W3
15F0:  AND     #FF,W3
15F2:  CP0     W3
15F4:  BRA     Z,167E
15F6:  ZE      W0,W0
15F8:  ADD.B   W3L,W1L,W0L
15FA:  BRA     C,1604
15FC:  SUB     #7F,W0
15FE:  BRA     Z,167E
1600:  BRA     NC,167E
1602:  BRA     1608
1604:  ADD.B   #81,W0L
1606:  BRA     C,167E
1608:  XOR     W5,W7,W10
160A:  BCLR.B  42.0
160C:  BCLR.B  42.1
160E:  AND     #FF,W5
1610:  BSET    W5.7
1612:  BCLR.B  42.0
1614:  AND     #FF,W7
1616:  BSET    W7.7
1618:  MUL.UU  W4,W6,W2
161A:  MUL.UU  W5,W6,W8
161C:  ADDC    W8,W3,W3
161E:  MOV     W9,W1
1620:  BTSC.B  42.0
1622:  INC     W1,W1
1624:  BCLR.B  42.0
1626:  MUL.UU  W7,W4,W8
1628:  ADDC    W8,W3,W3
162A:  ADDC    W9,W1,W1
162C:  MUL.UU  W5,W7,W8
162E:  ADDC    W8,W1,W1
1630:  INC     W0,W0
1632:  CP0     W1
1634:  BTSC.B  42.1
1636:  BRA     163A
1638:  BRA     1640
163A:  CP0     W3
163C:  BTSC.B  42.1
163E:  BRA     164A
1640:  BTSC    W1.F
1642:  BRA     164A
1644:  RLC     W3,W3
1646:  RLC     W1,W1
1648:  DEC     W0,W0
164A:  MOV     W1,W2
164C:  BCLR.B  42.0
164E:  BTSS    W3.7
1650:  BRA     1664
1652:  MOV     #FF00,W7
1654:  AND     W3,W7,W3
1656:  ADD     #100,W3
1658:  ADDC    W2,#0,W2
165A:  CP0     W2
165C:  BRA     NZ,1664
165E:  CP0     W3
1660:  BRA     NZ,1664
1662:  INC     W0,W0
1664:  SWAP    W0
1666:  BCLR.B  42.0
1668:  BCLR.B  42.1
166A:  RRC     W0,W1
166C:  BTSC    W10.F
166E:  BSET    W1.F
1670:  BCLR    W2.F
1672:  SWAP    W2
1674:  XOR.B   W2L,W1L,W1L
1676:  SWAP    W3
1678:  MOV.B   W3L,W2L
167A:  MOV     W2,W0
167C:  BRA     1684
167E:  MOV     #0,W0
1680:  MOV     #0,W1
1682:  BRA     1684
1684:  MOV     #14,W5
1686:  REPEAT  #4
1688:  MOV     [--W15],[W5--]
168A:  MOV     [--W15],W5
168C:  RETURN  
168E:  MOV     W5,[W15++]
1690:  MOV     #C,W5
1692:  REPEAT  #3
1694:  MOV     [W5++],[W15++]
1696:  CLR     W9
1698:  MOV     #8000,W8
169A:  BTSC.B  43.0
169C:  XOR     W8,W3,W3
169E:  CP0     W0
16A0:  BRA     NZ,16A8
16A2:  MOV     #7FFF,W10
16A4:  AND     W1,W10,W10
16A6:  BTSS.B  42.1
16A8:  MOV     W1,W10
16AA:  XOR     W3,W10,W11
16AC:  MOV     W1,W6
16AE:  MOV     W3,W7
16B0:  MOV     W3,W12
16B2:  BCLR.B  42.1
16B4:  BCLR.B  42.0
16B6:  RLC     W6,W6
16B8:  SWAP    W6
16BA:  AND     #FF,W6
16BC:  CP0     W6
16BE:  BRA     Z,1802
16C0:  BCLR.B  42.1
16C2:  BCLR.B  42.0
16C4:  RLC     W7,W7
16C6:  SWAP    W7
16C8:  AND     #FF,W7
16CA:  CP0     W7
16CC:  BRA     Z,180C
16CE:  BCLR.B  42.1
16D0:  BCLR.B  42.0
16D2:  CP      W7,W6
16D4:  BRA     Z,180E
16D6:  BRA     N,181E
16D8:  BCLR    W9.0
16DA:  BSET    W9.1
16DC:  SUB     W7,W6,W8
16DE:  MOV     W7,W6
16E0:  AND     #FF,W1
16E2:  BSET    W1.7
16E4:  AND     #FF,W3
16E6:  BSET    W3.7
16E8:  MOV     #28,W7
16EA:  CP      W7,W8
16EC:  BRA     N,1710
16EE:  BCLR.B  42.1
16F0:  BCLR.B  42.0
16F2:  RRC     W1,W1
16F4:  RRC     W0,W0
16F6:  DEC     W8,W8
16F8:  BRA     NZ,16EE
16FA:  BRA     1716
16FC:  MOV     #28,W7
16FE:  CP      W7,W8
1700:  BRA     N,1714
1702:  BCLR.B  42.1
1704:  BCLR.B  42.0
1706:  RRC     W3,W3
1708:  RRC     W2,W2
170A:  DEC     W8,W8
170C:  BRA     NZ,1702
170E:  BRA     172E
1710:  MOV     W2,W0
1712:  MOV     W3,W1
1714:  BRA     179C
1716:  BTSS    W11.F
1718:  BRA     173C
171A:  BTSC    W9.4
171C:  MOV     W12,W11
171E:  NEG     W0,W0
1720:  BRA     Z,1726
1722:  COM.B   W1L,W1L
1724:  BRA     1728
1726:  NEG     W1,W1
1728:  BTSC    W9.4
172A:  BRA     1782
172C:  BRA     173C
172E:  BTSS    W11.F
1730:  BRA     173C
1732:  NEG     W2,W2
1734:  BRA     Z,173A
1736:  COM.B   W3L,W3L
1738:  BRA     173C
173A:  NEG     W3,W3
173C:  AND     #FF,W5
173E:  BCLR.B  42.1
1740:  BCLR.B  42.0
1742:  ADD     W0,W2,W0
1744:  ADDC.B  W1L,W3L,W1L
1746:  BTSC.B  42.0
1748:  BSET    W9.3
174A:  BTSC    W9.0
174C:  BRA     1760
174E:  BTSC    W9.1
1750:  BRA     1754
1752:  BRA     176A
1754:  BTSC    W11.F
1756:  BRA     1782
1758:  BTSC    W9.3
175A:  BRA     17AE
175C:  BSET    W9.6
175E:  BRA     179C
1760:  BTSC    W11.F
1762:  BRA     1782
1764:  BTSC    W9.3
1766:  BRA     17AE
1768:  BRA     179C
176A:  BCLR    W9.2
176C:  BTSC    W11.F
176E:  BRA     1778
1770:  MOV     W10,W11
1772:  BTSC    W9.3
1774:  BRA     17AE
1776:  BRA     17E4
1778:  BSET    W9.4
177A:  XOR.B   #80,W1L
177C:  BTSC    W1.7
177E:  BRA     171A
1780:  MOV     W10,W11
1782:  AND     #FF,W1
1784:  IOR      W0,  W1,W7
1786:  BRA     Z,179C
1788:  BTSC    W1.7
178A:  BRA     179C
178C:  BCLR.B  42.1
178E:  BCLR.B  42.0
1790:  RLC     W0,W0
1792:  RLC     W1,W1
1794:  DEC     W6,W6
1796:  BTSC.B  42.1
1798:  BRA     17FC
179A:  BRA     1788
179C:  BTSC    W9.0
179E:  MOV     W10,W11
17A0:  BTSC    W9.1
17A2:  MOV     W12,W11
17A4:  BTSS    W9.5
17A6:  BRA     17DC
17A8:  BTSC    W10.F
17AA:  BSET    W0.8
17AC:  BRA     17E4
17AE:  BSET.B  42.0
17B0:  RRC.B   W1L,W1L
17B2:  RRC     W0,W0
17B4:  BTSC.B  42.0
17B6:  BSET    W9.5
17B8:  INC     W6,W6
17BA:  BRA     Z,17FC
17BC:  BTSS    W9.5
17BE:  BRA     17D0
17C0:  INC     W0,W0
17C2:  BRA     NZ,17D0
17C4:  INC.B   W1L,W1L
17C6:  BRA     NZ,17D0
17C8:  RRC.B   W1L,W1L
17CA:  RRC     W0,W0
17CC:  INC     W6,W6
17CE:  BRA     Z,17FC
17D0:  BTSC    W9.0
17D2:  MOV     W10,W11
17D4:  BTSC    W9.1
17D6:  MOV     W12,W11
17D8:  BTSC.B  42.1
17DA:  BRA     17FC
17DC:  BTSC    W9.6
17DE:  MOV     W10,W11
17E0:  BTSC    W9.7
17E2:  MOV     W12,W11
17E4:  IOR      W0,  W1,W2
17E6:  BRA     Z,182E
17E8:  BCLR    W1.7
17EA:  SWAP    W6
17EC:  BCLR.B  42.1
17EE:  BCLR.B  42.0
17F0:  RRC     W6,W6
17F2:  XOR     W6,W1,W1
17F4:  BSET    W1.F
17F6:  BTSS    W11.F
17F8:  BCLR    W1.F
17FA:  BRA     182E
17FC:  MOV     #0,W0
17FE:  MOV     #0,W1
1800:  BRA     182E
1802:  BTSC    W10.F
1804:  XOR     W8,W3,W3
1806:  MOV     W2,W0
1808:  MOV     W3,W1
180A:  BRA     182E
180C:  BRA     182E
180E:  AND     #FF,W3
1810:  BSET    W3.7
1812:  AND     #FF,W1
1814:  BSET    W1.7
1816:  BTSC    W11.F
1818:  BCLR    W3.7
181A:  BSET    W9.2
181C:  BRA     172E
181E:  SUB     W6,W7,W8
1820:  AND     #FF,W1
1822:  BSET    W1.7
1824:  AND     #FF,W3
1826:  BSET    W3.7
1828:  BCLR    W9.1
182A:  BSET    W9.0
182C:  BRA     16FC
182E:  MOV     #12,W5
1830:  REPEAT  #3
1832:  MOV     [--W15],[W5--]
1834:  MOV     [--W15],W5
1836:  RETURN  
1838:  MOV     W0,W2
183A:  MOV     W1,W3
183C:  MOV.B   W1L,W0L
183E:  SWAP    W0
1840:  BSET    W0.F
1842:  RLC     W1,W1
1844:  SWAP    W1
1846:  ZE      W1,W1
1848:  MOV     #8E,W4
184A:  SUB.B   W4L,W1L,W1L
184C:  BRA     Z,185A
184E:  CP0     W0
1850:  BRA     Z,185A
1852:  BCLR.B  42.0
1854:  RRC     W0,W0
1856:  DEC     W1,W1
1858:  BRA     NZ,184E
185A:  BTSS    W3.F
185C:  BRA     1862
185E:  NEG     W0,W0
1860:  BRA     1862
1862:  RETURN  
*
1C84:  MOV     W5,[W15++]
1C86:  MOV     #C,W5
1C88:  REPEAT  #3
1C8A:  MOV     [W5++],[W15++]
1C8C:  MOV     W0,W4
1C8E:  MOV     W1,W5
1C90:  MOV     W2,W6
1C92:  MOV     W3,W7
1C94:  CLR     W0
1C96:  CLR     W1
1C98:  CLR     W2
1C9A:  CLR     W3
1C9C:  BCLR    W8.0
1C9E:  BTSS    W7.F
1CA0:  BRA     1CAC
1CA2:  BSET    W8.0
1CA4:  NEG     W4,W4
1CA6:  COM     W5,W5
1CA8:  COM     W6,W6
1CAA:  COM     W7,W7
1CAC:  IOR      W4,  W5,W9
1CAE:  BRA     NZ,1CB4
1CB0:  IOR      W6,  W7,W9
1CB2:  BRA     Z,1CDE
1CB4:  MOV     #473,W9
1CB6:  BTSC    W3.4
1CB8:  BRA     1CD0
1CBA:  BCLR.B  42.0
1CBC:  RLC     W4,W4
1CBE:  RLC     W5,W5
1CC0:  RLC     W6,W6
1CC2:  RLC     W7,W7
1CC4:  RLC     W0,W0
1CC6:  RLC     W1,W1
1CC8:  RLC     W2,W2
1CCA:  RLC     W3,W3
1CCC:  DEC     W9,W9
1CCE:  BRA     NZ,1CB6
1CD0:  SL      W9,#4,W9
1CD2:  BCLR.B  42.0
1CD4:  BCLR    W9.F
1CD6:  BCLR    W3.4
1CD8:  XOR     W9,W3,W3
1CDA:  BTSC    W8.0
1CDC:  BSET    W3.F
1CDE:  MOV     #12,W5
1CE0:  REPEAT  #3
1CE2:  MOV     [--W15],[W5--]
1CE4:  MOV     [--W15],W5
1CE6:  RETURN  
1CE8:  MOV     W8,[W15++]
1CEA:  MOV     #12,W8
1CEC:  REPEAT  #4
1CEE:  MOV     [W8++],[W15++]
1CF0:  CLR     W11
1CF2:  MUL.UU  W12,#0,W12
1CF4:  MOV     W3,W8
1CF6:  MOV     W7,W9
1CF8:  MOV     #7FF,W10
1CFA:  BCLR.B  42.0
1CFC:  BCLR.B  42.1
1CFE:  ASR     W8,#4,W8
1D00:  AND     W10,W8,W8
1D02:  CP0     W8
1D04:  BRA     Z,1DE8
1D06:  BCLR.B  42.0
1D08:  BCLR.B  42.1
1D0A:  ASR     W9,#4,W9
1D0C:  AND     W10,W9,W9
1D0E:  CP0     W9
1D10:  BRA     Z,1DE8
1D12:  ADD     W9,W8,W8
1D14:  BTSC    W9.B
1D16:  BRA     1D20
1D18:  SUB     #3FF,W8
1D1A:  BRA     Z,1DE8
1D1C:  BRA     NC,1DE8
1D1E:  BRA     1D26
1D20:  MOV     #401,W10
1D22:  ADD.B   W10L,W5L,W5L
1D24:  BRA     C,1DE8
1D26:  XOR     W3,W7,W13
1D28:  BCLR.B  42.0
1D2A:  BCLR.B  42.1
1D2C:  AND     #F,W3
1D2E:  BSET    W3.4
1D30:  AND     #F,W7
1D32:  BSET    W7.4
1D34:  MOV     W8,[W15++]
1D36:  MUL.UU  W4,W1,W8
1D38:  MUL.UU  W5,W0,W10
1D3A:  ADD     W8,W10,W10
1D3C:  ADDC    W9,W11,W11
1D3E:  ADDC    #0,W12
1D40:  MUL.UU  W4,W2,W8
1D42:  ADD     W8,W11,W11
1D44:  ADDC    W9,W12,W12
1D46:  MUL.UU  W5,W1,W8
1D48:  CLR     W10
1D4A:  ADD     W8,W11,W11
1D4C:  ADDC    W9,W12,W12
1D4E:  ADDC    #0,W10
1D50:  MUL.UU  W6,W0,W8
1D52:  ADD     W8,W11,W11
1D54:  ADDC    W9,W12,W12
1D56:  ADDC    #0,W10
1D58:  CLR     W11
1D5A:  MUL.UU  W4,W3,W8
1D5C:  ADD     W8,W12,W12
1D5E:  ADDC    W9,W10,W10
1D60:  ADDC    #0,W11
1D62:  MUL.UU  W5,W2,W8
1D64:  ADD     W8,W12,W12
1D66:  ADDC    W9,W10,W10
1D68:  ADDC    #0,W11
1D6A:  MUL.UU  W6,W1,W8
1D6C:  ADD     W8,W12,W12
1D6E:  ADDC    W9,W10,W10
1D70:  ADDC    #0,W11
1D72:  MUL.UU  W7,W0,W8
1D74:  ADD     W8,W12,W12
1D76:  ADDC    W9,W10,W10
1D78:  ADDC    #0,W11
1D7A:  MOV     W12,W0
1D7C:  CLR     W12
1D7E:  MUL.UU  W5,W3,W8
1D80:  ADD     W8,W10,W10
1D82:  ADDC    W9,W11,W11
1D84:  ADDC    #0,W12
1D86:  MUL.UU  W6,W2,W8
1D88:  ADD     W8,W10,W10
1D8A:  ADDC    W9,W11,W11
1D8C:  ADDC    #0,W12
1D8E:  MUL.UU  W6,W3,W8
1D90:  ADD     W8,W11,W11
1D92:  ADDC    W9,W12,W12
1D94:  MUL.UU  W7,W1,W8
1D96:  ADD     W8,W10,W10
1D98:  ADDC    W9,W11,W11
1D9A:  ADDC    #0,W12
1D9C:  MUL.UU  W7,W2,W8
1D9E:  ADD     W8,W11,W11
1DA0:  ADDC    W9,W12,W12
1DA2:  MUL.UU  W7,W3,W8
1DA4:  ADD     W8,W12,W12
1DA6:  MOV     W10,W1
1DA8:  MOV     W11,W2
1DAA:  MOV     W12,W3
1DAC:  MOV     #5,W4
1DAE:  BCLR.B  42.0
1DB0:  RRC     W3,W3
1DB2:  RRC     W2,W2
1DB4:  RRC     W1,W1
1DB6:  RRC     W0,W0
1DB8:  DEC     W4,W4
1DBA:  BRA     NZ,1DAE
1DBC:  MOV     [--W15],W8
1DBE:  INC     W8,W8
1DC0:  IOR      W0,  W1,W6
1DC2:  BRA     Z,1DC6
1DC4:  BRA     1DCA
1DC6:  IOR      W2,  W3,W6
1DC8:  BRA     Z,1DDA
1DCA:  BTSC    W3.4
1DCC:  BRA     1DDA
1DCE:  BCLR.B  42.0
1DD0:  RLC     W0,W0
1DD2:  RLC     W1,W1
1DD4:  RLC     W2,W2
1DD6:  RLC     W3,W3
1DD8:  DEC     W8,W8
1DDA:  SL      W8,#4,W8
1DDC:  BCLR    W3.F
1DDE:  BTSC    W13.F
1DE0:  BSET    W3.F
1DE2:  BCLR    W3.4
1DE4:  XOR     W8,W3,W3
1DE6:  BRA     1DEE
1DE8:  MUL.UU  W0,#0,W0
1DEA:  MUL.UU  W0,#0,W2
1DEC:  BRA     1DEE
1DEE:  MOV     #1A,W8
1DF0:  REPEAT  #4
1DF2:  MOV     [--W15],[W8--]
1DF4:  MOV     [--W15],W8
1DF6:  RETURN  
1DF8:  MOV     W8,[W15++]
1DFA:  MOV     #12,W8
1DFC:  REPEAT  #4
1DFE:  MOV     [W8++],[W15++]
1E00:  MOV     #8000,W8
1E02:  BTSC.B  43.0
1E04:  XOR     W8,W7,W7
1E06:  CP0     W0
1E08:  BRA     NZ,1E18
1E0A:  CP0     W1
1E0C:  BRA     NZ,1E18
1E0E:  CP0     W2
1E10:  BRA     NZ,1E18
1E12:  MOV     #7FFF,W10
1E14:  AND     W3,W10,W10
1E16:  BTSS.B  42.1
1E18:  MOV     W3,W10
1E1A:  XOR     W7,W10,W11
1E1C:  MOV     W3,W8
1E1E:  MOV     W7,W9
1E20:  MOV     W7,W12
1E22:  MOV     #7FF,W13
1E24:  BCLR.B  42.1
1E26:  BCLR.B  42.0
1E28:  ASR     W8,#4,W8
1E2A:  AND     W13,W8,W8
1E2C:  CP0     W8
1E2E:  BRA     Z,1FA8
1E30:  BCLR.B  42.1
1E32:  BCLR.B  42.0
1E34:  ASR     W9,#4,W9
1E36:  AND     W13,W9,W9
1E38:  CP0     W9
1E3A:  BRA     Z,1FB8
1E3C:  CLR     W13
1E3E:  BCLR.B  42.1
1E40:  BCLR.B  42.0
1E42:  CP      W9,W8
1E44:  BRA     Z,1FBA
1E46:  BRA     N,1FCA
1E48:  BCLR    W13.0
1E4A:  BSET    W13.1
1E4C:  SUB     W9,W8,W8
1E4E:  AND     #F,W3
1E50:  BSET    W3.4
1E52:  AND     #F,W7
1E54:  BSET    W7.4
1E56:  SUB     #34,W8
1E58:  BRA     NN,1E86
1E5A:  ADD     #34,W8
1E5C:  BCLR.B  42.1
1E5E:  BCLR.B  42.0
1E60:  RRC     W3,W3
1E62:  RRC     W2,W2
1E64:  RRC     W1,W1
1E66:  RRC     W0,W0
1E68:  DEC     W8,W8
1E6A:  BRA     NZ,1E5C
1E6C:  BRA     1E96
1E6E:  SUB     #34,W8
1E70:  BRA     NN,1E90
1E72:  ADD     #34,W8
1E74:  BCLR.B  42.1
1E76:  BCLR.B  42.0
1E78:  RRC     W7,W7
1E7A:  RRC     W6,W6
1E7C:  RRC     W5,W5
1E7E:  RRC     W4,W4
1E80:  DEC     W8,W8
1E82:  BRA     NZ,1E74
1E84:  BRA     1EBC
1E86:  MOV     W4,W0
1E88:  MOV     W5,W1
1E8A:  MOV     W6,W2
1E8C:  MOV     W7,W3
1E8E:  XOR     W11,W12,W12
1E90:  BTSC    W12.F
1E92:  BTG     W11.F
1E94:  BRA     1F88
1E96:  BTSS    W11.F
1E98:  BRA     1ED8
1E9A:  BTSC    W13.4
1E9C:  MOV     W12,W11
1E9E:  COM     W0,W0
1EA0:  COM     W1,W1
1EA2:  COM     W2,W2
1EA4:  COM.B   W3L,W3L
1EA6:  AND.B   #1F,W3L
1EA8:  INC     W0,W0
1EAA:  BRA     NZ,1EB6
1EAC:  INC     W1,W1
1EAE:  BRA     NZ,1EB6
1EB0:  INC     W2,W2
1EB2:  BRA     NZ,1EB6
1EB4:  INC.B   W3L,W3L
1EB6:  BTSC    W13.4
1EB8:  BRA     1F1E
1EBA:  BRA     1ED8
1EBC:  BTSS    W11.F
1EBE:  BRA     1ED8
1EC0:  COM     W4,W4
1EC2:  COM     W5,W5
1EC4:  COM     W6,W6
1EC6:  COM.B   W7L,W7L
1EC8:  AND.B   #1F,W7L
1ECA:  INC     W4,W4
1ECC:  BRA     NZ,1ED8
1ECE:  INC     W5,W5
1ED0:  BRA     NZ,1ED8
1ED2:  INC     W6,W6
1ED4:  BRA     NZ,1ED8
1ED6:  INC.B   W7L,W7L
1ED8:  BCLR.B  42.1
1EDA:  BCLR.B  42.0
1EDC:  ADD     W0,W4,W0
1EDE:  ADDC    W1,W5,W1
1EE0:  ADDC    W2,W6,W2
1EE2:  ADDC.B  W3L,W7L,W3L
1EE4:  BTSC    W3.5
1EE6:  BSET    W13.3
1EE8:  BTSC    W13.0
1EEA:  BRA     1EFE
1EEC:  BTSC    W13.1
1EEE:  BRA     1EF2
1EF0:  BRA     1F08
1EF2:  BTSC    W11.F
1EF4:  BRA     1F1E
1EF6:  BTSC    W13.3
1EF8:  BRA     1F4C
1EFA:  BSET    W13.6
1EFC:  BRA     1F40
1EFE:  BTSC    W11.F
1F00:  BRA     1F1E
1F02:  BTSC    W13.3
1F04:  BRA     1F4C
1F06:  BRA     1F40
1F08:  BTSC    W11.F
1F0A:  BRA     1F14
1F0C:  MOV     W10,W11
1F0E:  BTSC    W13.3
1F10:  BRA     1F4C
1F12:  BRA     1F88
1F14:  BSET    W13.4
1F16:  XOR.B   #10,W3L
1F18:  BTSC    W3.4
1F1A:  BRA     1E9A
1F1C:  MOV     W10,W11
1F1E:  AND     #1F,W3
1F20:  IOR      W3,  W2,W8
1F22:  BRA     NZ,1F28
1F24:  IOR      W1,  W0,W8
1F26:  BRA     Z,1F40
1F28:  BTSC    W3.4
1F2A:  BRA     1F40
1F2C:  BCLR.B  42.1
1F2E:  BCLR.B  42.0
1F30:  RLC     W0,W0
1F32:  RLC     W1,W1
1F34:  RLC     W2,W2
1F36:  RLC     W3,W3
1F38:  DEC     W9,W9
1F3A:  BTSC.B  42.1
1F3C:  BRA     1FA2
1F3E:  BRA     1F28
1F40:  BTSC    W13.0
1F42:  MOV     W10,W11
1F44:  BTSC    W13.1
1F46:  MOV     W12,W11
1F48:  BTSS    W13.5
1F4A:  BRA     1F88
1F4C:  BCLR.B  42.0
1F4E:  RRC.B   W3L,W3L
1F50:  RRC     W2,W2
1F52:  RRC     W1,W1
1F54:  RRC     W0,W0
1F56:  BTSC.B  42.0
1F58:  BSET    W13.5
1F5A:  INC     W9,W9
1F5C:  BTSC.B  42.1
1F5E:  BRA     1FA2
1F60:  BTSS    W13.5
1F62:  BRA     1F80
1F64:  INC     W0,W0
1F66:  BRA     NZ,1F80
1F68:  INC     W1,W1
1F6A:  BRA     NZ,1F80
1F6C:  INC     W2,W2
1F6E:  BRA     NZ,1F80
1F70:  INC     W3,W3
1F72:  BRA     NZ,1F80
1F74:  RRC.B   W3L,W3L
1F76:  RRC     W2,W2
1F78:  RRC     W1,W1
1F7A:  RRC     W0,W0
1F7C:  INC     W9,W9
1F7E:  BRA     Z,1FA2
1F80:  BTSC    W13.0
1F82:  MOV     W10,W11
1F84:  BTSC    W13.1
1F86:  MOV     W12,W11
1F88:  IOR      W0,  W1,W4
1F8A:  BRA     NZ,1F90
1F8C:  IOR      W2,  W3,W4
1F8E:  BRA     Z,1FDC
1F90:  BCLR    W3.4
1F92:  BCLR.B  42.1
1F94:  BCLR.B  42.0
1F96:  SL      W9,#4,W9
1F98:  XOR     W9,W3,W3
1F9A:  BSET    W3.F
1F9C:  BTSS    W11.F
1F9E:  BCLR    W3.F
1FA0:  BRA     1FDC
1FA2:  MUL.UU  W0,#0,W0
1FA4:  MUL.UU  W2,#0,W2
1FA6:  BRA     1FDC
1FA8:  MOV     #8000,W8
1FAA:  BTSC    W10.F
1FAC:  XOR     W8,W7,W7
1FAE:  MOV     W5,W1
1FB0:  MOV     W4,W0
1FB2:  MOV     W6,W2
1FB4:  MOV     W7,W3
1FB6:  BRA     1FDC
1FB8:  BRA     1FDC
1FBA:  AND     #F,W7
1FBC:  BSET    W7.4
1FBE:  AND     #F,W3
1FC0:  BSET    W3.4
1FC2:  BTSC    W11.F
1FC4:  BCLR    W7.4
1FC6:  BSET    W13.2
1FC8:  BRA     1EBC
1FCA:  AND     #F,W3
1FCC:  BSET    W3.4
1FCE:  AND     #F,W7
1FD0:  BSET    W7.4
1FD2:  SUB     W8,W9,W8
1FD4:  ADD     W8,W9,W9
1FD6:  BCLR    W13.1
1FD8:  BSET    W13.0
1FDA:  BRA     1E6E
1FDC:  MOV     #1A,W8
1FDE:  REPEAT  #4
1FE0:  MOV     [--W15],[W8--]
1FE2:  MOV     [--W15],W8
1FE4:  RETURN  
1FE6:  MOV     W5,[W15++]
1FE8:  MOV     #C,W5
1FEA:  REPEAT  #5
1FEC:  MOV     [W5++],[W15++]
1FEE:  MOV     W3,W8
1FF0:  MOV     W2,W7
1FF2:  MOV     W1,W6
1FF4:  MOV     W0,W5
1FF6:  MOV     W3,W9
1FF8:  MOV     #473,W11
1FFA:  ASR     W3,#4,W3
1FFC:  MOV     #7FF,W10
1FFE:  AND     W10,W3,W3
2000:  SUB     W11,W3,W11
2002:  AND     #1F,W8
2004:  BSET    W8.4
2006:  CLR     W0
2008:  CLR     W1
200A:  CLR     W2
200C:  CLR     W3
200E:  BCLR.B  42.0
2010:  RRC     W8,W8
2012:  RRC     W7,W7
2014:  RRC     W6,W6
2016:  RRC     W5,W5
2018:  RRC     W3,W3
201A:  RRC     W2,W2
201C:  RRC     W1,W1
201E:  RRC     W0,W0
2020:  DEC     W11,W11
2022:  BRA     NZ,200E
2024:  BTSS    W9.F
2026:  BRA     2032
2028:  NEG     W0,W0
202A:  COM     W1,W1
202C:  COM     W2,W2
202E:  COM     W3,W3
2030:  BRA     2032
2032:  MOV     #16,W5
2034:  REPEAT  #5
2036:  MOV     [--W15],[W5--]
2038:  MOV     [--W15],W5
203A:  RETURN  
*
20FE:  MOV     W5,[W15++]
2100:  MOV     W6,[W15++]
2102:  MOV     #8E,W1
2104:  CP0     W0
2106:  BRA     Z,212C
2108:  BTSC    W0.F
210A:  BRA     2114
210C:  BCLR.B  42.0
210E:  RLC     W0,W0
2110:  DEC     W1,W1
2112:  BRA     2108
2114:  SWAP    W1
2116:  BCLR.B  42.0
2118:  RRC     W1,W1
211A:  BCLR    W0.F
211C:  SWAP    W0
211E:  XOR.B   W0L,W1L,W1L
2120:  AND.B   #0,W0L
2122:  BRA     2132
2124:  MOV.B   W1L,W0L
2126:  BSET    W1.7
2128:  AND.B   #0,W1L
212A:  BRA     2132
212C:  CLR     W0
212E:  CLR     W1
2130:  BRA     2132
2132:  MOV     [--W15],W6
2134:  MOV     [--W15],W5
2136:  RETURN  
2138:  MOV     W5,[W15++]
213A:  MOV     #C,W5
213C:  REPEAT  #4
213E:  MOV     [W5++],[W15++]
2140:  CLR     W9
2142:  XOR     W1,W3,W9
2144:  MOV     W1,W6
2146:  MOV     W0,W5
2148:  MOV     W3,W8
214A:  MOV     W2,W7
214C:  RLC     W1,W1
214E:  SWAP    W1
2150:  ZE      W1,W1
2152:  CP0     W1
2154:  BRA     Z,21F2
2156:  RLC     W3,W3
2158:  SWAP    W3
215A:  ZE      W3,W3
215C:  CP0     W3
215E:  BRA     Z,21F2
2160:  CLR     W0
2162:  SUB.B   W1L,W3L,W0L
2164:  BRA     NC,216C
2166:  ADD.B   #7F,W0L
2168:  BRA     C,21F2
216A:  BRA     2172
216C:  SUB.B   #81,W0L
216E:  BRA     NC,21F2
2170:  BRA     Z,21F2
2172:  MOV     W5,W1
2174:  MOV     W6,W2
2176:  BSET    W2.7
2178:  AND     #FF,W2
217A:  AND     #FF,W8
217C:  BSET    W8.7
217E:  MOV     #19,W10
2180:  CLR     W3
2182:  CLR     W4
2184:  SUB     W1,W7,W1
2186:  SUBB    W2,W8,W2
2188:  BRA     N,218E
218A:  BRA     C,2194
218C:  BRA     NZ,2196
218E:  ADD     W1,W7,W1
2190:  ADDC    W2,W8,W2
2192:  BRA     2196
2194:  BSET    W4.0
2196:  DEC     W10,W10
2198:  BRA     Z,21A8
219A:  BCLR.B  42.0
219C:  RLC     W1,W1
219E:  RLC     W2,W2
21A0:  BCLR.B  42.0
21A2:  RLC     W4,W4
21A4:  RLC     W3,W3
21A6:  BRA     2184
21A8:  CLR     W10
21AA:  BTSC    W3.8
21AC:  BRA     21B0
21AE:  BRA     21BC
21B0:  BCLR.B  42.0
21B2:  RRC     W3,W3
21B4:  BCLR    W3.7
21B6:  RRC     W4,W4
21B8:  RLC     W10,W10
21BA:  BRA     21C0
21BC:  DEC     W0,W0
21BE:  BRA     Z,21F2
21C0:  BTSC    W10.F
21C2:  BRA     NC,21CE
21C4:  RLC     W1,W1
21C6:  RLC     W2,W2
21C8:  SUB     W1,W7,W1
21CA:  SUBB    W2,W8,W2
21CC:  BRA     NC,21E0
21CE:  INC     W4,W4
21D0:  BRA     NZ,21E0
21D2:  INC     W3,W3
21D4:  BRA     NZ,21E0
21D6:  INC     W0,W0
21D8:  BRA     Z,21F2
21DA:  BRA     21E0
21DC:  DEC     W0,W0
21DE:  BRA     Z,21F2
21E0:  SWAP    W0
21E2:  RRC     W0,W1
21E4:  BSET    W1.F
21E6:  BTSS    W9.F
21E8:  BCLR    W1.F
21EA:  BCLR    W3.7
21EC:  XOR.B   W3L,W1L,W1L
21EE:  MOV     W4,W0
21F0:  BRA     21F8
21F2:  MOV     #0,W0
21F4:  MOV     #0,W1
21F6:  BRA     21F8
21F8:  MOV     #14,W5
21FA:  REPEAT  #4
21FC:  MOV     [--W15],[W5--]
21FE:  MOV     [--W15],W5
2200:  RETURN  
2202:  MOV     W5,[W15++]
2204:  MOV     W2,W3
2206:  MOV     W2,W5
2208:  BCLR.B  42.0
220A:  RLC     W3,W3
220C:  SWAP    W3
220E:  AND     #FF,W3
2210:  BRA     NZ,2218
2212:  MUL.UU  W0,#0,W0
2214:  MUL.UU  W2,#0,W2
2216:  BRA     2244
2218:  ADD     #380,W3
221A:  AND     #7F,W2
221C:  MOV     #3,W6
221E:  CLR     W4
2220:  BCLR.B  42.0
2222:  RRC     W2,W2
2224:  RRC     W1,W1
2226:  RRC     W0,W0
2228:  BTSC.B  42.0
222A:  INC     W4,W4
222C:  DEC     W6,W6
222E:  BRA     NZ,2220
2230:  BCLR    W2.7
2232:  SL      W3,#4,W3
2234:  BCLR    W3.F
2236:  BTSC    W5.F
2238:  BSET    W3.F
223A:  XOR     W2,W3,W3
223C:  MOV     W1,W2
223E:  MOV     W0,W1
2240:  ADD     W4,W1,W1
2242:  CLR     W0
2244:  MOV     [--W15],W5
2246:  RETURN  
2248:  MOV     W5,[W15++]
224A:  MOV     #C,W5
224C:  REPEAT  #5
224E:  MOV     [W5++],[W15++]
2250:  MOV     W3,W8
2252:  MOV     W2,W7
2254:  MOV     W1,W6
2256:  MOV     W0,W5
2258:  MOV     W3,W9
225A:  MOV     #473,W11
225C:  ASR     W3,#4,W3
225E:  MOV     #7FF,W10
2260:  AND     W10,W3,W3
2262:  SUB     W11,W3,W11
2264:  AND     #1F,W8
2266:  BSET    W8.4
2268:  CLR     W0
226A:  CLR     W1
226C:  CLR     W2
226E:  CLR     W3
2270:  BCLR.B  42.0
2272:  RRC     W8,W8
2274:  RRC     W7,W7
2276:  RRC     W6,W6
2278:  RRC     W5,W5
227A:  RRC     W3,W3
227C:  RRC     W2,W2
227E:  RRC     W1,W1
2280:  RRC     W0,W0
2282:  DEC     W11,W11
2284:  BRA     NZ,2270
2286:  BTSS    W9.F
2288:  BRA     2294
228A:  NEG     W0,W0
228C:  COM     W1,W1
228E:  COM     W2,W2
2290:  COM     W3,W3
2292:  BRA     2294
2294:  MOV     #16,W5
2296:  REPEAT  #5
2298:  MOV     [--W15],[W5--]
229A:  MOV     [--W15],W5
229C:  RETURN  
229E:  MOV     W12,[W15++]
22A0:  MOV     W13,[W15++]
22A2:  CLR     W8
22A4:  CLR     W9
22A6:  CLR     W10
22A8:  CLR     W11
22AA:  CLR     W12
22AC:  CLR     W13
22AE:  MOV     #E,W8
22B0:  MOV     #0,W9
22B2:  LNK     #10
22B4:  MOV     W12,[W14+W8]
22B6:  DEC2    W8,W8
22B8:  BRA     NN,22B4
22BA:  XOR     W4,W5,W8
22BC:  BRA     NZ,22C2
22BE:  XOR     W6,W7,W8
22C0:  BRA     Z,2320
22C2:  CLR     W8
22C4:  MOV     #40,W13
22C6:  MOV     #40,W13
22C8:  BCLR.B  42.0
22CA:  RLC     W0,W0
22CC:  RLC     W1,W1
22CE:  RLC     W2,W2
22D0:  RLC     W3,W3
22D2:  RLC     W8,W8
22D4:  RLC     W9,W9
22D6:  RLC     W10,W10
22D8:  RLC     W11,W11
22DA:  CP      W11,W7
22DC:  BRA     NZ,22E8
22DE:  CPB     W10,W6
22E0:  BRA     NZ,22E8
22E2:  CPB     W9,W5
22E4:  BRA     NZ,22E8
22E6:  CPB     W8,W4
22E8:  BRA     NC,22F4
22EA:  SUB     W8,W4,W8
22EC:  SUBB    W9,W5,W9
22EE:  SUBB    W10,W6,W10
22F0:  SUBB    W11,W7,W11
22F2:  BSET.B  42.0
22F4:  MOV     W8,[W14]
22F6:  MOV     W9,[W14+#2]
22F8:  MOV     W10,[W14+#4]
22FA:  MOV     W11,[W14+#6]
22FC:  MOV     [W14+#8],W8
22FE:  MOV     [W14+#A],W9
2300:  MOV     [W14+#C],W10
2302:  MOV     [W14+#E],W11
2304:  RLC     W8,W8
2306:  RLC     W9,W9
2308:  RLC     W10,W10
230A:  RLC     W11,W11
230C:  MOV     W8,[W14+#8]
230E:  MOV     W9,[W14+#A]
2310:  MOV     W10,[W14+#C]
2312:  MOV     W11,[W14+#E]
2314:  MOV     [W14],W8
2316:  MOV     [W14+#2],W9
2318:  MOV     [W14+#4],W10
231A:  MOV     [W14+#6],W11
231C:  DEC     W13,W13
231E:  BRA     NZ,22C8
2320:  MOV     [W14+#8],W0
2322:  MOV     [W14+#A],W1
2324:  MOV     [W14+#C],W2
2326:  MOV     [W14+#E],W3
2328:  ULNK    
232A:  BRA     232C
232C:  MOV     [--W15],W13
232E:  MOV     [--W15],W12
2330:  RETURN  
2332:  MOV     W5,[W15++]
2334:  MOV     #C,W5
2336:  REPEAT  #7
2338:  MOV     [W5++],[W15++]
233A:  LNK     #2A
233C:  MOV     #28,W8
233E:  CLR     W12
2340:  MOV     W12,[W14+W8]
2342:  DEC2    W8,W8
2344:  BRA     NN,2340
2346:  CP0     W9
2348:  BRA     Z,2366
234A:  MOV     W9,[W14+#26]
234C:  MOV     W10,[W14+#28]
234E:  MOV     #4024,W7
2350:  CLR     W6
2352:  MUL.UU  W4,#0,W4
2354:  MOV     W9,[W14+#24]
2356:  MOV     #4024,W7
2358:  CLR     W6
235A:  MUL.UU  W4,#0,W4
235C:  CALL    1CE8
2360:  MOV     [W14+#24],W9
2362:  DEC     W9,W9
2364:  BRA     NZ,2354
2366:  MOV     [W14+#26],W9
2368:  MOV     #14,W8
236A:  MOV     W8,[W14+#24]
236C:  MOV     #41CD,W7
236E:  MOV     #CD65,W6
2370:  MUL.UU  W4,#0,W4
2372:  MOV     W0,[W14+#10]
2374:  MOV     W1,[W14+#12]
2376:  MOV     W2,[W14+#14]
2378:  MOV     W3,[W14+#16]
237A:  MOV     #14,W8
237C:  MOV     W8,[W14+#20]
237E:  MOV     #0,W4
2380:  MOV     #89E8,W5
2382:  MOV     #2304,W6
2384:  MOV     #8AC7,W7
2386:  MOV     W4,[W14+#18]
2388:  MOV     W5,[W14+#1A]
238A:  MOV     W6,[W14+#1C]
238C:  MOV     W7,[W14+#1E]
238E:  BTSS    W3.F
2390:  BRA     239A
2392:  MOV     [W14+#28],W8
2394:  DEC     W8,W8
2396:  BSET    W8.D
2398:  MOV     W8,[W14+#28]
239A:  BCLR    W3.F
239C:  CALL    2248
23A0:  MOV     [W14+#28],W8
23A2:  MOV     [W14+#26],W9
23A4:  CP0     W9
23A6:  BTSC.B  42.1
23A8:  INC.B   W8L,W8L
23AA:  MOV     W8,[W14+#28]
23AC:  MOV     [W14+#22],W9
23AE:  CLR     W9
23B0:  MOV     W9,[W14+#22]
23B2:  MOV     [W14+#18],W4
23B4:  MOV     [W14+#1A],W5
23B6:  MOV     [W14+#1C],W6
23B8:  MOV     [W14+#1E],W7
23BA:  CALL    229E
23BE:  MOV     [W14+#22],W13
23C0:  BTSC    W13.0
23C2:  BRA     2488
23C4:  MOV     W8,[W14+#10]
23C6:  MOV     W9,[W14+#12]
23C8:  MOV     W10,[W14+#14]
23CA:  MOV     W11,[W14+#16]
23CC:  MOV     [W14+#22],W13
23CE:  BTG     W13.0
23D0:  MOV     W13,[W14+#22]
23D2:  CP0     W0
23D4:  BRA     NZ,23FA
23D6:  MOV     [W14+#26],W9
23D8:  INC     W9,W9
23DA:  MOV     [W14+#24],W10
23DC:  SUB     W10,W9,W8
23DE:  BRA     Z,23FA
23E0:  MOV     [W14+#28],W11
23E2:  CP0     W11
23E4:  BRA     Z,2402
23E6:  AND     W11,#1F,W8
23E8:  SUB     W10,W8,W8
23EA:  BRA     Z,23EE
23EC:  BRA     C,2470
23EE:  BTSC    W11.F
23F0:  BRA     2470
23F2:  BTSC    W11.E
23F4:  BRA     2402
23F6:  MOV     #20,W0
23F8:  BRA     2468
23FA:  MOV     [W14+#28],W11
23FC:  MOV     #2000,W12
23FE:  AND     W12,W11,W11
2400:  MOV     W11,[W14+#28]
2402:  MOV     [W14+#28],W11
2404:  BTSS    W11.D
2406:  BRA     2426
2408:  BCLR    W11.D
240A:  MOV     [W14+#26],W9
240C:  CP0     W9
240E:  BTSS.B  42.1
2410:  DEC     W11,W11
2412:  CLR     W11
2414:  MOV     W11,[W14+#28]
2416:  MOV     W0,W10
2418:  BTSC.B  223.1
241A:  BRA     2418
241C:  MOV     #2D,W4
241E:  MOV     W4,224
2420:  MOV     W10,W0
2422:  CLR     W11
2424:  MOV     W11,[W14+#28]
2426:  MOV     [W14+#26],W9
2428:  MOV     [W14+#24],W10
242A:  SUB     W10,W9,W8
242C:  BRA     NZ,2446
242E:  CLR     W11
2430:  MOV     W11,[W14+#28]
2432:  MOV     W0,W10
2434:  BTSC.B  223.1
2436:  BRA     2434
2438:  MOV     #2E,W4
243A:  MOV     W4,224
243C:  MOV     [W14+#28],W11
243E:  MOV     #2000,W12
2440:  AND     W12,W11,W11
2442:  MOV     W11,[W14+#28]
2444:  MOV     W10,W0
2446:  MOV     #30,W1
2448:  MOV     [W14+#28],W11
244A:  BTSS    W11.D
244C:  BRA     2468
244E:  BCLR    W11.D
2450:  MOV     [W14+#26],W9
2452:  CP0     W9
2454:  BTSS.B  42.1
2456:  DEC     W11,W11
2458:  CLR     W11
245A:  MOV     W11,[W14+#28]
245C:  BTSC.B  223.1
245E:  BRA     245C
2460:  MOV     #2D,W4
2462:  MOV     W4,224
2464:  CLR     W0
2466:  MOV     #30,W1
2468:  ADD     W1,W0,W0
246A:  BTSC.B  223.1
246C:  BRA     246A
246E:  MOV     W0,224
2470:  MOV     [W14+#24],W13
2472:  DEC     W13,W13
2474:  BRA     Z,24A8
2476:  MOV     W13,[W14+#24]
2478:  MOV     [W14+#18],W0
247A:  MOV     [W14+#1A],W1
247C:  MOV     [W14+#1C],W2
247E:  MOV     [W14+#1E],W3
2480:  MOV     #A,W4
2482:  CLR     W5
2484:  MUL.UU  W6,#0,W6
2486:  BRA     23BA
2488:  MOV     W0,[W14+#18]
248A:  MOV     W1,[W14+#1A]
248C:  MOV     W2,[W14+#1C]
248E:  MOV     W3,[W14+#1E]
2490:  MOV     W0,W4
2492:  MOV     W1,W5
2494:  MOV     W2,W6
2496:  MOV     W3,W7
2498:  MOV     [W14+#10],W0
249A:  MOV     [W14+#12],W1
249C:  MOV     [W14+#14],W2
249E:  MOV     [W14+#16],W3
24A0:  MOV     [W14+#22],W13
24A2:  BTG     W13.0
24A4:  MOV     W13,[W14+#22]
24A6:  BRA     23BA
24A8:  ULNK    
24AA:  MOV     #1A,W5
24AC:  REPEAT  #7
24AE:  MOV     [--W15],[W5--]
24B0:  MOV     [--W15],W5
24B2:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
*
1068:  CP0     W0
106A:  BTSC.B  42.1
106C:  BRA     1076
106E:  REPEAT  #3E7B
1070:  NOP     
1072:  DEC     W0,W0
1074:  BRA     NZ,106E
1076:  RETURN  
....................  
.................... #PIN_SELECT U1RX = PIN_B12 // PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 // PIN_B15 // 
.................... #use rs232(UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define DEVICE_ID 2 
.................... #define limitSw_x PIN_B8 // 
.................... #define limitSw_y PIN_A2 // 
.................... #define limitSw_z PIN_A4 // 
.................... #define Motor_Bp PIN_B10 // Pin output is connected to DXI0  (PWM) 
.................... #define Motor_Br PIN_B2  // Pin output is connected to DX02 
.................... #define Motor_Bl PIN_B3  // Pin output is connected to DX03 
.................... #define Motor_Ap PIN_B4  // Pin output is connected to DX03 
.................... #define Motor_Ar PIN_A1  // Pin output is connected to DX03 
.................... #define Motor_Al PIN_A0  // Pin output is connected to DX03 
.................... #define Motor_Zp PIN_B14 // Pin output is connected to DX03 
.................... #define Motor_Zr PIN_B15 // Pin output is connected to DX03 
.................... #define Motor_Zl PIN_B9  // Pin output is connected to DX03 
.................... #define Encode_A PIN_B7  // Pin output is connected to DX03 
.................... #define Encode_B PIN_B6  // Pin output is connected to DX03 
.................... #define Encode_Z PIN_B5  // Pin output is connected to DX03 
.................... #define servo_r PIN_B0   // servo 270 
.................... #define servo_l PIN_B1   // servo 180 
....................  
.................... #PIN_SELECT OC1 = Motor_Bp 
.................... #PIN_SELECT OC2 = Motor_Ap 
.................... #PIN_SELECT OC3 = Motor_Zp 
.................... #PIN_SELECT OC4 = servo_r 
.................... #PIN_SELECT OC5 = servo_l 
.................... #PIN_SELECT INT1 = Encode_B 
.................... #PIN_SELECT INT2 = Encode_Z 
....................  
.................... // long count = 0; 
.................... long count_a = 0; 
.................... long count_b = 0; 
.................... long count_z = 0; 
.................... // long posi = 0; 
.................... int u_a; 
.................... int *a_u = &u_a; 
.................... int u_b; 
.................... int *b_u = &u_b; 
.................... int u_z; 
.................... int *z_u = &u_z; 
....................  
.................... int s_a = 0; 
.................... int *a_s = &s_a; 
.................... int s_b = 0; 
.................... int *b_s = &s_b; 
.................... int s_z = 0; 
.................... int *z_s = &s_z; 
.................... int p_a = 0; 
.................... int *a_p = &p_a; 
.................... int p_b = 0; 
.................... int *b_p = &p_b; 
.................... int p_z = 0; 
.................... int *z_p = &p_z; 
....................  
.................... int tolerance_a = 30; 
.................... int tolerance_b = 30; 
.................... int tolerance_z = 20; 
....................  
.................... float K_Pz = 0.6; 
.................... float K_Iz = 0.0015; 
.................... float K_Dz = 0.002; 
.................... float K_Pa = 0.6; 
.................... float K_Ia = 0.001; 
.................... float K_Da = 0.0025; 
.................... float K_Pb = 0.6; 
.................... float K_Ib = 0.001; 
.................... float K_Db = 0.0025; 
....................  
.................... int direction_z = 0; 
.................... int direction_a = 0; 
.................... int direction_b = 0; 
.................... char array[20] = {}; 
.................... char SM_id = 0; 
.................... int getPackage = 0; 
.................... char command_ID; 
.................... // char* print_float(float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     char stringFloat[20]; 
.................... //     sprintf(stringFloat, "%d.%d", intDist, dotDist); 
.................... //     return stringFloat; 
.................... // } 
.................... // void print_float(char* stringResult, float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     sprintf(stringResult, "%d.%d", intDist, dotDist); 
.................... // } 
....................  
.................... // Encoder Interrupts 
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0(void) { 
*
0EF2:  PUSH    42
0EF4:  PUSH    36
0EF6:  PUSH    32
0EF8:  MOV     W0,[W15++]
0EFA:  MOV     #2,W0
0EFC:  REPEAT  #C
0EFE:  MOV     [W0++],[W15++]
....................   if (direction_a == 0) { 
0F00:  CP0     90C
0F02:  BRA     NZ,F0C
....................     count_a++; 
0F04:  INC     08B0
0F06:  BTSC.B  42.1
0F08:  INC     08B2
....................   } else { 
0F0A:  BRA     F12
....................     count_a--; 
0F0C:  DEC     08B0
0F0E:  BTSS.B  42.0
0F10:  DEC     08B2
....................   } 
.................... } 
....................  
0F12:  BCLR.B  84.0
0F14:  MOV     #1A,W0
0F16:  REPEAT  #C
0F18:  MOV     [--W15],[W0--]
0F1A:  MOV     [--W15],W0
0F1C:  POP     32
0F1E:  POP     36
0F20:  POP     42
0F22:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
0F24:  PUSH    42
0F26:  PUSH    36
0F28:  PUSH    32
0F2A:  MOV     W0,[W15++]
0F2C:  MOV     #2,W0
0F2E:  REPEAT  #C
0F30:  MOV     [W0++],[W15++]
....................   if (direction_b == 0) { 
0F32:  CP0     90E
0F34:  BRA     NZ,F3E
....................     count_b++; 
0F36:  INC     08B4
0F38:  BTSC.B  42.1
0F3A:  INC     08B6
....................   } else { 
0F3C:  BRA     F44
....................     count_b--; 
0F3E:  DEC     08B4
0F40:  BTSS.B  42.0
0F42:  DEC     08B6
....................   } 
.................... } 
....................  
0F44:  BCLR.B  86.4
0F46:  MOV     #1A,W0
0F48:  REPEAT  #C
0F4A:  MOV     [--W15],[W0--]
0F4C:  MOV     [--W15],W0
0F4E:  POP     32
0F50:  POP     36
0F52:  POP     42
0F54:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2(void) { 
0F56:  PUSH    42
0F58:  PUSH    36
0F5A:  PUSH    32
0F5C:  MOV     W0,[W15++]
0F5E:  MOV     #2,W0
0F60:  REPEAT  #C
0F62:  MOV     [W0++],[W15++]
....................   if (direction_z == 0) { 
0F64:  CP0     90A
0F66:  BRA     NZ,F70
....................     count_z++; 
0F68:  INC     08B8
0F6A:  BTSC.B  42.1
0F6C:  INC     08BA
....................   } else { 
0F6E:  BRA     F76
....................     count_z--; 
0F70:  DEC     08B8
0F72:  BTSS.B  42.0
0F74:  DEC     08BA
....................   } 
0F76:  BCLR.B  87.5
0F78:  MOV     #1A,W0
0F7A:  REPEAT  #C
0F7C:  MOV     [--W15],[W0--]
0F7E:  MOV     [--W15],W0
0F80:  POP     32
0F82:  POP     36
0F84:  POP     42
0F86:  RETFIE  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT0); 
*
1028:  BSET.B  94.0
....................   ext_int_edge(0, L_TO_H); // Rising Edge 
102A:  BCLR.B  82.0
....................   enable_interrupts(INT_EXT1); 
102C:  BSET.B  96.4
....................   ext_int_edge(1, L_TO_H); // Rising Edge 
102E:  BCLR.B  82.1
....................   enable_interrupts(INT_EXT2); 
1030:  BSET.B  97.5
....................   ext_int_edge(2, L_TO_H); // Rising Edge 
1032:  BCLR.B  82.2
1034:  RETURN  
.................... } 
....................  
.................... // 
....................  
.................... // Communication Routines 
....................  
.................... void SM_RxD(int c) { 
*
0F88:  MOV     W5,[W15++]
....................   if (getPackage == 0) { 
0F8A:  CP0     926
0F8C:  BRA     NZ,FF2
....................     if (SM_id < 2) { 
0F8E:  MOV.B   924,W0L
0F90:  SE      W0,W0
0F92:  CP      W0,#2
0F94:  BRA     GE,FB0
....................       if (c == 255) { 
0F96:  MOV     996,W4
0F98:  XOR     #FF,W4
0F9A:  BRA     NZ,FAC
....................         array[SM_id] = c; 
0F9C:  MOV.B   924,W0L
0F9E:  SE      W0,W0
0FA0:  MOV     #910,W4
0FA2:  ADD     W0,W4,W5
0FA4:  MOV     996,W0
0FA6:  MOV.B   W0L,[W5+#0]
....................         SM_id++; 
0FA8:  INC.B   0924
....................       } else { 
0FAA:  BRA     FAE
....................         SM_id = 0; 
0FAC:  CLR.B   924
....................       } 
....................     } else if (SM_id == 2) { 
0FAE:  BRA     FF2
0FB0:  MOV.B   924,W0L
0FB2:  SE      W0,W0
0FB4:  CP      W0,#2
0FB6:  BRA     NZ,FCC
....................       array[SM_id] = c; 
0FB8:  MOV.B   924,W0L
0FBA:  SE      W0,W0
0FBC:  MOV     #910,W4
0FBE:  ADD     W0,W4,W5
0FC0:  MOV     996,W0
0FC2:  MOV.B   W0L,[W5+#0]
....................       command_ID = c; 
0FC4:  MOV.B   996,W0L
0FC6:  MOV.B   W0L,925
....................       SM_id++; 
0FC8:  INC.B   0924
....................     } else if (SM_id > 2) { 
0FCA:  BRA     FF2
0FCC:  MOV.B   924,W0L
0FCE:  SE      W0,W0
0FD0:  CP      W0,#2
0FD2:  BRA     LE,FF2
....................       array[SM_id] = c; 
0FD4:  MOV.B   924,W0L
0FD6:  SE      W0,W0
0FD8:  MOV     #910,W4
0FDA:  ADD     W0,W4,W5
0FDC:  MOV     996,W0
0FDE:  MOV.B   W0L,[W5+#0]
....................       if (SM_id >= 9) { 
0FE0:  MOV.B   924,W0L
0FE2:  SE      W0,W0
0FE4:  CP      W0,#9
0FE6:  BRA     LT,FF0
....................         getPackage = 1; 
0FE8:  MOV     #1,W4
0FEA:  MOV     W4,926
....................         SM_id = 0; 
0FEC:  CLR.B   924
....................       } else { 
0FEE:  BRA     FF2
....................         SM_id++; 
0FF0:  INC.B   0924
....................       } 
....................     } 
....................   } 
0FF2:  MOV     [--W15],W5
0FF4:  RETURN  
.................... } 
....................  
.................... #INT_RDA 
.................... void UART1_Isr() { 
0FF6:  PUSH    42
0FF8:  PUSH    36
0FFA:  PUSH    32
0FFC:  MOV     W0,[W15++]
0FFE:  MOV     #2,W0
1000:  REPEAT  #C
1002:  MOV     [W0++],[W15++]
1004:  BTSS.B  222.0
1006:  BRA     1004
1008:  MOV     226,W0
100A:  MOV.B   W0L,992
100C:  CLR.B   993
....................   int c = getc(); 
....................   // putc(c); 
....................   SM_RxD(c); 
100E:  PUSH    992
1010:  POP     996
1012:  CALL    F88
1016:  BCLR.B  85.3
1018:  MOV     #1A,W0
101A:  REPEAT  #C
101C:  MOV     [--W15],[W0--]
101E:  MOV     [--W15],W0
1020:  POP     32
1022:  POP     36
1024:  POP     42
1026:  RETFIE  
.................... } 
.................... // 
....................  
.................... // Motor 
.................... void Motor_z(int u) { 
*
1078:  MOV     W5,[W15++]
....................   if (u > 100) 
107A:  MOV     92E,W4
107C:  MOV     #64,W3
107E:  CP      W3,W4
1080:  BRA     GE,1086
....................     u = 100; 
1082:  MOV     #64,W4
1084:  MOV     W4,92E
....................   if (u < -100) 
1086:  MOV     92E,W4
1088:  MOV     #FF9C,W3
108A:  CP      W3,W4
108C:  BRA     LE,1092
....................     u = -100; 
108E:  MOV     #FF9C,W4
1090:  MOV     W4,92E
....................   if (u > 0) { 
1092:  MOV     92E,W4
1094:  CP      W4,#0
1096:  BRA     LE,10AC
....................     output_bit(Motor_Zr, 0); 
1098:  BCLR.B  2CD.7
109A:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
109C:  BSET.B  2CD.1
109E:  BCLR.B  2C9.1
....................     direction_z = 0; 
10A0:  CLR     90A
....................     set_pwm_duty(3, (int)(2 * u)); 
10A2:  MOV     92E,W4
10A4:  MUL.UU  W4,#2,W0
10A6:  MOV     W0,W5
10A8:  MOV     W5,18C
....................   } else if (u < 0) { 
10AA:  BRA     10E0
10AC:  MOV     92E,W4
10AE:  CP      W4,#0
10B0:  BRA     GE,10CE
....................     output_bit(Motor_Zr, 1); 
10B2:  BSET.B  2CD.7
10B4:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 0); 
10B6:  BCLR.B  2CD.1
10B8:  BCLR.B  2C9.1
....................     direction_z = 1; 
10BA:  MOV     #1,W4
10BC:  MOV     W4,90A
....................     set_pwm_duty(3, (int)(2 * -u)); 
10BE:  MOV     #0,W4
10C0:  MOV     92E,W3
10C2:  SUB     W4,W3,W0
10C4:  MOV     W0,W4
10C6:  MUL.UU  W4,#2,W0
10C8:  MOV     W0,W5
10CA:  MOV     W5,18C
....................   } else { 
10CC:  BRA     10E0
....................     output_bit(Motor_Zr, 1); 
10CE:  BSET.B  2CD.7
10D0:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
10D2:  BSET.B  2CD.1
10D4:  BCLR.B  2C9.1
....................     set_pwm_duty(3, (int)(100)); 
10D6:  MOV     #64,W4
10D8:  MOV     W4,18C
....................     delay_ms(200); 
10DA:  MOV     #C8,W0
10DC:  CALL    1068
....................   } 
10E0:  MOV     [--W15],W5
10E2:  RETURN  
.................... } 
....................  
.................... void Motor_a(int u) { 
10E4:  MOV     W5,[W15++]
....................   if (u > 100) 
10E6:  MOV     934,W4
10E8:  MOV     #64,W3
10EA:  CP      W3,W4
10EC:  BRA     GE,10F2
....................     u = 100; 
10EE:  MOV     #64,W4
10F0:  MOV     W4,934
....................   if (u < -100) 
10F2:  MOV     934,W4
10F4:  MOV     #FF9C,W3
10F6:  CP      W3,W4
10F8:  BRA     LE,10FE
....................     u = -100; 
10FA:  MOV     #FF9C,W4
10FC:  MOV     W4,934
....................   if (u > 0) { 
10FE:  MOV     934,W4
1100:  CP      W4,#0
1102:  BRA     LE,1118
....................     output_bit(Motor_Ar, 1); 
1104:  BSET.B  2C4.1
1106:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 0); 
1108:  BCLR.B  2C4.0
110A:  BCLR.B  2C0.0
....................     direction_a = 0; 
110C:  CLR     90C
....................     set_pwm_duty(2, (int)(2 * u)); 
110E:  MOV     934,W4
1110:  MUL.UU  W4,#2,W0
1112:  MOV     W0,W5
1114:  MOV     W5,186
....................   } else if (u < 0) { 
1116:  BRA     114C
1118:  MOV     934,W4
111A:  CP      W4,#0
111C:  BRA     GE,113A
....................     output_bit(Motor_Ar, 0); 
111E:  BCLR.B  2C4.1
1120:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 1); 
1122:  BSET.B  2C4.0
1124:  BCLR.B  2C0.0
....................     direction_a = 1; 
1126:  MOV     #1,W4
1128:  MOV     W4,90C
....................     set_pwm_duty(2, (int)(2 * -u)); 
112A:  MOV     #0,W4
112C:  MOV     934,W3
112E:  SUB     W4,W3,W0
1130:  MOV     W0,W4
1132:  MUL.UU  W4,#2,W0
1134:  MOV     W0,W5
1136:  MOV     W5,186
....................   } else { 
1138:  BRA     114C
....................     output_bit(Motor_Ar, 1); 
113A:  BSET.B  2C4.1
113C:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 1); 
113E:  BSET.B  2C4.0
1140:  BCLR.B  2C0.0
....................     set_pwm_duty(2, (int)(100)); 
1142:  MOV     #64,W4
1144:  MOV     W4,186
....................     delay_ms(200); 
1146:  MOV     #C8,W0
1148:  CALL    1068
....................   } 
114C:  MOV     [--W15],W5
114E:  RETURN  
.................... } 
....................  
.................... void Motor_b(int u) { 
1150:  MOV     W5,[W15++]
....................   if (u > 100) 
1152:  MOV     934,W4
1154:  MOV     #64,W3
1156:  CP      W3,W4
1158:  BRA     GE,115E
....................     u = 100; 
115A:  MOV     #64,W4
115C:  MOV     W4,934
....................   if (u < -100) 
115E:  MOV     934,W4
1160:  MOV     #FF9C,W3
1162:  CP      W3,W4
1164:  BRA     LE,116A
....................     u = -100; 
1166:  MOV     #FF9C,W4
1168:  MOV     W4,934
....................   if (u > 0) { 
116A:  MOV     934,W4
116C:  CP      W4,#0
116E:  BRA     LE,1184
....................     output_bit(Motor_Br, 1); 
1170:  BSET.B  2CC.2
1172:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 0); 
1174:  BCLR.B  2CC.3
1176:  BCLR.B  2C8.3
....................     direction_b = 0; 
1178:  CLR     90E
....................     set_pwm_duty(1, (int)(2 * u)); 
117A:  MOV     934,W4
117C:  MUL.UU  W4,#2,W0
117E:  MOV     W0,W5
1180:  MOV     W5,180
....................   } else if (u < 0) { 
1182:  BRA     11B8
1184:  MOV     934,W4
1186:  CP      W4,#0
1188:  BRA     GE,11A6
....................     output_bit(Motor_Br, 0); 
118A:  BCLR.B  2CC.2
118C:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
118E:  BSET.B  2CC.3
1190:  BCLR.B  2C8.3
....................     direction_b = 1; 
1192:  MOV     #1,W4
1194:  MOV     W4,90E
....................     set_pwm_duty(1, (int)(2 * -u)); 
1196:  MOV     #0,W4
1198:  MOV     934,W3
119A:  SUB     W4,W3,W0
119C:  MOV     W0,W4
119E:  MUL.UU  W4,#2,W0
11A0:  MOV     W0,W5
11A2:  MOV     W5,180
....................   } else { 
11A4:  BRA     11B8
....................     output_bit(Motor_Br, 1); 
11A6:  BSET.B  2CC.2
11A8:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
11AA:  BSET.B  2CC.3
11AC:  BCLR.B  2C8.3
....................     set_pwm_duty(1, (int)(100)); 
11AE:  MOV     #64,W4
11B0:  MOV     W4,180
....................     delay_ms(200); 
11B2:  MOV     #C8,W0
11B4:  CALL    1068
....................   } 
11B8:  MOV     [--W15],W5
11BA:  RETURN  
.................... } 
....................  
.................... void PID(long r, long count, long s, long p, int *u, float K_P, float K_I, 
....................          float K_D) { 
*
1864:  MOV     W5,[W15++]
1866:  MOV     W6,[W15++]
1868:  MOV     W7,[W15++]
186A:  MOV     934,W4
186C:  MOV     938,W3
186E:  SUB     W4,W3,W0
1870:  MOV     W0,952
1872:  MOV     936,W4
1874:  MOV     93A,W3
1876:  SUBB    W4,W3,W0
1878:  MOV     W0,954
....................   long e = r - count; 
....................   s = s + e; 
187A:  MOV     93C,W0
187C:  ADD     952,W0
187E:  MOV     W0,93C
1880:  MOV     954,W4
1882:  MOV     93E,W3
1884:  ADDC    W3,W4,W0
1886:  MOV     W0,93E
....................   *u = (K_P * e) + (K_I * s) + (K_D * (e - p)); 
1888:  MOV     944,W5
188A:  MOV     952,W0
188C:  MOV     954,W1
188E:  CALL    157C
1892:  MOV     W0,W2
1894:  MOV     W1,W3
1896:  MOV     946,W0
1898:  MOV     948,W1
189A:  CALL    15CA
189E:  MOV.D   W0,W6
18A0:  MOV     93C,W0
18A2:  MOV     93E,W1
18A4:  CALL    157C
18A8:  MOV     W0,W2
18AA:  MOV     W1,W3
18AC:  MOV     94A,W0
18AE:  MOV     94C,W1
18B0:  CALL    15CA
18B4:  BCLR.B  43.0
18B6:  MOV     W0,W2
18B8:  MOV     W1,W3
18BA:  MOV     W6,W0
18BC:  MOV     W7,W1
18BE:  CALL    168E
18C2:  MOV.D   W0,W6
18C4:  MOV     952,W4
18C6:  MOV     940,W3
18C8:  SUB     W4,W3,W0
18CA:  MOV     954,W4
18CC:  MOV     942,W3
18CE:  SUBB    W4,W3,W1
18D0:  CALL    157C
18D4:  MOV     W0,W2
18D6:  MOV     W1,W3
18D8:  MOV     94E,W0
18DA:  MOV     950,W1
18DC:  CALL    15CA
18E0:  BCLR.B  43.0
18E2:  MOV     W0,W2
18E4:  MOV     W1,W3
18E6:  MOV     W6,W0
18E8:  MOV     W7,W1
18EA:  CALL    168E
18EE:  CALL    1838
18F2:  MOV     W0,[W5]
....................   p = e; 
18F4:  PUSH    952
18F6:  POP     940
18F8:  PUSH    954
18FA:  POP     942
18FC:  MOV     [--W15],W7
18FE:  MOV     [--W15],W6
1900:  MOV     [--W15],W5
1902:  RETURN  
.................... } 
.................... // 
....................  
.................... // Utilities 
.................... int mergeInts(int MSB, int LSB) { 
*
14E6:  MOV     W5,[W15++]
14E8:  MOV.B   93A,W0L
14EA:  CLR.B   1
14EC:  MOV     #100,W4
14EE:  MUL.SS  W4,W0,W0
14F0:  MOV     W0,W5
14F2:  MOV     93C,W4
14F4:  CLR.B   9
14F6:  ADD     W5,W4,W0
14F8:  CLR     W1
14FA:  BTSC    W0.F
14FC:  SETM    W1
14FE:  MOV     W0,93E
1500:  MOV     W1,940
....................   long a = (256 * (int)(unsigned char)MSB) + (unsigned char)LSB; 
....................   printf("merged %d and %d into: %d \n", MSB, LSB, a); 
1502:  MOV     #0,W1
1504:  MOV     W1,W0
1506:  CLR.B   1
1508:  CALL    DFC
150C:  INC     W1,W1
150E:  BTSC.B  223.1
1510:  BRA     150E
1512:  MOV     W0,224
1514:  MOV     #6,W0
1516:  CPSGT   W1,W0
1518:  BRA     1504
151A:  MOV     93A,W0
151C:  MOV     #0,W4
151E:  CALL    13F0
1522:  MOV     #9,W1
1524:  MOV     W1,W0
1526:  CLR.B   1
1528:  CALL    DFC
152C:  INC     W1,W1
152E:  BTSC.B  223.1
1530:  BRA     152E
1532:  MOV     W0,224
1534:  MOV     #D,W0
1536:  CPSGT   W1,W0
1538:  BRA     1524
153A:  MOV     93C,W0
153C:  MOV     #0,W4
153E:  CALL    13F0
1542:  MOV     #10,W1
1544:  MOV     W1,W0
1546:  CLR.B   1
1548:  CALL    DFC
154C:  INC     W1,W1
154E:  BTSC.B  223.1
1550:  BRA     154E
1552:  MOV     W0,224
1554:  MOV     #16,W0
1556:  CPSGT   W1,W0
1558:  BRA     1544
155A:  MOV     93E,W0
155C:  MOV     940,W1
155E:  MOV     #0,W4
1560:  CALL    1200
1564:  BTSC.B  223.1
1566:  BRA     1564
1568:  MOV     #20,W4
156A:  MOV     W4,224
156C:  BTSC.B  223.1
156E:  BRA     156C
1570:  MOV     #A,W4
1572:  MOV     W4,224
....................   return a; 
1574:  PUSH    93E
1576:  POP     0
1578:  MOV     [--W15],W5
157A:  RETURN  
.................... } 
....................  
.................... float intsToFloat(unsigned char LSB, unsigned char hexadec) { 
*
24B4:  MOV     W5,[W15++]
24B6:  MOV     #C,W5
24B8:  REPEAT  #4
24BA:  MOV     [W5++],[W15++]
24BC:  MOV.B   92A,W0L
24BE:  CLR.B   1
24C0:  CALL    20FE
24C4:  MOV     W0,W5
24C6:  MOV     W1,W6
24C8:  MOV.B   92B,W0L
24CA:  CLR.B   1
24CC:  CALL    20FE
24D0:  MOV     W0,W7
24D2:  MOV     W1,W8
24D4:  MOV     W7,W0
24D6:  MOV     W8,W1
24D8:  MOV     #0,W2
24DA:  MOV     #4380,W3
24DC:  CALL    2138
24E0:  BCLR.B  43.0
24E2:  MOV     W0,W2
24E4:  MOV     W1,W3
24E6:  MOV     W5,W0
24E8:  MOV     W6,W1
24EA:  CALL    168E
24EE:  MOV     W0,92C
24F0:  MOV     W1,92E
....................   float flo = (float)LSB + ((float)hexadec) / 256; 
....................   printf("merged %d and %d into: %0.2f\n", LSB, hexadec, flo); 
24F2:  MOV     #0,W1
24F4:  MOV     W1,W0
24F6:  CLR.B   1
24F8:  CALL    E24
24FC:  INC     W1,W1
24FE:  BTSC.B  223.1
2500:  BRA     24FE
2502:  MOV     W0,224
2504:  MOV     #6,W0
2506:  CPSGT   W1,W0
2508:  BRA     24F4
250A:  MOV.B   92A,W0L
250C:  SE      W0,W0
250E:  MOV     #0,W4
2510:  CALL    13F0
2514:  MOV     #9,W1
2516:  MOV     W1,W0
2518:  CLR.B   1
251A:  CALL    E24
251E:  INC     W1,W1
2520:  BTSC.B  223.1
2522:  BRA     2520
2524:  MOV     W0,224
2526:  MOV     #D,W0
2528:  CPSGT   W1,W0
252A:  BRA     2516
252C:  MOV.B   92B,W0L
252E:  SE      W0,W0
2530:  MOV     #0,W4
2532:  CALL    13F0
2536:  MOV     #10,W1
2538:  MOV     W1,W0
253A:  CLR.B   1
253C:  CALL    E24
2540:  INC     W1,W1
2542:  BTSC.B  223.1
2544:  BRA     2542
2546:  MOV     W0,224
2548:  MOV     #16,W0
254A:  CPSGT   W1,W0
254C:  BRA     2538
254E:  MOV     92E,W2
2550:  MOV     92C,W1
2552:  MOV     #0,W0
2554:  CALL    2202
2558:  MOV     #2,W9
255A:  MOV     #C009,W10
255C:  CALL    2332
2560:  BTSC.B  223.1
2562:  BRA     2560
2564:  MOV     #A,W4
2566:  MOV     W4,224
....................   return flo; 
2568:  MOV     92C,W0
256A:  MOV     92E,W1
256C:  MOV     #14,W5
256E:  REPEAT  #4
2570:  MOV     [--W15],[W5--]
2572:  MOV     [--W15],W5
2574:  RETURN  
.................... } 
.................... // 
....................  
.................... // COMMANDS// 
.................... void setHome() { 
*
1314:  MOV     W5,[W15++]
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
1316:  MOV     #E,W4
1318:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
131A:  MOV     #E,W4
131C:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
131E:  MOV     #E,W4
1320:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
1322:  CLR     18C
....................   set_pwm_duty(2, 0); 
1324:  CLR     186
....................   set_pwm_duty(1, 0); 
1326:  CLR     180
....................   do { 
....................     Motor_z(-100); 
1328:  MOV     #FF9C,W4
132A:  MOV     W4,92E
132C:  CALL    1078
....................   } while (input(limitSw_z) == 1); 
1330:  BSET.B  2C0.4
1332:  BTSC.B  2C2.4
1334:  BRA     1328
....................   Motor_z(0); 
1336:  CLR     92E
1338:  CALL    1078
....................   do { 
....................     Motor_a(-100); 
133C:  MOV     #FF9C,W4
133E:  MOV     W4,934
1340:  CALL    10E4
....................     Motor_b(-100); 
1344:  MOV     #FF9C,W4
1346:  MOV     W4,934
1348:  CALL    1150
....................   } while (input(limitSw_y) == 1); 
134C:  BSET.B  2C0.2
134E:  BTSC.B  2C2.2
1350:  BRA     133C
....................   Motor_a(0); 
1352:  CLR     934
1354:  CALL    10E4
....................   Motor_b(0); 
1358:  CLR     934
135A:  CALL    1150
....................   do { 
....................     Motor_a(100); 
135E:  MOV     #64,W4
1360:  MOV     W4,934
1362:  CALL    10E4
....................     Motor_b(-100); 
1366:  MOV     #FF9C,W4
1368:  MOV     W4,934
136A:  CALL    1150
....................   } while (input(limitSw_x) == 1); 
136E:  BSET.B  2C9.0
1370:  BTSC.B  2CB.0
1372:  BRA     135E
....................   Motor_a(0); 
1374:  CLR     934
1376:  CALL    10E4
....................   Motor_b(0); 
137A:  CLR     934
137C:  CALL    1150
....................   printf("%d, %d, %d\n", count_a, count_b, count_z); 
1380:  MOV     8B0,W0
1382:  MOV     8B2,W1
1384:  MOV     #0,W4
1386:  CALL    1200
138A:  BTSC.B  223.1
138C:  BRA     138A
138E:  MOV     #2C,W4
1390:  MOV     W4,224
1392:  BTSC.B  223.1
1394:  BRA     1392
1396:  MOV     #20,W4
1398:  MOV     W4,224
139A:  MOV     8B4,W0
139C:  MOV     8B6,W1
139E:  MOV     #0,W4
13A0:  CALL    1200
13A4:  BTSC.B  223.1
13A6:  BRA     13A4
13A8:  MOV     #2C,W4
13AA:  MOV     W4,224
13AC:  BTSC.B  223.1
13AE:  BRA     13AC
13B0:  MOV     #20,W4
13B2:  MOV     W4,224
13B4:  MOV     8B8,W0
13B6:  MOV     8BA,W1
13B8:  MOV     #0,W4
13BA:  CALL    1200
13BE:  BTSC.B  223.1
13C0:  BRA     13BE
13C2:  MOV     #A,W4
13C4:  MOV     W4,224
....................   count_a = 0; 
13C6:  CLR     8B0
13C8:  CLR     8B2
....................   count_b = 0; 
13CA:  CLR     8B4
13CC:  CLR     8B6
....................   count_z = 0; 
13CE:  CLR     8B8
13D0:  CLR     8BA
....................   printf("done"); 
13D2:  MOV     #0,W1
13D4:  MOV     W1,W0
13D6:  CLR.B   1
13D8:  CALL    E4E
13DC:  INC     W1,W1
13DE:  BTSC.B  223.1
13E0:  BRA     13DE
13E2:  MOV     W0,224
13E4:  MOV     #3,W0
13E6:  CPSGT   W1,W0
13E8:  BRA     13D4
....................   getPackage = 0; 
13EA:  CLR     926
13EC:  MOV     [--W15],W5
13EE:  RETURN  
.................... } 
....................  
.................... void setPosAB() { 
*
1904:  MOV     W5,[W15++]
1906:  MOV     W6,[W15++]
1908:  MOV.B   913,W0L
190A:  MOV.B   W0L,W5L
190C:  SE      W5,W5
190E:  MOV.B   914,W0L
1910:  MOV.B   W0L,C
1912:  SE      W6,W6
1914:  MOV     W5,93A
1916:  MOV     W6,93C
1918:  CALL    14E6
191C:  CLR     W1
191E:  BTSC    W0.F
1920:  SETM    W1
1922:  MOV     W0,92A
1924:  MOV     W1,92C
1926:  MOV.B   915,W0L
1928:  MOV.B   W0L,W5L
192A:  SE      W5,W5
192C:  MOV.B   916,W0L
192E:  MOV.B   W0L,C
1930:  SE      W6,W6
1932:  MOV     W5,93A
1934:  MOV     W6,93C
1936:  CALL    14E6
193A:  CLR     W1
193C:  BTSC    W0.F
193E:  SETM    W1
1940:  MOV     W0,92E
1942:  MOV     W1,930
....................   long r_a = mergeInts((int)array[3], (int)array[4]); 
....................   long r_b = mergeInts((int)array[5], (int)array[6]); 
....................   if ((int)array[7] == 1) { 
1944:  MOV.B   917,W0L
1946:  MOV.B   W0L,W5L
1948:  SE      W5,W5
194A:  CP      W5,#1
194C:  BRA     NZ,195E
....................     r_a = 0 - r_a; 
194E:  MOV     #0,W4
1950:  MOV     92A,W3
1952:  SUB     W4,W3,W0
1954:  MOV     W0,92A
1956:  MOV     #0,W4
1958:  MOV     92C,W3
195A:  SUBB    W4,W3,W0
195C:  MOV     W0,92C
....................   } 
....................   if ((int)array[8] == 1) { 
195E:  MOV.B   918,W0L
1960:  MOV.B   W0L,A
1962:  SE      W5,W5
1964:  CP      W5,#1
1966:  BRA     NZ,1978
....................     r_b = 0 - r_b; 
1968:  MOV     #0,W4
196A:  MOV     92E,W3
196C:  SUB     W4,W3,W0
196E:  MOV     W0,92E
1970:  MOV     #0,W4
1972:  MOV     930,W3
1974:  SUBB    W4,W3,W0
1976:  MOV     W0,930
....................   } 
....................   printf("r_a = %d\n", (int)r_a); 
1978:  MOV     #0,W1
197A:  MOV     W1,W0
197C:  CLR.B   1
197E:  CALL    E60
1982:  INC     W1,W1
1984:  BTSC.B  223.1
1986:  BRA     1984
1988:  MOV     W0,224
198A:  MOV     #5,W0
198C:  CPSGT   W1,W0
198E:  BRA     197A
1990:  MOV     92A,W0
1992:  MOV     #0,W4
1994:  CALL    13F0
1998:  BTSC.B  223.1
199A:  BRA     1998
199C:  MOV     #A,W4
199E:  MOV     W4,224
....................   printf("r_b = %d\n", (int)r_b); 
19A0:  MOV     #0,W1
19A2:  MOV     W1,W0
19A4:  CLR.B   1
19A6:  CALL    E76
19AA:  INC     W1,W1
19AC:  BTSC.B  223.1
19AE:  BRA     19AC
19B0:  MOV     W0,224
19B2:  MOV     #5,W0
19B4:  CPSGT   W1,W0
19B6:  BRA     19A2
19B8:  MOV     92E,W0
19BA:  MOV     #0,W4
19BC:  CALL    13F0
19C0:  BTSC.B  223.1
19C2:  BRA     19C0
19C4:  MOV     #A,W4
19C6:  MOV     W4,224
....................   while (abs(r_a - count_a) > tolerance_a || abs(r_b - count_b) > tolerance_b) { 
19C8:  MOV     92A,W4
19CA:  MOV     8B0,W3
19CC:  SUB     W4,W3,W5
19CE:  MOV     92C,W4
19D0:  MOV     8B2,W3
19D2:  SUBB    W4,W3,W6
19D4:  MOV     W5,W0
19D6:  MOV     W6,W1
19D8:  BTSS    W1.F
19DA:  BRA     19E4
19DC:  MOV     #0,W4
19DE:  SUB     W4,W5,W0
19E0:  MOV     #0,W4
19E2:  SUBB    W4,W6,W1
19E4:  MOV     W0,W5
19E6:  MOV     W1,W6
19E8:  MOV     8E0,W0
19EA:  CLR     W1
19EC:  BTSC    W0.F
19EE:  SETM    W1
19F0:  CP      W1,W6
19F2:  BRA     LT,1A2C
19F4:  BRA     GT,19FA
19F6:  CP      W0,W5
19F8:  BRA     NC,1A2C
19FA:  MOV     92E,W4
19FC:  MOV     8B4,W3
19FE:  SUB     W4,W3,W5
1A00:  MOV     930,W4
1A02:  MOV     8B6,W3
1A04:  SUBB    W4,W3,W6
1A06:  MOV     W5,W0
1A08:  MOV     W6,W1
1A0A:  BTSS    W1.F
1A0C:  BRA     1A16
1A0E:  MOV     #0,W4
1A10:  SUB     W4,W5,W0
1A12:  MOV     #0,W4
1A14:  SUBB    W4,W6,W1
1A16:  MOV     W0,W5
1A18:  MOV     W1,W6
1A1A:  MOV     8E2,W0
1A1C:  CLR     W1
1A1E:  BTSC    W0.F
1A20:  SETM    W1
1A22:  CP      W1,W6
1A24:  BRA     GT,1AB6
1A26:  BRA     LT,1A2C
1A28:  CP      W0,W5
1A2A:  BRA     C,1AB6
....................     PID(r_a, count_a, a_s, a_p, a_u, K_Pa, K_Ia, K_Da); 
1A2C:  PUSH    92A
1A2E:  POP     934
1A30:  PUSH    92C
1A32:  POP     936
1A34:  PUSH    8B0
1A36:  POP     938
1A38:  PUSH    8B2
1A3A:  POP     93A
1A3C:  PUSH    8CA
1A3E:  POP     93C
1A40:  CLR     93E
1A42:  PUSH    8D6
1A44:  POP     940
1A46:  CLR     942
1A48:  PUSH    8BE
1A4A:  POP     944
1A4C:  PUSH    8F2
1A4E:  POP     946
1A50:  PUSH    8F4
1A52:  POP     948
1A54:  PUSH    8F6
1A56:  POP     94A
1A58:  PUSH    8F8
1A5A:  POP     94C
1A5C:  PUSH    8FA
1A5E:  POP     94E
1A60:  PUSH    8FC
1A62:  POP     950
1A64:  CALL    1864
....................     PID(r_b, count_b, b_s, b_p, b_u, K_Pb, K_Ib, K_Db); 
1A68:  PUSH    92E
1A6A:  POP     934
1A6C:  PUSH    930
1A6E:  POP     936
1A70:  PUSH    8B4
1A72:  POP     938
1A74:  PUSH    8B6
1A76:  POP     93A
1A78:  PUSH    8CE
1A7A:  POP     93C
1A7C:  CLR     93E
1A7E:  PUSH    8DA
1A80:  POP     940
1A82:  CLR     942
1A84:  PUSH    8C2
1A86:  POP     944
1A88:  PUSH    8FE
1A8A:  POP     946
1A8C:  PUSH    900
1A8E:  POP     948
1A90:  PUSH    902
1A92:  POP     94A
1A94:  PUSH    904
1A96:  POP     94C
1A98:  PUSH    906
1A9A:  POP     94E
1A9C:  PUSH    908
1A9E:  POP     950
1AA0:  CALL    1864
....................     Motor_a(u_a); 
1AA4:  PUSH    8BC
1AA6:  POP     934
1AA8:  CALL    10E4
....................     Motor_b(u_b); 
1AAC:  PUSH    8C0
1AAE:  POP     934
1AB0:  CALL    1150
1AB4:  BRA     19C8
....................   } 
....................   Motor_a(0); 
1AB6:  CLR     934
1AB8:  CALL    10E4
....................   Motor_b(0); 
1ABC:  CLR     934
1ABE:  CALL    1150
....................   printf("position = %d, %d\n", count_a, count_b); 
1AC2:  MOV     #0,W1
1AC4:  MOV     W1,W0
1AC6:  CLR.B   1
1AC8:  CALL    E8C
1ACC:  INC     W1,W1
1ACE:  BTSC.B  223.1
1AD0:  BRA     1ACE
1AD2:  MOV     W0,224
1AD4:  MOV     #A,W0
1AD6:  CPSGT   W1,W0
1AD8:  BRA     1AC4
1ADA:  MOV     8B0,W0
1ADC:  MOV     8B2,W1
1ADE:  MOV     #0,W4
1AE0:  CALL    1200
1AE4:  BTSC.B  223.1
1AE6:  BRA     1AE4
1AE8:  MOV     #2C,W4
1AEA:  MOV     W4,224
1AEC:  BTSC.B  223.1
1AEE:  BRA     1AEC
1AF0:  MOV     #20,W4
1AF2:  MOV     W4,224
1AF4:  MOV     8B4,W0
1AF6:  MOV     8B6,W1
1AF8:  MOV     #0,W4
1AFA:  CALL    1200
1AFE:  BTSC.B  223.1
1B00:  BRA     1AFE
1B02:  MOV     #A,W4
1B04:  MOV     W4,224
....................   printf("done"); 
1B06:  MOV     #0,W1
1B08:  MOV     W1,W0
1B0A:  CLR.B   1
1B0C:  CALL    E4E
1B10:  INC     W1,W1
1B12:  BTSC.B  223.1
1B14:  BRA     1B12
1B16:  MOV     W0,224
1B18:  MOV     #3,W0
1B1A:  CPSGT   W1,W0
1B1C:  BRA     1B08
....................   getPackage = 0; 
1B1E:  CLR     926
1B20:  MOV     [--W15],W6
1B22:  MOV     [--W15],W5
1B24:  RETURN  
.................... } 
....................  
.................... void setPosZ() { 
1B26:  MOV     W5,[W15++]
1B28:  MOV     W6,[W15++]
1B2A:  MOV.B   913,W0L
1B2C:  MOV.B   W0L,W5L
1B2E:  SE      W5,W5
1B30:  MOV.B   914,W0L
1B32:  MOV.B   W0L,C
1B34:  SE      W6,W6
1B36:  MOV     W5,93A
1B38:  MOV     W6,93C
1B3A:  CALL    14E6
1B3E:  CLR     W1
1B40:  BTSC    W0.F
1B42:  SETM    W1
1B44:  MOV     W0,92A
1B46:  MOV     W1,92C
....................   long r_z = mergeInts((int)array[3], (int)array[4]); 
....................   printf("r_z = %d", (int)r_z); 
1B48:  MOV     #0,W1
1B4A:  MOV     W1,W0
1B4C:  CLR.B   1
1B4E:  CALL    EAC
1B52:  INC     W1,W1
1B54:  BTSC.B  223.1
1B56:  BRA     1B54
1B58:  MOV     W0,224
1B5A:  MOV     #5,W0
1B5C:  CPSGT   W1,W0
1B5E:  BRA     1B4A
1B60:  MOV     92A,W0
1B62:  MOV     #0,W4
1B64:  CALL    13F0
....................   while (abs(r_z - count_z) > tolerance_z) { 
1B68:  MOV     92A,W4
1B6A:  MOV     8B8,W3
1B6C:  SUB     W4,W3,W5
1B6E:  MOV     92C,W4
1B70:  MOV     8BA,W3
1B72:  SUBB    W4,W3,W6
1B74:  MOV     W5,W0
1B76:  MOV     W6,W1
1B78:  BTSS    W1.F
1B7A:  BRA     1B84
1B7C:  MOV     #0,W4
1B7E:  SUB     W4,W5,W0
1B80:  MOV     #0,W4
1B82:  SUBB    W4,W6,W1
1B84:  MOV     W0,W5
1B86:  MOV     W1,W6
1B88:  MOV     8E4,W0
1B8A:  CLR     W1
1B8C:  BTSC    W0.F
1B8E:  SETM    W1
1B90:  CP      W1,W6
1B92:  BRA     GT,1BE0
1B94:  BRA     LT,1B9A
1B96:  CP      W0,W5
1B98:  BRA     C,1BE0
....................     PID(r_z, count_z, z_s, z_p, z_u, K_Pz, K_Iz, K_Dz); 
1B9A:  PUSH    92A
1B9C:  POP     934
1B9E:  PUSH    92C
1BA0:  POP     936
1BA2:  PUSH    8B8
1BA4:  POP     938
1BA6:  PUSH    8BA
1BA8:  POP     93A
1BAA:  PUSH    8D2
1BAC:  POP     93C
1BAE:  CLR     93E
1BB0:  PUSH    8DE
1BB2:  POP     940
1BB4:  CLR     942
1BB6:  PUSH    8C6
1BB8:  POP     944
1BBA:  PUSH    8E6
1BBC:  POP     946
1BBE:  PUSH    8E8
1BC0:  POP     948
1BC2:  PUSH    8EA
1BC4:  POP     94A
1BC6:  PUSH    8EC
1BC8:  POP     94C
1BCA:  PUSH    8EE
1BCC:  POP     94E
1BCE:  PUSH    8F0
1BD0:  POP     950
1BD2:  CALL    1864
....................     Motor_z(u_z); 
1BD6:  PUSH    8C4
1BD8:  POP     92E
1BDA:  CALL    1078
1BDE:  BRA     1B68
....................     // printf("count_z : %d\n",count_z); 
....................     // delay_ms(10); 
....................   } 
....................   Motor_z(0); 
1BE0:  CLR     92E
1BE2:  CALL    1078
....................   printf("position = %d\n", count_z); 
1BE6:  MOV     #0,W1
1BE8:  MOV     W1,W0
1BEA:  CLR.B   1
1BEC:  CALL    EC2
1BF0:  INC     W1,W1
1BF2:  BTSC.B  223.1
1BF4:  BRA     1BF2
1BF6:  MOV     W0,224
1BF8:  MOV     #A,W0
1BFA:  CPSGT   W1,W0
1BFC:  BRA     1BE8
1BFE:  MOV     8B8,W0
1C00:  MOV     8BA,W1
1C02:  MOV     #0,W4
1C04:  CALL    1200
1C08:  BTSC.B  223.1
1C0A:  BRA     1C08
1C0C:  MOV     #A,W4
1C0E:  MOV     W4,224
....................   printf("done"); 
1C10:  MOV     #0,W1
1C12:  MOV     W1,W0
1C14:  CLR.B   1
1C16:  CALL    E4E
1C1A:  INC     W1,W1
1C1C:  BTSC.B  223.1
1C1E:  BRA     1C1C
1C20:  MOV     W0,224
1C22:  MOV     #3,W0
1C24:  CPSGT   W1,W0
1C26:  BRA     1C12
....................   getPackage = 0; 
1C28:  CLR     926
1C2A:  MOV     [--W15],W6
1C2C:  MOV     [--W15],W5
1C2E:  RETURN  
.................... } 
....................  
.................... void gripClose() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1C30:  MOV     #6,W4
1C32:  MOV     W4,19C
....................   set_pwm_duty(5, 2600); 
1C34:  MOV     #A28,W4
1C36:  MOV     W4,198
....................   delay_ms(500); 
1C38:  MOV     #1F4,W0
1C3A:  CALL    1068
....................   printf("done"); 
1C3E:  MOV     #0,W1
1C40:  MOV     W1,W0
1C42:  CLR.B   1
1C44:  CALL    E4E
1C48:  INC     W1,W1
1C4A:  BTSC.B  223.1
1C4C:  BRA     1C4A
1C4E:  MOV     W0,224
1C50:  MOV     #3,W0
1C52:  CPSGT   W1,W0
1C54:  BRA     1C40
....................   getPackage = 0; 
1C56:  CLR     926
1C58:  RETURN  
.................... } 
....................  
.................... void gripOpen() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1C5A:  MOV     #6,W4
1C5C:  MOV     W4,19C
....................   set_pwm_duty(5, 4200); 
1C5E:  MOV     #1068,W4
1C60:  MOV     W4,198
....................   delay_ms(500); 
1C62:  MOV     #1F4,W0
1C64:  CALL    1068
....................   printf("done"); 
1C68:  MOV     #0,W1
1C6A:  MOV     W1,W0
1C6C:  CLR.B   1
1C6E:  CALL    E4E
1C72:  INC     W1,W1
1C74:  BTSC.B  223.1
1C76:  BRA     1C74
1C78:  MOV     W0,224
1C7A:  MOV     #3,W0
1C7C:  CPSGT   W1,W0
1C7E:  BRA     1C6A
....................   getPackage = 0; 
1C80:  CLR     926
1C82:  RETURN  
.................... } 
....................  
.................... void gripRotate() { 
*
203C:  MOV     W5,[W15++]
203E:  MOV     W6,[W15++]
2040:  MOV     W7,[W15++]
2042:  MOV     W8,[W15++]
2044:  MOV.B   913,W0L
2046:  MOV.B   W0L,W5L
2048:  SE      W5,W5
204A:  MOV.B   914,W0L
204C:  MOV.B   W0L,C
204E:  SE      W6,W6
2050:  MOV     W5,93A
2052:  MOV     W6,93C
2054:  CALL    14E6
2058:  MOV     W0,92A
....................   int angle = mergeInts((int)array[3], (int)array[4]); 
....................   setup_compare(4, COMPARE_PWM | COMPARE_TIMER2); 
205A:  MOV     #6,W4
205C:  MOV     W4,196
....................   set_pwm_duty(4, (int)(((angle * 0.186) + 12) * 80)); 
205E:  MOV     92A,W0
2060:  CLR     W3
2062:  BTSC    W0.F
2064:  SETM    W3
2066:  MOV     W3,W1
2068:  MOV     W3,W2
206A:  CALL    1C84
206E:  MOV     #2B02,W4
2070:  MOV     #1687,W5
2072:  MOV     #CED9,W6
2074:  MOV     #3FC7,W7
2076:  CALL    1CE8
207A:  MOV     W0,W5
207C:  MOV     W1,W6
207E:  MOV     W2,W7
2080:  MOV     W3,W8
2082:  BCLR.B  43.0
2084:  MOV     W5,[W15++]
2086:  MOV     W6,[W15++]
2088:  MOV     W7,[W15++]
208A:  MOV     W5,W0
208C:  MOV     W6,W1
208E:  MOV     W7,W2
2090:  MOV     W8,W3
2092:  MOV     #0,W4
2094:  MOV     #0,W5
2096:  MOV     #0,W6
2098:  MOV     #4028,W7
209A:  CALL    1DF8
209E:  MOV     [--W15],W7
20A0:  MOV     [--W15],W6
20A2:  MOV     [--W15],W5
20A4:  MOV     W0,W5
20A6:  MOV     W1,W6
20A8:  MOV     W2,W7
20AA:  MOV     W3,W8
20AC:  MOV     W5,[W15++]
20AE:  MOV     W6,[W15++]
20B0:  MOV     W7,[W15++]
20B2:  MOV     W5,W0
20B4:  MOV     W6,W1
20B6:  MOV     W7,W2
20B8:  MOV     W8,W3
20BA:  MOV     #0,W4
20BC:  MOV     #0,W5
20BE:  MOV     #0,W6
20C0:  MOV     #4054,W7
20C2:  CALL    1CE8
20C6:  MOV     [--W15],W7
20C8:  MOV     [--W15],W6
20CA:  MOV     [--W15],W5
20CC:  CALL    1FE6
20D0:  MOV     W0,W5
20D2:  MOV     W5,192
....................   delay_ms(500); 
20D4:  MOV     #1F4,W0
20D6:  CALL    1068
....................   printf("done"); 
20DA:  MOV     #0,W1
20DC:  MOV     W1,W0
20DE:  CLR.B   1
20E0:  CALL    E4E
20E4:  INC     W1,W1
20E6:  BTSC.B  223.1
20E8:  BRA     20E6
20EA:  MOV     W0,224
20EC:  MOV     #3,W0
20EE:  CPSGT   W1,W0
20F0:  BRA     20DC
....................   getPackage = 0; 
20F2:  CLR     926
20F4:  MOV     [--W15],W8
20F6:  MOV     [--W15],W7
20F8:  MOV     [--W15],W6
20FA:  MOV     [--W15],W5
20FC:  RETURN  
.................... } 
....................  
.................... void setAGains() { 
....................   K_Pa = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
*
2576:  MOV.B   913,W0L
2578:  MOV.B   W0L,92A
257A:  MOV.B   914,W0L
257C:  MOV.B   W0L,92B
257E:  CALL    24B4
2582:  MOV     W0,8F2
2584:  MOV     W1,8F4
....................   K_Ia = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
2586:  MOV.B   915,W0L
2588:  MOV.B   W0L,92A
258A:  MOV.B   916,W0L
258C:  MOV.B   W0L,92B
258E:  CALL    24B4
2592:  MOV     W0,8F6
2594:  MOV     W1,8F8
....................   K_Da = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
2596:  MOV.B   917,W0L
2598:  MOV.B   W0L,92A
259A:  MOV.B   918,W0L
259C:  MOV.B   W0L,92B
259E:  CALL    24B4
25A2:  MOV     W0,8FA
25A4:  MOV     W1,8FC
....................   printf("done"); 
25A6:  MOV     #0,W1
25A8:  MOV     W1,W0
25AA:  CLR.B   1
25AC:  CALL    E4E
25B0:  INC     W1,W1
25B2:  BTSC.B  223.1
25B4:  BRA     25B2
25B6:  MOV     W0,224
25B8:  MOV     #3,W0
25BA:  CPSGT   W1,W0
25BC:  BRA     25A8
....................   getPackage = 0; 
25BE:  CLR     926
25C0:  RETURN  
.................... } 
....................  
.................... void setBGains() { 
....................   K_Pb = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
25C2:  MOV.B   913,W0L
25C4:  MOV.B   W0L,92A
25C6:  MOV.B   914,W0L
25C8:  MOV.B   W0L,92B
25CA:  CALL    24B4
25CE:  MOV     W0,8FE
25D0:  MOV     W1,900
....................   K_Ib = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
25D2:  MOV.B   915,W0L
25D4:  MOV.B   W0L,92A
25D6:  MOV.B   916,W0L
25D8:  MOV.B   W0L,92B
25DA:  CALL    24B4
25DE:  MOV     W0,902
25E0:  MOV     W1,904
....................   K_Db = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
25E2:  MOV.B   917,W0L
25E4:  MOV.B   W0L,92A
25E6:  MOV.B   918,W0L
25E8:  MOV.B   W0L,92B
25EA:  CALL    24B4
25EE:  MOV     W0,906
25F0:  MOV     W1,908
....................   printf("done"); 
25F2:  MOV     #0,W1
25F4:  MOV     W1,W0
25F6:  CLR.B   1
25F8:  CALL    E4E
25FC:  INC     W1,W1
25FE:  BTSC.B  223.1
2600:  BRA     25FE
2602:  MOV     W0,224
2604:  MOV     #3,W0
2606:  CPSGT   W1,W0
2608:  BRA     25F4
....................   getPackage = 0; 
260A:  CLR     926
260C:  RETURN  
.................... } 
....................  
.................... void setZGains() { 
....................   K_Pz = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
260E:  MOV.B   913,W0L
2610:  MOV.B   W0L,92A
2612:  MOV.B   914,W0L
2614:  MOV.B   W0L,92B
2616:  CALL    24B4
261A:  MOV     W0,8E6
261C:  MOV     W1,8E8
....................   K_Iz = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
261E:  MOV.B   915,W0L
2620:  MOV.B   W0L,92A
2622:  MOV.B   916,W0L
2624:  MOV.B   W0L,92B
2626:  CALL    24B4
262A:  MOV     W0,8EA
262C:  MOV     W1,8EC
....................   K_Dz = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
262E:  MOV.B   917,W0L
2630:  MOV.B   W0L,92A
2632:  MOV.B   918,W0L
2634:  MOV.B   W0L,92B
2636:  CALL    24B4
263A:  MOV     W0,8EE
263C:  MOV     W1,8F0
....................   printf("done"); 
263E:  MOV     #0,W1
2640:  MOV     W1,W0
2642:  CLR.B   1
2644:  CALL    E4E
2648:  INC     W1,W1
264A:  BTSC.B  223.1
264C:  BRA     264A
264E:  MOV     W0,224
2650:  MOV     #3,W0
2652:  CPSGT   W1,W0
2654:  BRA     2640
....................   getPackage = 0; 
2656:  CLR     926
2658:  RETURN  
.................... } 
....................  
.................... void setTolerances(){ 
265A:  MOV     W5,[W15++]
265C:  MOV     W6,[W15++]
....................   tolerance_a = mergeInts((int)array[3], (int)array[4]); 
265E:  MOV.B   913,W0L
2660:  MOV.B   W0L,W5L
2662:  SE      W5,W5
2664:  MOV.B   914,W0L
2666:  MOV.B   W0L,C
2668:  SE      W6,W6
266A:  MOV     W5,93A
266C:  MOV     W6,93C
266E:  CALL    14E6
2672:  MOV     W0,8E0
....................   tolerance_b = mergeInts((int)array[5], (int)array[6]); 
2674:  MOV.B   915,W0L
2676:  MOV.B   W0L,W5L
2678:  SE      W5,W5
267A:  MOV.B   916,W0L
267C:  MOV.B   W0L,C
267E:  SE      W6,W6
2680:  MOV     W5,93A
2682:  MOV     W6,93C
2684:  CALL    14E6
2688:  MOV     W0,8E2
....................   tolerance_z = mergeInts((int)array[7], (int)array[8]); 
268A:  MOV.B   917,W0L
268C:  MOV.B   W0L,W5L
268E:  SE      W5,W5
2690:  MOV.B   918,W0L
2692:  MOV.B   W0L,C
2694:  SE      W6,W6
2696:  MOV     W5,93A
2698:  MOV     W6,93C
269A:  CALL    14E6
269E:  MOV     W0,8E4
....................   printf("done"); 
26A0:  MOV     #0,W1
26A2:  MOV     W1,W0
26A4:  CLR.B   1
26A6:  CALL    E4E
26AA:  INC     W1,W1
26AC:  BTSC.B  223.1
26AE:  BRA     26AC
26B0:  MOV     W0,224
26B2:  MOV     #3,W0
26B4:  CPSGT   W1,W0
26B6:  BRA     26A2
....................   getPackage = 0; 
26B8:  CLR     926
26BA:  MOV     [--W15],W6
26BC:  MOV     [--W15],W5
26BE:  RETURN  
.................... } 
....................  
.................... int sumCheck() { 
*
1036:  CLR.B   92A
1038:  MOV.B   919,W0L
103A:  MOV.B   W0L,92B
....................   char sum = 0; 
....................   char checksum = array[9]; 
....................   for (int i = 0; i < 9; i++) { 
103C:  CLR     92C
103E:  MOV     92C,W4
1040:  CP      W4,#9
1042:  BRA     GE,1054
....................     sum = sum + (char)array[i]; 
1044:  MOV     #910,W4
1046:  MOV     92C,W3
1048:  ADD     W3,W4,W0
104A:  MOV     W0,W4
104C:  MOV.B   [W4],W0L
104E:  ADD.B   92A
1050:  INC     092C
1052:  BRA     103E
....................   } 
....................   sum = (char)sum; 
....................   if (sum == checksum) { 
1054:  MOV.B   92A,W0L
1056:  CP.B    92B
1058:  BRA     NZ,1062
....................     return 1; 
105A:  MOV     #1,W4
105C:  MOV     W4,0
105E:  BRA     1066
....................   } else { 
1060:  BRA     1066
....................     return 0; 
1062:  CLR     0
1064:  BRA     1066
....................   } 
1066:  RETURN  
.................... } 
.................... // 
....................  
.................... // 
.................... void main() { 
*
26C0:  MOV     #2780,W15
26C2:  MOV     #27FF,W0
26C4:  MOV     W0,20
26C6:  NOP     
26C8:  MOV     #4444,W0
26CA:  MOV     W0,A8
26CC:  BSET.B  81.7
26CE:  MOV     #46,W0
26D0:  MOV.B   W0L,742
26D2:  MOV     #57,W0
26D4:  MOV.B   W0L,742
26D6:  BCLR.B  742.6
26D8:  MOV     #63F,W0
26DA:  MOV     W0,680
26DC:  MOV     #3F05,W0
26DE:  MOV     W0,682
26E0:  MOV     #3F0C,W0
26E2:  MOV     W0,6A4
26E4:  MOV     #1615,W0
26E6:  MOV     W0,6C0
26E8:  MOV     #13,W0
26EA:  MOV     W0,6C4
26EC:  MOV     #12,W0
26EE:  MOV     W0,6CA
26F0:  MOV     #300,W0
26F2:  MOV     W0,6CC
26F4:  MOV     #14,W0
26F6:  MOV     W0,6CE
26F8:  MOV     #46,W0
26FA:  MOV.B   W0L,742
26FC:  MOV     #57,W0
26FE:  MOV.B   W0L,742
2700:  BSET.B  742.6
2702:  CLR     744
2704:  MOV     #8000,W4
2706:  MOV     W4,220
2708:  MOV     #400,W4
270A:  MOV     W4,222
270C:  BSET.B  220.3
270E:  MOV     #1A0,W4
2710:  MOV     W4,228
2712:  CLR     8B0
2714:  CLR     8B2
2716:  CLR     8B4
2718:  CLR     8B6
271A:  CLR     8B8
271C:  CLR     8BA
271E:  MOV     #8BC,W4
2720:  MOV     W4,8BE
2722:  MOV     #8C0,W4
2724:  MOV     W4,8C2
2726:  MOV     #8C4,W4
2728:  MOV     W4,8C6
272A:  CLR     8C8
272C:  MOV     #8C8,W4
272E:  MOV     W4,8CA
2730:  CLR     8CC
2732:  MOV     #8CC,W4
2734:  MOV     W4,8CE
2736:  CLR     8D0
2738:  MOV     #8D0,W4
273A:  MOV     W4,8D2
273C:  CLR     8D4
273E:  MOV     #8D4,W4
2740:  MOV     W4,8D6
2742:  CLR     8D8
2744:  MOV     #8D8,W4
2746:  MOV     W4,8DA
2748:  CLR     8DC
274A:  MOV     #8DC,W4
274C:  MOV     W4,8DE
274E:  MOV     #1E,W4
2750:  MOV     W4,8E0
2752:  MOV     #1E,W4
2754:  MOV     W4,8E2
2756:  MOV     #14,W4
2758:  MOV     W4,8E4
275A:  MOV     #999A,W4
275C:  MOV     W4,8E6
275E:  MOV     #3F19,W4
2760:  MOV     W4,8E8
2762:  MOV     #9BA6,W4
2764:  MOV     W4,8EA
2766:  MOV     #3AC4,W4
2768:  MOV     W4,8EC
276A:  MOV     #126F,W4
276C:  MOV     W4,8EE
276E:  MOV     #3B03,W4
2770:  MOV     W4,8F0
2772:  MOV     #999A,W4
2774:  MOV     W4,8F2
2776:  MOV     #3F19,W4
2778:  MOV     W4,8F4
277A:  MOV     #126F,W4
277C:  MOV     W4,8F6
277E:  MOV     #3A83,W4
2780:  MOV     W4,8F8
2782:  MOV     #D70A,W4
2784:  MOV     W4,8FA
2786:  MOV     #3B23,W4
2788:  MOV     W4,8FC
278A:  MOV     #999A,W4
278C:  MOV     W4,8FE
278E:  MOV     #3F19,W4
2790:  MOV     W4,900
2792:  MOV     #126F,W4
2794:  MOV     W4,902
2796:  MOV     #3A83,W4
2798:  MOV     W4,904
279A:  MOV     #D70A,W4
279C:  MOV     W4,906
279E:  MOV     #3B23,W4
27A0:  MOV     W4,908
27A2:  CLR     90A
27A4:  CLR     90C
27A6:  CLR     90E
27A8:  CLR.B   924
27AA:  CLR     926
27AC:  SETM    32C
27AE:  BRA     2848
27B0:  DATA    C0,06,08
27B2:  DATA    00,00,00
27B4:  DATA    4B,F0,3F
27B6:  DATA    5C,0A,58
27B8:  DATA    F6,3B,8F
27BA:  DATA    00,C0,3C
27BC:  DATA    8B,28,AC
27BE:  DATA    3C,BE,F6
27C0:  DATA    3F,D2,D5
27C2:  DATA    44,16,8C
27C4:  DATA    15,D7,BF
27C6:  DATA    69,00,5A
27C8:  DATA    2E,1B,87
27CA:  DATA    99,3F,9A
27CC:  DATA    5F,AD,4B
27CE:  DATA    91,E4,01
27D0:  DATA    C0,5D,11
27D2:  DATA    2F,92,E4
27D4:  DATA    81,FB,3F
27D6:  DATA    38,DA,91
27D8:  DATA    80,9D,C5
27DA:  DATA    E0,BF,6F
27DC:  DATA    12,C0,B4
27DE:  DATA    C3,09,AB
27E0:  DATA    3F,6B,C1
27E2:  DATA    03,4E,C1
27E4:  DATA    B5,45,BF
27E6:  DATA    F7,40,05
27E8:  DATA    FF,00,5A
27EA:  DATA    EF,3F,F3
27EC:  DATA    A3,E2,F7
27EE:  DATA    D7,FF,01
27F0:  DATA    40,C0,B4
27F2:  DATA    FF,05,3C
27F4:  DATA    58,FC,3F
27F6:  DATA    3B,D3,C0
27F8:  DATA    B5,BA,8C
27FA:  DATA    E2,3F,39
27FC:  DATA    D3,C7,3D
27FE:  DATA    41,79,B2
2800:  DATA    3F,87,0D
2802:  DATA    3C,50,D0
2804:  DATA    AF,62,3F
2806:  DATA    30,4B,8D
2808:  DATA    A2,82,AA
280A:  DATA    04,40,09
280C:  DATA    A0,40,4A
280E:  DATA    05,76,03
2810:  DATA    40,EC,9E
2812:  DATA    37,88,A6
2814:  DATA    44,F0,3F
2816:  DATA    8F,12,8D
2818:  DATA    29,9A,5B
281A:  DATA    C7,3F,0E
281C:  DATA    E0,80,7C
281E:  DATA    A1,D8,86
2820:  DATA    3F,29,4B
2822:  DATA    FB,95,C2
2824:  DATA    37,1A,3F
2826:  DATA    C0,14,09
2828:  DATA    10,00,00
282A:  DATA    00,00,00
282C:  INC     W2,W2
282E:  CP      W2,#1
2830:  BRA     NZ,283A
2832:  TBLRDL  [W1],W3
2834:  TBLRDH  [W1++],W4
2836:  MOV.B   6,W0L
2838:  RETURN  
283A:  CP      W2,#2
283C:  BRA     NZ,2842
283E:  MOV.B   7,W0L
2840:  RETURN  
2842:  MOV.B   8,W0L
2844:  CLR     W2
2846:  RETURN  
2848:  MOV     #0,W6
284A:  MOV     #0,W0
284C:  MOV     W0,32
284E:  MOV     #27B0,W0
2850:  MOV     W0,W1
2852:  CLR     W2
2854:  CALL    282C
2858:  MOV.B   W0L,B
285A:  CALL    282C
285E:  MOV.B   W0L,A
2860:  CP0     W5
2862:  BRA     Z,2896
2864:  BTSS    W5.F
2866:  BRA     2876
2868:  CALL    282C
286C:  MOV.B   W0L,D
286E:  CALL    282C
2872:  MOV.B   W0L,C
2874:  BCLR    W5.F
2876:  BTSS    W5.E
2878:  BRA     288A
287A:  BCLR    W5.E
287C:  DEC     W5,W5
287E:  CALL    282C
2882:  MOV.B   W0L,W7L
2884:  REPEAT  W5
2886:  MOV.B   W7L,[W6++]
2888:  BRA     2854
288A:  CALL    282C
288E:  MOV.B   W0L,[W6++]
2890:  DEC     W5,W5
2892:  BRA     NZ,288A
2894:  BRA     2854
....................   disable_interrupts(GLOBAL); 
2896:  BCLR.B  81.7
2898:  MOV     #E0,W4
289A:  MOV     W4,42
289C:  BSET.B  81.7
....................  
....................   clear_interrupt( 
....................       INT_RDA); // recommend style coding to confirm everything clear before use 
289E:  REPEAT  #3
28A0:  MOV     226,W0
28A2:  BCLR.B  85.3
....................  
....................   enable_interrupts(INT_RDA); 
28A4:  BSET.B  95.3
....................   Init_Interrupts(); 
28A6:  CALL    1028
....................   enable_interrupts(GLOBAL); 
28AA:  BCLR.B  81.7
28AC:  CLR     42
28AE:  BSET.B  81.7
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); 
28B0:  CLR     112
28B2:  MOV     #C8,W4
28B4:  MOV     W4,10E
28B6:  MOV     #8010,W4
28B8:  MOV     W4,112
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8, 8000); 
28BA:  CLR     110
28BC:  MOV     #1F40,W4
28BE:  MOV     W4,10C
28C0:  MOV     #8010,W4
28C2:  MOV     W4,110
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
28C4:  MOV     #E,W4
28C6:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
28C8:  MOV     #E,W4
28CA:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
28CC:  MOV     #E,W4
28CE:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
28D0:  CLR     18C
....................   set_pwm_duty(2, 0); 
28D2:  CLR     186
....................   set_pwm_duty(1, 0); 
28D4:  CLR     180
....................   count_a = 0; 
28D6:  CLR     8B0
28D8:  CLR     8B2
....................   count_b = 0; 
28DA:  CLR     8B4
28DC:  CLR     8B6
....................   count_z = 0; 
28DE:  CLR     8B8
28E0:  CLR     8BA
....................   // setPosAB(); 
....................   // gripOpen(); 
....................   // delay_ms(1000); 
....................   // gripClose(); 
....................   // delay_ms(1000); 
....................   // printf("System Ready!\r\n"); 
....................   while (TRUE) { 
....................     if (getPackage >= 1) { 
28E2:  MOV     926,W4
28E4:  CP      W4,#1
28E6:  BRA     LT,2994
....................       int received = sumCheck(); 
28E8:  CALL    1036
28EC:  MOV     W0,928
....................       if (!received) { 
28EE:  CP0     928
28F0:  BRA     NZ,290E
....................         printf("resend"); 
28F2:  MOV     #0,W1
28F4:  MOV     W1,W0
28F6:  CLR.B   1
28F8:  CALL    EDE
28FC:  INC     W1,W1
28FE:  BTSC.B  223.1
2900:  BRA     28FE
2902:  MOV     W0,224
2904:  MOV     #5,W0
2906:  CPSGT   W1,W0
2908:  BRA     28F4
....................         getPackage = 0; 
290A:  CLR     926
....................       } else { 
290C:  BRA     2994
....................         switch (array[2]) { 
290E:  MOV.B   912,W0L
2910:  CLR.B   1
2912:  XOR     #0,W0
2914:  BRA     Z,293C
2916:  XOR     #1,W0
2918:  BRA     Z,2942
291A:  XOR     #3,W0
291C:  BRA     Z,2948
291E:  XOR     #1,W0
2920:  BRA     Z,294E
2922:  XOR     #7,W0
2924:  BRA     Z,2954
2926:  XOR     #1,W0
2928:  BRA     Z,295A
292A:  XOR     #3,W0
292C:  BRA     Z,2960
292E:  XOR     #1,W0
2930:  BRA     Z,2966
2932:  XOR     #F,W0
2934:  BRA     Z,296C
2936:  XOR     #1,W0
2938:  BRA     Z,2972
293A:  BRA     2978
....................         case 0: 
....................           setHome(); 
293C:  CALL    1314
....................           break; 
2940:  BRA     2994
....................         case 1: 
....................           setPosAB(); 
2942:  CALL    1904
....................           break; 
2946:  BRA     2994
....................         case 2: 
....................           setPosZ(); 
2948:  CALL    1B26
....................           break; 
294C:  BRA     2994
....................         case 3: 
....................           gripClose(); 
294E:  CALL    1C30
....................           break; 
2952:  BRA     2994
....................         case 4: 
....................           gripOpen(); 
2954:  CALL    1C5A
....................           break; 
2958:  BRA     2994
....................         case 5: 
....................           gripRotate(); 
295A:  CALL    203C
....................           break; 
295E:  BRA     2994
....................         case 6: 
....................           setAGains(); 
2960:  CALL    2576
....................           break; 
2964:  BRA     2994
....................         case 7: 
....................           setBGains(); 
2966:  CALL    25C2
....................           break; 
296A:  BRA     2994
....................         case 8: 
....................           setZGains(); 
296C:  CALL    260E
....................           break; 
2970:  BRA     2994
....................         case 9: 
....................           setTolerances(); 
2972:  CALL    265A
....................           break; 
2976:  BRA     2994
....................         default: 
....................           printf("resend"); 
2978:  MOV     #0,W1
297A:  MOV     W1,W0
297C:  CLR.B   1
297E:  CALL    EDE
2982:  INC     W1,W1
2984:  BTSC.B  223.1
2986:  BRA     2984
2988:  MOV     W0,224
298A:  MOV     #5,W0
298C:  CPSGT   W1,W0
298E:  BRA     297A
....................           getPackage = 0; 
2990:  CLR     926
....................           break; 
2992:  BRA     2994
....................         } 
....................       } 
....................     } 
2994:  BRA     28E2
....................   } 
.................... } 
2996:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
