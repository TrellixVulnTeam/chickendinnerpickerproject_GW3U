CCS PCD C Compiler, Version 5.015, 5967               18-Nov-18 10:52

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\SWT\project.lst

               ROM used:   7338 bytes (22%)
                           Largest free fragment is 23378
               RAM used:   420 (5%) at main() level
                           532 (6%) worst case
               Stack size: 128

*
0C00:  GOTO    25F4
*
0C24:  GOTO    ED6
*
0C50:  GOTO    FDA
*
0C74:  GOTO    F08
*
0C98:  GOTO    F3A
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    6D,65,00
0E0A:  DATA    72,67,00
0E0C:  DATA    65,64,00
0E0E:  DATA    20,25,00
0E10:  DATA    64,20,00
0E12:  DATA    61,6E,00
0E14:  DATA    64,20,00
0E16:  DATA    25,64,00
0E18:  DATA    20,69,00
0E1A:  DATA    6E,74,00
0E1C:  DATA    6F,3A,00
0E1E:  DATA    20,25,00
0E20:  DATA    64,20,00
0E22:  DATA    0A,00,00
0E24:  CLR     32
0E26:  MOV     #E30,W3
0E28:  ADD     W3,W0,W0
0E2A:  TBLRDL.B[W0],W0L
0E2C:  CLR.B   1
0E2E:  RETURN  
0E30:  DATA    6D,65,00
0E32:  DATA    72,67,00
0E34:  DATA    65,64,00
0E36:  DATA    20,25,00
0E38:  DATA    64,20,00
0E3A:  DATA    61,6E,00
0E3C:  DATA    64,20,00
0E3E:  DATA    25,64,00
0E40:  DATA    20,69,00
0E42:  DATA    6E,74,00
0E44:  DATA    6F,3A,00
0E46:  DATA    20,25,00
0E48:  DATA    30,2E,00
0E4A:  DATA    32,66,00
0E4C:  DATA    0A,00,00
0E4E:  CLR     32
0E50:  MOV     #E5A,W3
0E52:  ADD     W3,W0,W0
0E54:  TBLRDL.B[W0],W0L
0E56:  CLR.B   1
0E58:  RETURN  
0E5A:  DATA    64,6F,00
0E5C:  DATA    6E,65,00
0E5E:  DATA    00,00,00
0E60:  CLR     32
0E62:  MOV     #E6C,W3
0E64:  ADD     W3,W0,W0
0E66:  TBLRDL.B[W0],W0L
0E68:  CLR.B   1
0E6A:  RETURN  
0E6C:  DATA    72,5F,00
0E6E:  DATA    61,20,00
0E70:  DATA    3D,20,00
0E72:  DATA    25,64,00
0E74:  DATA    0A,00,00
0E76:  CLR     32
0E78:  MOV     #E82,W3
0E7A:  ADD     W3,W0,W0
0E7C:  TBLRDL.B[W0],W0L
0E7E:  CLR.B   1
0E80:  RETURN  
0E82:  DATA    72,5F,00
0E84:  DATA    62,20,00
0E86:  DATA    3D,20,00
0E88:  DATA    25,64,00
0E8A:  DATA    0A,00,00
0E8C:  CLR     32
0E8E:  MOV     #E98,W3
0E90:  ADD     W3,W0,W0
0E92:  TBLRDL.B[W0],W0L
0E94:  CLR.B   1
0E96:  RETURN  
0E98:  DATA    70,6F,00
0E9A:  DATA    73,69,00
0E9C:  DATA    74,69,00
0E9E:  DATA    6F,6E,00
0EA0:  DATA    20,3D,00
0EA2:  DATA    20,25,00
0EA4:  DATA    64,2C,00
0EA6:  DATA    20,25,00
0EA8:  DATA    64,0A,00
0EAA:  DATA    00,00,00
0EAC:  CLR     32
0EAE:  MOV     #EB8,W3
0EB0:  ADD     W3,W0,W0
0EB2:  TBLRDL.B[W0],W0L
0EB4:  CLR.B   1
0EB6:  RETURN  
0EB8:  DATA    72,5F,00
0EBA:  DATA    7A,20,00
0EBC:  DATA    3D,20,00
0EBE:  DATA    25,64,00
0EC0:  DATA    00,00,00
0EC2:  CLR     32
0EC4:  MOV     #ECE,W3
0EC6:  ADD     W3,W0,W0
0EC8:  TBLRDL.B[W0],W0L
0ECA:  CLR.B   1
0ECC:  RETURN  
0ECE:  DATA    72,65,00
0ED0:  DATA    73,65,00
0ED2:  DATA    6E,64,00
0ED4:  DATA    00,00,00
*
11A0:  MOV     W6,[W15++]
11A2:  MOV     W7,[W15++]
11A4:  MOV     W8,[W15++]
11A6:  MOV     W9,[W15++]
11A8:  CLR     W4
11AA:  CLR     W5
11AC:  CLR     W6
11AE:  CLR     W7
11B0:  XOR     W2,W3,W8
11B2:  BRA     Z,11D6
11B4:  MOV     #20,W8
11B6:  BCLR.B  42.0
11B8:  RLC     W0,W0
11BA:  RLC     W1,W1
11BC:  RLC     W4,W4
11BE:  RLC     W5,W5
11C0:  CP      W5,W3
11C2:  BRA     NZ,11C6
11C4:  CPB     W4,W2
11C6:  BRA     NC,11CE
11C8:  SUB     W4,W2,W4
11CA:  SUBB    W5,W3,W5
11CC:  BSET.B  42.0
11CE:  RLC     W6,W6
11D0:  RLC     W7,W7
11D2:  DEC     W8,W8
11D4:  BRA     NZ,11B6
11D6:  MOV     W7,W1
11D8:  MOV     W6,W0
11DA:  MOV     [--W15],W9
11DC:  MOV     [--W15],W8
11DE:  MOV     [--W15],W7
11E0:  MOV     [--W15],W6
11E2:  RETURN  
11E4:  MOV     W5,[W15++]
11E6:  MOV     #C,W5
11E8:  REPEAT  #7
11EA:  MOV     [W5++],[W15++]
11EC:  BTSS    W1.F
11EE:  BRA     11FE
11F0:  NEG     W0,W0
11F2:  BRA     Z,11F6
11F4:  BRA     NZ,11FA
11F6:  NEG     W1,W1
11F8:  BRA     11FC
11FA:  COM     W1,W1
11FC:  BSET    W4.8
11FE:  CLR     W5
1200:  MOV     W0,W6
1202:  MOV     W1,W7
1204:  MOV     W4,W12
1206:  BCLR    W4.F
1208:  CP0.B   W4L
120A:  BRA     NZ,120E
120C:  BRA     123E
120E:  SUB.B   W4L,#B,W5L
1210:  BRA     NC,123E
1212:  SUB.B   W4L,W5L,W4L
1214:  BTSS    W12.F
1216:  BRA     122E
1218:  BTSS    W4.8
121A:  BRA     122A
121C:  MOV     #2D,W0
121E:  BTSC.B  223.1
1220:  BRA     121E
1222:  MOV     W0,224
1224:  BCLR    W4.8
1226:  DEC     W5,W5
1228:  BRA     N,123E
122A:  MOV     #30,W0
122C:  BRA     1230
122E:  MOV     #20,W0
1230:  BTSC.B  223.1
1232:  BRA     1230
1234:  MOV     W0,224
1236:  DEC     W5,W5
1238:  BRA     NN,1230
123A:  BTSC    W4.8
123C:  DEC.B   W4L,W4L
123E:  MOV     #E,W8
1240:  MOV     #0,W9
1242:  LNK     #10
1244:  MOV     W12,[W14+W8]
1246:  DEC2    W8,W8
1248:  BRA     NN,1244
124A:  MOV     W4,W5
124C:  MOV     #A,W4
124E:  BTSC    W5.8
1250:  INC     W4,W4
1252:  BSET    W5.E
1254:  BTSC    W12.F
1256:  BSET    W5.F
1258:  CP0.B   W5L
125A:  BRA     Z,125E
125C:  DEC.B   W5L,W5L
125E:  MOV     W4,[W14]
1260:  MOV     W5,[W14+#2]
1262:  MOV     W6,W0
1264:  MOV     W7,W1
1266:  MOV     #CA00,W2
1268:  MOV     #3B9A,W3
126A:  MOV     #2710,W8
126C:  BCLR    W13.F
126E:  BCLR.B  43.0
1270:  CALL    11A0
1274:  BTG     W13.F
1276:  BTSC    W13.F
1278:  BRA     1288
127A:  MOV     W0,[W14+#8]
127C:  MOV     W1,[W14+#A]
127E:  MOV     W0,W2
1280:  MOV     W1,W3
1282:  MOV     [W14+#4],W0
1284:  MOV     [W14+#6],W1
1286:  BRA     126E
1288:  MOV     W2,[W14+#8]
128A:  MOV     W3,[W14+#A]
128C:  MOV     W4,[W14+#4]
128E:  MOV     W5,[W14+#6]
1290:  MOV     [W14],W4
1292:  MOV     [W14+#2],W5
1294:  MOV     #30,W6
1296:  CP0     W0
1298:  BRA     NZ,12BC
129A:  BTSS    W5.E
129C:  BRA     12C0
129E:  DEC     W4,W4
12A0:  MOV     W4,[W14]
12A2:  CP0     W4
12A4:  BRA     Z,12C0
12A6:  CP.B    W4L,W5L
12A8:  BRA     Z,12AE
12AA:  BTSC.B  42.0
12AC:  BRA     12DE
12AE:  BTSS    W5.F
12B0:  BRA     12B8
12B2:  BTSS    W5.8
12B4:  BRA     12D6
12B6:  BRA     12C6
12B8:  MOV     #20,W6
12BA:  BRA     12D6
12BC:  BCLR    W5.E
12BE:  MOV     W5,[W14+#2]
12C0:  MOV     [W14+#2],W5
12C2:  BTSS    W5.8
12C4:  BRA     12D6
12C6:  BCLR    W5.8
12C8:  MOV     W5,[W14+#2]
12CA:  MOV     W0,W10
12CC:  MOV     #2D,W0
12CE:  BTSC.B  223.1
12D0:  BRA     12CE
12D2:  MOV     W0,224
12D4:  MOV     W10,W0
12D6:  ADD.B   W6L,W0L,W0L
12D8:  BTSC.B  223.1
12DA:  BRA     12D8
12DC:  MOV     W0,224
12DE:  MOV     [W14+#8],W0
12E0:  MOV     [W14+#A],W1
12E2:  MOV     #A,W2
12E4:  CLR     W3
12E6:  CP      W0,#1
12E8:  BRA     Z,12EC
12EA:  BRA     126E
12EC:  ULNK    
12EE:  MOV     #1A,W5
12F0:  REPEAT  #7
12F2:  MOV     [--W15],[W5--]
12F4:  MOV     [--W15],W5
12F6:  RETURN  
*
13D4:  MOV     W5,[W15++]
13D6:  MOV     #C,W5
13D8:  REPEAT  #3
13DA:  MOV     [W5++],[W15++]
13DC:  BTSS    W0.F
13DE:  BRA     13F8
13E0:  NEG     W0,W0
13E2:  BSET    W4.8
13E4:  BTSS    W4.F
13E6:  BRA     13F8
13E8:  MOV     W0,[W15++]
13EA:  MOV     #2D,W0
13EC:  BTSC.B  223.1
13EE:  BRA     13EC
13F0:  MOV     W0,224
13F2:  MOV     [--W15],W0
13F4:  BCLR    W4.8
13F6:  DEC.B   0008
13F8:  CLR     W5
13FA:  MOV     W0,W7
13FC:  MOV     W4,W9
13FE:  BCLR    W4.F
1400:  CP0.B   W4L
1402:  BRA     NZ,1410
1404:  BTSC    W9.F
1406:  BRA     140C
1408:  MOV     #0,W5
140A:  BRA     142A
140C:  MOV     #0,W5
140E:  BRA     142A
1410:  SUB.B   W4L,#6,W5L
1412:  BRA     NC,1428
1414:  MOV     #30,W0
1416:  BTSS    W9.F
1418:  MOV     #20,W0
141A:  BTSC.B  223.1
141C:  BRA     141A
141E:  MOV     W0,224
1420:  DEC     W5,W5
1422:  BRA     NN,141A
1424:  MOV     #5,W5
1426:  BRA     142A
1428:  MOV     W4,W5
142A:  MOV     #6,W4
142C:  BTSC    W5.8
142E:  INC     W4,W4
1430:  BSET    W5.E
1432:  BTSC    W9.F
1434:  BSET    W5.F
1436:  MOV     #2710,W8
1438:  REPEAT  #11
143A:  DIV.U   W7,W8
143C:  CALL    1480
1440:  MOV     W1,W7
1442:  MOV     #3E8,W8
1444:  REPEAT  #11
1446:  DIV.U   W7,W8
1448:  CALL    1480
144C:  MOV     W1,W7
144E:  MOV     #64,W8
1450:  REPEAT  #11
1452:  DIV.U   W7,W8
1454:  CALL    1480
1458:  MOV     W1,W7
145A:  MOV     #A,W8
145C:  REPEAT  #11
145E:  DIV.U   W7,W8
1460:  CALL    1480
1464:  BTSS    W9.8
1466:  BRA     1472
1468:  MOV     #2D,W0
146A:  BTSC.B  223.1
146C:  BRA     146A
146E:  MOV     W0,224
1470:  BCLR    W9.8
1472:  MOV     #30,W0
1474:  ADD.B   W1L,W0L,W0L
1476:  MOV     W0,2A
1478:  BTSC.B  223.1
147A:  BRA     1478
147C:  MOV     W0,224
147E:  BRA     14C0
1480:  MOV     #30,W6
1482:  CP0     W0
1484:  BRA     NZ,14A2
1486:  BTSS    W5.E
1488:  BRA     14B6
148A:  DEC     W4,W4
148C:  CP.B    W4L,W5L
148E:  BRA     Z,1494
1490:  BTSC.B  42.0
1492:  RETURN  
1494:  CP0     W0
1496:  BRA     NZ,14A2
1498:  BTSS    W5.E
149A:  BRA     14B6
149C:  BTSS    W5.F
149E:  MOV     #20,W6
14A0:  BRA     14B6
14A2:  BCLR    W5.E
14A4:  BTSS    W9.8
14A6:  BRA     14B6
14A8:  MOV     W0,W10
14AA:  MOV     #2D,W0
14AC:  BTSC.B  223.1
14AE:  BRA     14AC
14B0:  MOV     W0,224
14B2:  BCLR    W9.8
14B4:  MOV     W10,W0
14B6:  ADD.B   W6L,W0L,W0L
14B8:  BTSC.B  223.1
14BA:  BRA     14B8
14BC:  MOV     W0,224
14BE:  RETURN  
14C0:  MOV     #12,W5
14C2:  REPEAT  #3
14C4:  MOV     [--W15],[W5--]
14C6:  MOV     [--W15],W5
14C8:  RETURN  
*
1560:  MOV     W5,[W15++]
1562:  MOV     W6,[W15++]
1564:  MOV     W0,W4
1566:  MOV     W1,W5
1568:  CLR     W0
156A:  CLR     W1
156C:  BCLR    W6.0
156E:  BTSS    W5.F
1570:  BRA     157E
1572:  BSET    W6.0
1574:  NEG     W4,W4
1576:  BRA     Z,157C
1578:  COM     W5,W5
157A:  BRA     157E
157C:  NEG     W5,W5
157E:  IOR      W4,  W5,W3
1580:  BRA     Z,15A8
1582:  CLR     W2
1584:  MOV     #B6,W1
1586:  BTSC    W2.7
1588:  BRA     1598
158A:  BCLR.B  42.0
158C:  RLC     W4,W4
158E:  RLC     W5,W5
1590:  RLC     W0,W0
1592:  RLC     W2,W2
1594:  DEC     W1,W1
1596:  BRA     NZ,1586
1598:  SWAP    W1
159A:  BCLR.B  42.0
159C:  RRC     W1,W1
159E:  BCLR    W1.F
15A0:  BCLR    W2.7
15A2:  XOR.B   W2L,W1L,W1L
15A4:  BTSC    W6.0
15A6:  BSET    W1.F
15A8:  MOV     [--W15],W6
15AA:  MOV     [--W15],W5
15AC:  RETURN  
15AE:  MOV     W5,[W15++]
15B0:  MOV     #C,W5
15B2:  REPEAT  #4
15B4:  MOV     [W5++],[W15++]
15B6:  MOV     W0,W4
15B8:  MOV     W1,W5
15BA:  MOV     W3,W7
15BC:  MOV     W2,W6
15BE:  BCLR.B  42.0
15C0:  BCLR.B  42.1
15C2:  RLC     W1,W1
15C4:  SWAP    W1
15C6:  AND     #FF,W1
15C8:  CP0     W1
15CA:  BRA     Z,1662
15CC:  BCLR.B  42.0
15CE:  BCLR.B  42.1
15D0:  RLC     W3,W3
15D2:  SWAP    W3
15D4:  AND     #FF,W3
15D6:  CP0     W3
15D8:  BRA     Z,1662
15DA:  ZE      W0,W0
15DC:  ADD.B   W3L,W1L,W0L
15DE:  BRA     C,15E8
15E0:  SUB     #7F,W0
15E2:  BRA     Z,1662
15E4:  BRA     NC,1662
15E6:  BRA     15EC
15E8:  ADD.B   #81,W0L
15EA:  BRA     C,1662
15EC:  XOR     W5,W7,W10
15EE:  BCLR.B  42.0
15F0:  BCLR.B  42.1
15F2:  AND     #FF,W5
15F4:  BSET    W5.7
15F6:  BCLR.B  42.0
15F8:  AND     #FF,W7
15FA:  BSET    W7.7
15FC:  MUL.UU  W4,W6,W2
15FE:  MUL.UU  W5,W6,W8
1600:  ADDC    W8,W3,W3
1602:  MOV     W9,W1
1604:  BTSC.B  42.0
1606:  INC     W1,W1
1608:  BCLR.B  42.0
160A:  MUL.UU  W7,W4,W8
160C:  ADDC    W8,W3,W3
160E:  ADDC    W9,W1,W1
1610:  MUL.UU  W5,W7,W8
1612:  ADDC    W8,W1,W1
1614:  INC     W0,W0
1616:  CP0     W1
1618:  BTSC.B  42.1
161A:  BRA     161E
161C:  BRA     1624
161E:  CP0     W3
1620:  BTSC.B  42.1
1622:  BRA     162E
1624:  BTSC    W1.F
1626:  BRA     162E
1628:  RLC     W3,W3
162A:  RLC     W1,W1
162C:  DEC     W0,W0
162E:  MOV     W1,W2
1630:  BCLR.B  42.0
1632:  BTSS    W3.7
1634:  BRA     1648
1636:  MOV     #FF00,W7
1638:  AND     W3,W7,W3
163A:  ADD     #100,W3
163C:  ADDC    W2,#0,W2
163E:  CP0     W2
1640:  BRA     NZ,1648
1642:  CP0     W3
1644:  BRA     NZ,1648
1646:  INC     W0,W0
1648:  SWAP    W0
164A:  BCLR.B  42.0
164C:  BCLR.B  42.1
164E:  RRC     W0,W1
1650:  BTSC    W10.F
1652:  BSET    W1.F
1654:  BCLR    W2.F
1656:  SWAP    W2
1658:  XOR.B   W2L,W1L,W1L
165A:  SWAP    W3
165C:  MOV.B   W3L,W2L
165E:  MOV     W2,W0
1660:  BRA     1668
1662:  MOV     #0,W0
1664:  MOV     #0,W1
1666:  BRA     1668
1668:  MOV     #14,W5
166A:  REPEAT  #4
166C:  MOV     [--W15],[W5--]
166E:  MOV     [--W15],W5
1670:  RETURN  
1672:  MOV     W5,[W15++]
1674:  MOV     #C,W5
1676:  REPEAT  #3
1678:  MOV     [W5++],[W15++]
167A:  CLR     W9
167C:  MOV     #8000,W8
167E:  BTSC.B  43.0
1680:  XOR     W8,W3,W3
1682:  CP0     W0
1684:  BRA     NZ,168C
1686:  MOV     #7FFF,W10
1688:  AND     W1,W10,W10
168A:  BTSS.B  42.1
168C:  MOV     W1,W10
168E:  XOR     W3,W10,W11
1690:  MOV     W1,W6
1692:  MOV     W3,W7
1694:  MOV     W3,W12
1696:  BCLR.B  42.1
1698:  BCLR.B  42.0
169A:  RLC     W6,W6
169C:  SWAP    W6
169E:  AND     #FF,W6
16A0:  CP0     W6
16A2:  BRA     Z,17E6
16A4:  BCLR.B  42.1
16A6:  BCLR.B  42.0
16A8:  RLC     W7,W7
16AA:  SWAP    W7
16AC:  AND     #FF,W7
16AE:  CP0     W7
16B0:  BRA     Z,17F0
16B2:  BCLR.B  42.1
16B4:  BCLR.B  42.0
16B6:  CP      W7,W6
16B8:  BRA     Z,17F2
16BA:  BRA     N,1802
16BC:  BCLR    W9.0
16BE:  BSET    W9.1
16C0:  SUB     W7,W6,W8
16C2:  MOV     W7,W6
16C4:  AND     #FF,W1
16C6:  BSET    W1.7
16C8:  AND     #FF,W3
16CA:  BSET    W3.7
16CC:  MOV     #28,W7
16CE:  CP      W7,W8
16D0:  BRA     N,16F4
16D2:  BCLR.B  42.1
16D4:  BCLR.B  42.0
16D6:  RRC     W1,W1
16D8:  RRC     W0,W0
16DA:  DEC     W8,W8
16DC:  BRA     NZ,16D2
16DE:  BRA     16FA
16E0:  MOV     #28,W7
16E2:  CP      W7,W8
16E4:  BRA     N,16F8
16E6:  BCLR.B  42.1
16E8:  BCLR.B  42.0
16EA:  RRC     W3,W3
16EC:  RRC     W2,W2
16EE:  DEC     W8,W8
16F0:  BRA     NZ,16E6
16F2:  BRA     1712
16F4:  MOV     W2,W0
16F6:  MOV     W3,W1
16F8:  BRA     1780
16FA:  BTSS    W11.F
16FC:  BRA     1720
16FE:  BTSC    W9.4
1700:  MOV     W12,W11
1702:  NEG     W0,W0
1704:  BRA     Z,170A
1706:  COM.B   W1L,W1L
1708:  BRA     170C
170A:  NEG     W1,W1
170C:  BTSC    W9.4
170E:  BRA     1766
1710:  BRA     1720
1712:  BTSS    W11.F
1714:  BRA     1720
1716:  NEG     W2,W2
1718:  BRA     Z,171E
171A:  COM.B   W3L,W3L
171C:  BRA     1720
171E:  NEG     W3,W3
1720:  AND     #FF,W5
1722:  BCLR.B  42.1
1724:  BCLR.B  42.0
1726:  ADD     W0,W2,W0
1728:  ADDC.B  W1L,W3L,W1L
172A:  BTSC.B  42.0
172C:  BSET    W9.3
172E:  BTSC    W9.0
1730:  BRA     1744
1732:  BTSC    W9.1
1734:  BRA     1738
1736:  BRA     174E
1738:  BTSC    W11.F
173A:  BRA     1766
173C:  BTSC    W9.3
173E:  BRA     1792
1740:  BSET    W9.6
1742:  BRA     1780
1744:  BTSC    W11.F
1746:  BRA     1766
1748:  BTSC    W9.3
174A:  BRA     1792
174C:  BRA     1780
174E:  BCLR    W9.2
1750:  BTSC    W11.F
1752:  BRA     175C
1754:  MOV     W10,W11
1756:  BTSC    W9.3
1758:  BRA     1792
175A:  BRA     17C8
175C:  BSET    W9.4
175E:  XOR.B   #80,W1L
1760:  BTSC    W1.7
1762:  BRA     16FE
1764:  MOV     W10,W11
1766:  AND     #FF,W1
1768:  IOR      W0,  W1,W7
176A:  BRA     Z,1780
176C:  BTSC    W1.7
176E:  BRA     1780
1770:  BCLR.B  42.1
1772:  BCLR.B  42.0
1774:  RLC     W0,W0
1776:  RLC     W1,W1
1778:  DEC     W6,W6
177A:  BTSC.B  42.1
177C:  BRA     17E0
177E:  BRA     176C
1780:  BTSC    W9.0
1782:  MOV     W10,W11
1784:  BTSC    W9.1
1786:  MOV     W12,W11
1788:  BTSS    W9.5
178A:  BRA     17C0
178C:  BTSC    W10.F
178E:  BSET    W0.8
1790:  BRA     17C8
1792:  BSET.B  42.0
1794:  RRC.B   W1L,W1L
1796:  RRC     W0,W0
1798:  BTSC.B  42.0
179A:  BSET    W9.5
179C:  INC     W6,W6
179E:  BRA     Z,17E0
17A0:  BTSS    W9.5
17A2:  BRA     17B4
17A4:  INC     W0,W0
17A6:  BRA     NZ,17B4
17A8:  INC.B   W1L,W1L
17AA:  BRA     NZ,17B4
17AC:  RRC.B   W1L,W1L
17AE:  RRC     W0,W0
17B0:  INC     W6,W6
17B2:  BRA     Z,17E0
17B4:  BTSC    W9.0
17B6:  MOV     W10,W11
17B8:  BTSC    W9.1
17BA:  MOV     W12,W11
17BC:  BTSC.B  42.1
17BE:  BRA     17E0
17C0:  BTSC    W9.6
17C2:  MOV     W10,W11
17C4:  BTSC    W9.7
17C6:  MOV     W12,W11
17C8:  IOR      W0,  W1,W2
17CA:  BRA     Z,1812
17CC:  BCLR    W1.7
17CE:  SWAP    W6
17D0:  BCLR.B  42.1
17D2:  BCLR.B  42.0
17D4:  RRC     W6,W6
17D6:  XOR     W6,W1,W1
17D8:  BSET    W1.F
17DA:  BTSS    W11.F
17DC:  BCLR    W1.F
17DE:  BRA     1812
17E0:  MOV     #0,W0
17E2:  MOV     #0,W1
17E4:  BRA     1812
17E6:  BTSC    W10.F
17E8:  XOR     W8,W3,W3
17EA:  MOV     W2,W0
17EC:  MOV     W3,W1
17EE:  BRA     1812
17F0:  BRA     1812
17F2:  AND     #FF,W3
17F4:  BSET    W3.7
17F6:  AND     #FF,W1
17F8:  BSET    W1.7
17FA:  BTSC    W11.F
17FC:  BCLR    W3.7
17FE:  BSET    W9.2
1800:  BRA     1712
1802:  SUB     W6,W7,W8
1804:  AND     #FF,W1
1806:  BSET    W1.7
1808:  AND     #FF,W3
180A:  BSET    W3.7
180C:  BCLR    W9.1
180E:  BSET    W9.0
1810:  BRA     16E0
1812:  MOV     #12,W5
1814:  REPEAT  #3
1816:  MOV     [--W15],[W5--]
1818:  MOV     [--W15],W5
181A:  RETURN  
181C:  MOV     W0,W2
181E:  MOV     W1,W3
1820:  MOV.B   W1L,W0L
1822:  SWAP    W0
1824:  BSET    W0.F
1826:  RLC     W1,W1
1828:  SWAP    W1
182A:  ZE      W1,W1
182C:  MOV     #8E,W4
182E:  SUB.B   W4L,W1L,W1L
1830:  BRA     Z,183E
1832:  CP0     W0
1834:  BRA     Z,183E
1836:  BCLR.B  42.0
1838:  RRC     W0,W0
183A:  DEC     W1,W1
183C:  BRA     NZ,1832
183E:  BTSS    W3.F
1840:  BRA     1846
1842:  NEG     W0,W0
1844:  BRA     1846
1846:  RETURN  
*
1C1E:  MOV     W5,[W15++]
1C20:  MOV     #C,W5
1C22:  REPEAT  #3
1C24:  MOV     [W5++],[W15++]
1C26:  MOV     W0,W4
1C28:  MOV     W1,W5
1C2A:  MOV     W2,W6
1C2C:  MOV     W3,W7
1C2E:  CLR     W0
1C30:  CLR     W1
1C32:  CLR     W2
1C34:  CLR     W3
1C36:  BCLR    W8.0
1C38:  BTSS    W7.F
1C3A:  BRA     1C46
1C3C:  BSET    W8.0
1C3E:  NEG     W4,W4
1C40:  COM     W5,W5
1C42:  COM     W6,W6
1C44:  COM     W7,W7
1C46:  IOR      W4,  W5,W9
1C48:  BRA     NZ,1C4E
1C4A:  IOR      W6,  W7,W9
1C4C:  BRA     Z,1C78
1C4E:  MOV     #473,W9
1C50:  BTSC    W3.4
1C52:  BRA     1C6A
1C54:  BCLR.B  42.0
1C56:  RLC     W4,W4
1C58:  RLC     W5,W5
1C5A:  RLC     W6,W6
1C5C:  RLC     W7,W7
1C5E:  RLC     W0,W0
1C60:  RLC     W1,W1
1C62:  RLC     W2,W2
1C64:  RLC     W3,W3
1C66:  DEC     W9,W9
1C68:  BRA     NZ,1C50
1C6A:  SL      W9,#4,W9
1C6C:  BCLR.B  42.0
1C6E:  BCLR    W9.F
1C70:  BCLR    W3.4
1C72:  XOR     W9,W3,W3
1C74:  BTSC    W8.0
1C76:  BSET    W3.F
1C78:  MOV     #12,W5
1C7A:  REPEAT  #3
1C7C:  MOV     [--W15],[W5--]
1C7E:  MOV     [--W15],W5
1C80:  RETURN  
1C82:  MOV     W8,[W15++]
1C84:  MOV     #12,W8
1C86:  REPEAT  #4
1C88:  MOV     [W8++],[W15++]
1C8A:  CLR     W11
1C8C:  MUL.UU  W12,#0,W12
1C8E:  MOV     W3,W8
1C90:  MOV     W7,W9
1C92:  MOV     #7FF,W10
1C94:  BCLR.B  42.0
1C96:  BCLR.B  42.1
1C98:  ASR     W8,#4,W8
1C9A:  AND     W10,W8,W8
1C9C:  CP0     W8
1C9E:  BRA     Z,1D82
1CA0:  BCLR.B  42.0
1CA2:  BCLR.B  42.1
1CA4:  ASR     W9,#4,W9
1CA6:  AND     W10,W9,W9
1CA8:  CP0     W9
1CAA:  BRA     Z,1D82
1CAC:  ADD     W9,W8,W8
1CAE:  BTSC    W9.B
1CB0:  BRA     1CBA
1CB2:  SUB     #3FF,W8
1CB4:  BRA     Z,1D82
1CB6:  BRA     NC,1D82
1CB8:  BRA     1CC0
1CBA:  MOV     #401,W10
1CBC:  ADD.B   W10L,W5L,W5L
1CBE:  BRA     C,1D82
1CC0:  XOR     W3,W7,W13
1CC2:  BCLR.B  42.0
1CC4:  BCLR.B  42.1
1CC6:  AND     #F,W3
1CC8:  BSET    W3.4
1CCA:  AND     #F,W7
1CCC:  BSET    W7.4
1CCE:  MOV     W8,[W15++]
1CD0:  MUL.UU  W4,W1,W8
1CD2:  MUL.UU  W5,W0,W10
1CD4:  ADD     W8,W10,W10
1CD6:  ADDC    W9,W11,W11
1CD8:  ADDC    #0,W12
1CDA:  MUL.UU  W4,W2,W8
1CDC:  ADD     W8,W11,W11
1CDE:  ADDC    W9,W12,W12
1CE0:  MUL.UU  W5,W1,W8
1CE2:  CLR     W10
1CE4:  ADD     W8,W11,W11
1CE6:  ADDC    W9,W12,W12
1CE8:  ADDC    #0,W10
1CEA:  MUL.UU  W6,W0,W8
1CEC:  ADD     W8,W11,W11
1CEE:  ADDC    W9,W12,W12
1CF0:  ADDC    #0,W10
1CF2:  CLR     W11
1CF4:  MUL.UU  W4,W3,W8
1CF6:  ADD     W8,W12,W12
1CF8:  ADDC    W9,W10,W10
1CFA:  ADDC    #0,W11
1CFC:  MUL.UU  W5,W2,W8
1CFE:  ADD     W8,W12,W12
1D00:  ADDC    W9,W10,W10
1D02:  ADDC    #0,W11
1D04:  MUL.UU  W6,W1,W8
1D06:  ADD     W8,W12,W12
1D08:  ADDC    W9,W10,W10
1D0A:  ADDC    #0,W11
1D0C:  MUL.UU  W7,W0,W8
1D0E:  ADD     W8,W12,W12
1D10:  ADDC    W9,W10,W10
1D12:  ADDC    #0,W11
1D14:  MOV     W12,W0
1D16:  CLR     W12
1D18:  MUL.UU  W5,W3,W8
1D1A:  ADD     W8,W10,W10
1D1C:  ADDC    W9,W11,W11
1D1E:  ADDC    #0,W12
1D20:  MUL.UU  W6,W2,W8
1D22:  ADD     W8,W10,W10
1D24:  ADDC    W9,W11,W11
1D26:  ADDC    #0,W12
1D28:  MUL.UU  W6,W3,W8
1D2A:  ADD     W8,W11,W11
1D2C:  ADDC    W9,W12,W12
1D2E:  MUL.UU  W7,W1,W8
1D30:  ADD     W8,W10,W10
1D32:  ADDC    W9,W11,W11
1D34:  ADDC    #0,W12
1D36:  MUL.UU  W7,W2,W8
1D38:  ADD     W8,W11,W11
1D3A:  ADDC    W9,W12,W12
1D3C:  MUL.UU  W7,W3,W8
1D3E:  ADD     W8,W12,W12
1D40:  MOV     W10,W1
1D42:  MOV     W11,W2
1D44:  MOV     W12,W3
1D46:  MOV     #5,W4
1D48:  BCLR.B  42.0
1D4A:  RRC     W3,W3
1D4C:  RRC     W2,W2
1D4E:  RRC     W1,W1
1D50:  RRC     W0,W0
1D52:  DEC     W4,W4
1D54:  BRA     NZ,1D48
1D56:  MOV     [--W15],W8
1D58:  INC     W8,W8
1D5A:  IOR      W0,  W1,W6
1D5C:  BRA     Z,1D60
1D5E:  BRA     1D64
1D60:  IOR      W2,  W3,W6
1D62:  BRA     Z,1D74
1D64:  BTSC    W3.4
1D66:  BRA     1D74
1D68:  BCLR.B  42.0
1D6A:  RLC     W0,W0
1D6C:  RLC     W1,W1
1D6E:  RLC     W2,W2
1D70:  RLC     W3,W3
1D72:  DEC     W8,W8
1D74:  SL      W8,#4,W8
1D76:  BCLR    W3.F
1D78:  BTSC    W13.F
1D7A:  BSET    W3.F
1D7C:  BCLR    W3.4
1D7E:  XOR     W8,W3,W3
1D80:  BRA     1D88
1D82:  MUL.UU  W0,#0,W0
1D84:  MUL.UU  W0,#0,W2
1D86:  BRA     1D88
1D88:  MOV     #1A,W8
1D8A:  REPEAT  #4
1D8C:  MOV     [--W15],[W8--]
1D8E:  MOV     [--W15],W8
1D90:  RETURN  
1D92:  MOV     W8,[W15++]
1D94:  MOV     #12,W8
1D96:  REPEAT  #4
1D98:  MOV     [W8++],[W15++]
1D9A:  MOV     #8000,W8
1D9C:  BTSC.B  43.0
1D9E:  XOR     W8,W7,W7
1DA0:  CP0     W0
1DA2:  BRA     NZ,1DB2
1DA4:  CP0     W1
1DA6:  BRA     NZ,1DB2
1DA8:  CP0     W2
1DAA:  BRA     NZ,1DB2
1DAC:  MOV     #7FFF,W10
1DAE:  AND     W3,W10,W10
1DB0:  BTSS.B  42.1
1DB2:  MOV     W3,W10
1DB4:  XOR     W7,W10,W11
1DB6:  MOV     W3,W8
1DB8:  MOV     W7,W9
1DBA:  MOV     W7,W12
1DBC:  MOV     #7FF,W13
1DBE:  BCLR.B  42.1
1DC0:  BCLR.B  42.0
1DC2:  ASR     W8,#4,W8
1DC4:  AND     W13,W8,W8
1DC6:  CP0     W8
1DC8:  BRA     Z,1F42
1DCA:  BCLR.B  42.1
1DCC:  BCLR.B  42.0
1DCE:  ASR     W9,#4,W9
1DD0:  AND     W13,W9,W9
1DD2:  CP0     W9
1DD4:  BRA     Z,1F52
1DD6:  CLR     W13
1DD8:  BCLR.B  42.1
1DDA:  BCLR.B  42.0
1DDC:  CP      W9,W8
1DDE:  BRA     Z,1F54
1DE0:  BRA     N,1F64
1DE2:  BCLR    W13.0
1DE4:  BSET    W13.1
1DE6:  SUB     W9,W8,W8
1DE8:  AND     #F,W3
1DEA:  BSET    W3.4
1DEC:  AND     #F,W7
1DEE:  BSET    W7.4
1DF0:  SUB     #34,W8
1DF2:  BRA     NN,1E20
1DF4:  ADD     #34,W8
1DF6:  BCLR.B  42.1
1DF8:  BCLR.B  42.0
1DFA:  RRC     W3,W3
1DFC:  RRC     W2,W2
1DFE:  RRC     W1,W1
1E00:  RRC     W0,W0
1E02:  DEC     W8,W8
1E04:  BRA     NZ,1DF6
1E06:  BRA     1E30
1E08:  SUB     #34,W8
1E0A:  BRA     NN,1E2A
1E0C:  ADD     #34,W8
1E0E:  BCLR.B  42.1
1E10:  BCLR.B  42.0
1E12:  RRC     W7,W7
1E14:  RRC     W6,W6
1E16:  RRC     W5,W5
1E18:  RRC     W4,W4
1E1A:  DEC     W8,W8
1E1C:  BRA     NZ,1E0E
1E1E:  BRA     1E56
1E20:  MOV     W4,W0
1E22:  MOV     W5,W1
1E24:  MOV     W6,W2
1E26:  MOV     W7,W3
1E28:  XOR     W11,W12,W12
1E2A:  BTSC    W12.F
1E2C:  BTG     W11.F
1E2E:  BRA     1F22
1E30:  BTSS    W11.F
1E32:  BRA     1E72
1E34:  BTSC    W13.4
1E36:  MOV     W12,W11
1E38:  COM     W0,W0
1E3A:  COM     W1,W1
1E3C:  COM     W2,W2
1E3E:  COM.B   W3L,W3L
1E40:  AND.B   #1F,W3L
1E42:  INC     W0,W0
1E44:  BRA     NZ,1E50
1E46:  INC     W1,W1
1E48:  BRA     NZ,1E50
1E4A:  INC     W2,W2
1E4C:  BRA     NZ,1E50
1E4E:  INC.B   W3L,W3L
1E50:  BTSC    W13.4
1E52:  BRA     1EB8
1E54:  BRA     1E72
1E56:  BTSS    W11.F
1E58:  BRA     1E72
1E5A:  COM     W4,W4
1E5C:  COM     W5,W5
1E5E:  COM     W6,W6
1E60:  COM.B   W7L,W7L
1E62:  AND.B   #1F,W7L
1E64:  INC     W4,W4
1E66:  BRA     NZ,1E72
1E68:  INC     W5,W5
1E6A:  BRA     NZ,1E72
1E6C:  INC     W6,W6
1E6E:  BRA     NZ,1E72
1E70:  INC.B   W7L,W7L
1E72:  BCLR.B  42.1
1E74:  BCLR.B  42.0
1E76:  ADD     W0,W4,W0
1E78:  ADDC    W1,W5,W1
1E7A:  ADDC    W2,W6,W2
1E7C:  ADDC.B  W3L,W7L,W3L
1E7E:  BTSC    W3.5
1E80:  BSET    W13.3
1E82:  BTSC    W13.0
1E84:  BRA     1E98
1E86:  BTSC    W13.1
1E88:  BRA     1E8C
1E8A:  BRA     1EA2
1E8C:  BTSC    W11.F
1E8E:  BRA     1EB8
1E90:  BTSC    W13.3
1E92:  BRA     1EE6
1E94:  BSET    W13.6
1E96:  BRA     1EDA
1E98:  BTSC    W11.F
1E9A:  BRA     1EB8
1E9C:  BTSC    W13.3
1E9E:  BRA     1EE6
1EA0:  BRA     1EDA
1EA2:  BTSC    W11.F
1EA4:  BRA     1EAE
1EA6:  MOV     W10,W11
1EA8:  BTSC    W13.3
1EAA:  BRA     1EE6
1EAC:  BRA     1F22
1EAE:  BSET    W13.4
1EB0:  XOR.B   #10,W3L
1EB2:  BTSC    W3.4
1EB4:  BRA     1E34
1EB6:  MOV     W10,W11
1EB8:  AND     #1F,W3
1EBA:  IOR      W3,  W2,W8
1EBC:  BRA     NZ,1EC2
1EBE:  IOR      W1,  W0,W8
1EC0:  BRA     Z,1EDA
1EC2:  BTSC    W3.4
1EC4:  BRA     1EDA
1EC6:  BCLR.B  42.1
1EC8:  BCLR.B  42.0
1ECA:  RLC     W0,W0
1ECC:  RLC     W1,W1
1ECE:  RLC     W2,W2
1ED0:  RLC     W3,W3
1ED2:  DEC     W9,W9
1ED4:  BTSC.B  42.1
1ED6:  BRA     1F3C
1ED8:  BRA     1EC2
1EDA:  BTSC    W13.0
1EDC:  MOV     W10,W11
1EDE:  BTSC    W13.1
1EE0:  MOV     W12,W11
1EE2:  BTSS    W13.5
1EE4:  BRA     1F22
1EE6:  BCLR.B  42.0
1EE8:  RRC.B   W3L,W3L
1EEA:  RRC     W2,W2
1EEC:  RRC     W1,W1
1EEE:  RRC     W0,W0
1EF0:  BTSC.B  42.0
1EF2:  BSET    W13.5
1EF4:  INC     W9,W9
1EF6:  BTSC.B  42.1
1EF8:  BRA     1F3C
1EFA:  BTSS    W13.5
1EFC:  BRA     1F1A
1EFE:  INC     W0,W0
1F00:  BRA     NZ,1F1A
1F02:  INC     W1,W1
1F04:  BRA     NZ,1F1A
1F06:  INC     W2,W2
1F08:  BRA     NZ,1F1A
1F0A:  INC     W3,W3
1F0C:  BRA     NZ,1F1A
1F0E:  RRC.B   W3L,W3L
1F10:  RRC     W2,W2
1F12:  RRC     W1,W1
1F14:  RRC     W0,W0
1F16:  INC     W9,W9
1F18:  BRA     Z,1F3C
1F1A:  BTSC    W13.0
1F1C:  MOV     W10,W11
1F1E:  BTSC    W13.1
1F20:  MOV     W12,W11
1F22:  IOR      W0,  W1,W4
1F24:  BRA     NZ,1F2A
1F26:  IOR      W2,  W3,W4
1F28:  BRA     Z,1F76
1F2A:  BCLR    W3.4
1F2C:  BCLR.B  42.1
1F2E:  BCLR.B  42.0
1F30:  SL      W9,#4,W9
1F32:  XOR     W9,W3,W3
1F34:  BSET    W3.F
1F36:  BTSS    W11.F
1F38:  BCLR    W3.F
1F3A:  BRA     1F76
1F3C:  MUL.UU  W0,#0,W0
1F3E:  MUL.UU  W2,#0,W2
1F40:  BRA     1F76
1F42:  MOV     #8000,W8
1F44:  BTSC    W10.F
1F46:  XOR     W8,W7,W7
1F48:  MOV     W5,W1
1F4A:  MOV     W4,W0
1F4C:  MOV     W6,W2
1F4E:  MOV     W7,W3
1F50:  BRA     1F76
1F52:  BRA     1F76
1F54:  AND     #F,W7
1F56:  BSET    W7.4
1F58:  AND     #F,W3
1F5A:  BSET    W3.4
1F5C:  BTSC    W11.F
1F5E:  BCLR    W7.4
1F60:  BSET    W13.2
1F62:  BRA     1E56
1F64:  AND     #F,W3
1F66:  BSET    W3.4
1F68:  AND     #F,W7
1F6A:  BSET    W7.4
1F6C:  SUB     W8,W9,W8
1F6E:  ADD     W8,W9,W9
1F70:  BCLR    W13.1
1F72:  BSET    W13.0
1F74:  BRA     1E08
1F76:  MOV     #1A,W8
1F78:  REPEAT  #4
1F7A:  MOV     [--W15],[W8--]
1F7C:  MOV     [--W15],W8
1F7E:  RETURN  
1F80:  MOV     W5,[W15++]
1F82:  MOV     #C,W5
1F84:  REPEAT  #5
1F86:  MOV     [W5++],[W15++]
1F88:  MOV     W3,W8
1F8A:  MOV     W2,W7
1F8C:  MOV     W1,W6
1F8E:  MOV     W0,W5
1F90:  MOV     W3,W9
1F92:  MOV     #473,W11
1F94:  ASR     W3,#4,W3
1F96:  MOV     #7FF,W10
1F98:  AND     W10,W3,W3
1F9A:  SUB     W11,W3,W11
1F9C:  AND     #1F,W8
1F9E:  BSET    W8.4
1FA0:  CLR     W0
1FA2:  CLR     W1
1FA4:  CLR     W2
1FA6:  CLR     W3
1FA8:  BCLR.B  42.0
1FAA:  RRC     W8,W8
1FAC:  RRC     W7,W7
1FAE:  RRC     W6,W6
1FB0:  RRC     W5,W5
1FB2:  RRC     W3,W3
1FB4:  RRC     W2,W2
1FB6:  RRC     W1,W1
1FB8:  RRC     W0,W0
1FBA:  DEC     W11,W11
1FBC:  BRA     NZ,1FA8
1FBE:  BTSS    W9.F
1FC0:  BRA     1FCC
1FC2:  NEG     W0,W0
1FC4:  COM     W1,W1
1FC6:  COM     W2,W2
1FC8:  COM     W3,W3
1FCA:  BRA     1FCC
1FCC:  MOV     #16,W5
1FCE:  REPEAT  #5
1FD0:  MOV     [--W15],[W5--]
1FD2:  MOV     [--W15],W5
1FD4:  RETURN  
*
2098:  MOV     W5,[W15++]
209A:  MOV     W6,[W15++]
209C:  MOV     #8E,W1
209E:  CP0     W0
20A0:  BRA     Z,20C6
20A2:  BTSC    W0.F
20A4:  BRA     20AE
20A6:  BCLR.B  42.0
20A8:  RLC     W0,W0
20AA:  DEC     W1,W1
20AC:  BRA     20A2
20AE:  SWAP    W1
20B0:  BCLR.B  42.0
20B2:  RRC     W1,W1
20B4:  BCLR    W0.F
20B6:  SWAP    W0
20B8:  XOR.B   W0L,W1L,W1L
20BA:  AND.B   #0,W0L
20BC:  BRA     20CC
20BE:  MOV.B   W1L,W0L
20C0:  BSET    W1.7
20C2:  AND.B   #0,W1L
20C4:  BRA     20CC
20C6:  CLR     W0
20C8:  CLR     W1
20CA:  BRA     20CC
20CC:  MOV     [--W15],W6
20CE:  MOV     [--W15],W5
20D0:  RETURN  
20D2:  MOV     W5,[W15++]
20D4:  MOV     #C,W5
20D6:  REPEAT  #4
20D8:  MOV     [W5++],[W15++]
20DA:  CLR     W9
20DC:  XOR     W1,W3,W9
20DE:  MOV     W1,W6
20E0:  MOV     W0,W5
20E2:  MOV     W3,W8
20E4:  MOV     W2,W7
20E6:  RLC     W1,W1
20E8:  SWAP    W1
20EA:  ZE      W1,W1
20EC:  CP0     W1
20EE:  BRA     Z,218C
20F0:  RLC     W3,W3
20F2:  SWAP    W3
20F4:  ZE      W3,W3
20F6:  CP0     W3
20F8:  BRA     Z,218C
20FA:  CLR     W0
20FC:  SUB.B   W1L,W3L,W0L
20FE:  BRA     NC,2106
2100:  ADD.B   #7F,W0L
2102:  BRA     C,218C
2104:  BRA     210C
2106:  SUB.B   #81,W0L
2108:  BRA     NC,218C
210A:  BRA     Z,218C
210C:  MOV     W5,W1
210E:  MOV     W6,W2
2110:  BSET    W2.7
2112:  AND     #FF,W2
2114:  AND     #FF,W8
2116:  BSET    W8.7
2118:  MOV     #19,W10
211A:  CLR     W3
211C:  CLR     W4
211E:  SUB     W1,W7,W1
2120:  SUBB    W2,W8,W2
2122:  BRA     N,2128
2124:  BRA     C,212E
2126:  BRA     NZ,2130
2128:  ADD     W1,W7,W1
212A:  ADDC    W2,W8,W2
212C:  BRA     2130
212E:  BSET    W4.0
2130:  DEC     W10,W10
2132:  BRA     Z,2142
2134:  BCLR.B  42.0
2136:  RLC     W1,W1
2138:  RLC     W2,W2
213A:  BCLR.B  42.0
213C:  RLC     W4,W4
213E:  RLC     W3,W3
2140:  BRA     211E
2142:  CLR     W10
2144:  BTSC    W3.8
2146:  BRA     214A
2148:  BRA     2156
214A:  BCLR.B  42.0
214C:  RRC     W3,W3
214E:  BCLR    W3.7
2150:  RRC     W4,W4
2152:  RLC     W10,W10
2154:  BRA     215A
2156:  DEC     W0,W0
2158:  BRA     Z,218C
215A:  BTSC    W10.F
215C:  BRA     NC,2168
215E:  RLC     W1,W1
2160:  RLC     W2,W2
2162:  SUB     W1,W7,W1
2164:  SUBB    W2,W8,W2
2166:  BRA     NC,217A
2168:  INC     W4,W4
216A:  BRA     NZ,217A
216C:  INC     W3,W3
216E:  BRA     NZ,217A
2170:  INC     W0,W0
2172:  BRA     Z,218C
2174:  BRA     217A
2176:  DEC     W0,W0
2178:  BRA     Z,218C
217A:  SWAP    W0
217C:  RRC     W0,W1
217E:  BSET    W1.F
2180:  BTSS    W9.F
2182:  BCLR    W1.F
2184:  BCLR    W3.7
2186:  XOR.B   W3L,W1L,W1L
2188:  MOV     W4,W0
218A:  BRA     2192
218C:  MOV     #0,W0
218E:  MOV     #0,W1
2190:  BRA     2192
2192:  MOV     #14,W5
2194:  REPEAT  #4
2196:  MOV     [--W15],[W5--]
2198:  MOV     [--W15],W5
219A:  RETURN  
219C:  MOV     W5,[W15++]
219E:  MOV     W2,W3
21A0:  MOV     W2,W5
21A2:  BCLR.B  42.0
21A4:  RLC     W3,W3
21A6:  SWAP    W3
21A8:  AND     #FF,W3
21AA:  BRA     NZ,21B2
21AC:  MUL.UU  W0,#0,W0
21AE:  MUL.UU  W2,#0,W2
21B0:  BRA     21DE
21B2:  ADD     #380,W3
21B4:  AND     #7F,W2
21B6:  MOV     #3,W6
21B8:  CLR     W4
21BA:  BCLR.B  42.0
21BC:  RRC     W2,W2
21BE:  RRC     W1,W1
21C0:  RRC     W0,W0
21C2:  BTSC.B  42.0
21C4:  INC     W4,W4
21C6:  DEC     W6,W6
21C8:  BRA     NZ,21BA
21CA:  BCLR    W2.7
21CC:  SL      W3,#4,W3
21CE:  BCLR    W3.F
21D0:  BTSC    W5.F
21D2:  BSET    W3.F
21D4:  XOR     W2,W3,W3
21D6:  MOV     W1,W2
21D8:  MOV     W0,W1
21DA:  ADD     W4,W1,W1
21DC:  CLR     W0
21DE:  MOV     [--W15],W5
21E0:  RETURN  
21E2:  MOV     W5,[W15++]
21E4:  MOV     #C,W5
21E6:  REPEAT  #5
21E8:  MOV     [W5++],[W15++]
21EA:  MOV     W3,W8
21EC:  MOV     W2,W7
21EE:  MOV     W1,W6
21F0:  MOV     W0,W5
21F2:  MOV     W3,W9
21F4:  MOV     #473,W11
21F6:  ASR     W3,#4,W3
21F8:  MOV     #7FF,W10
21FA:  AND     W10,W3,W3
21FC:  SUB     W11,W3,W11
21FE:  AND     #1F,W8
2200:  BSET    W8.4
2202:  CLR     W0
2204:  CLR     W1
2206:  CLR     W2
2208:  CLR     W3
220A:  BCLR.B  42.0
220C:  RRC     W8,W8
220E:  RRC     W7,W7
2210:  RRC     W6,W6
2212:  RRC     W5,W5
2214:  RRC     W3,W3
2216:  RRC     W2,W2
2218:  RRC     W1,W1
221A:  RRC     W0,W0
221C:  DEC     W11,W11
221E:  BRA     NZ,220A
2220:  BTSS    W9.F
2222:  BRA     222E
2224:  NEG     W0,W0
2226:  COM     W1,W1
2228:  COM     W2,W2
222A:  COM     W3,W3
222C:  BRA     222E
222E:  MOV     #16,W5
2230:  REPEAT  #5
2232:  MOV     [--W15],[W5--]
2234:  MOV     [--W15],W5
2236:  RETURN  
2238:  MOV     W12,[W15++]
223A:  MOV     W13,[W15++]
223C:  CLR     W8
223E:  CLR     W9
2240:  CLR     W10
2242:  CLR     W11
2244:  CLR     W12
2246:  CLR     W13
2248:  MOV     #E,W8
224A:  MOV     #0,W9
224C:  LNK     #10
224E:  MOV     W12,[W14+W8]
2250:  DEC2    W8,W8
2252:  BRA     NN,224E
2254:  XOR     W4,W5,W8
2256:  BRA     NZ,225C
2258:  XOR     W6,W7,W8
225A:  BRA     Z,22BA
225C:  CLR     W8
225E:  MOV     #40,W13
2260:  MOV     #40,W13
2262:  BCLR.B  42.0
2264:  RLC     W0,W0
2266:  RLC     W1,W1
2268:  RLC     W2,W2
226A:  RLC     W3,W3
226C:  RLC     W8,W8
226E:  RLC     W9,W9
2270:  RLC     W10,W10
2272:  RLC     W11,W11
2274:  CP      W11,W7
2276:  BRA     NZ,2282
2278:  CPB     W10,W6
227A:  BRA     NZ,2282
227C:  CPB     W9,W5
227E:  BRA     NZ,2282
2280:  CPB     W8,W4
2282:  BRA     NC,228E
2284:  SUB     W8,W4,W8
2286:  SUBB    W9,W5,W9
2288:  SUBB    W10,W6,W10
228A:  SUBB    W11,W7,W11
228C:  BSET.B  42.0
228E:  MOV     W8,[W14]
2290:  MOV     W9,[W14+#2]
2292:  MOV     W10,[W14+#4]
2294:  MOV     W11,[W14+#6]
2296:  MOV     [W14+#8],W8
2298:  MOV     [W14+#A],W9
229A:  MOV     [W14+#C],W10
229C:  MOV     [W14+#E],W11
229E:  RLC     W8,W8
22A0:  RLC     W9,W9
22A2:  RLC     W10,W10
22A4:  RLC     W11,W11
22A6:  MOV     W8,[W14+#8]
22A8:  MOV     W9,[W14+#A]
22AA:  MOV     W10,[W14+#C]
22AC:  MOV     W11,[W14+#E]
22AE:  MOV     [W14],W8
22B0:  MOV     [W14+#2],W9
22B2:  MOV     [W14+#4],W10
22B4:  MOV     [W14+#6],W11
22B6:  DEC     W13,W13
22B8:  BRA     NZ,2262
22BA:  MOV     [W14+#8],W0
22BC:  MOV     [W14+#A],W1
22BE:  MOV     [W14+#C],W2
22C0:  MOV     [W14+#E],W3
22C2:  ULNK    
22C4:  BRA     22C6
22C6:  MOV     [--W15],W13
22C8:  MOV     [--W15],W12
22CA:  RETURN  
22CC:  MOV     W5,[W15++]
22CE:  MOV     #C,W5
22D0:  REPEAT  #7
22D2:  MOV     [W5++],[W15++]
22D4:  LNK     #2A
22D6:  MOV     #28,W8
22D8:  CLR     W12
22DA:  MOV     W12,[W14+W8]
22DC:  DEC2    W8,W8
22DE:  BRA     NN,22DA
22E0:  CP0     W9
22E2:  BRA     Z,2300
22E4:  MOV     W9,[W14+#26]
22E6:  MOV     W10,[W14+#28]
22E8:  MOV     #4024,W7
22EA:  CLR     W6
22EC:  MUL.UU  W4,#0,W4
22EE:  MOV     W9,[W14+#24]
22F0:  MOV     #4024,W7
22F2:  CLR     W6
22F4:  MUL.UU  W4,#0,W4
22F6:  CALL    1C82
22FA:  MOV     [W14+#24],W9
22FC:  DEC     W9,W9
22FE:  BRA     NZ,22EE
2300:  MOV     [W14+#26],W9
2302:  MOV     #14,W8
2304:  MOV     W8,[W14+#24]
2306:  MOV     #41CD,W7
2308:  MOV     #CD65,W6
230A:  MUL.UU  W4,#0,W4
230C:  MOV     W0,[W14+#10]
230E:  MOV     W1,[W14+#12]
2310:  MOV     W2,[W14+#14]
2312:  MOV     W3,[W14+#16]
2314:  MOV     #14,W8
2316:  MOV     W8,[W14+#20]
2318:  MOV     #0,W4
231A:  MOV     #89E8,W5
231C:  MOV     #2304,W6
231E:  MOV     #8AC7,W7
2320:  MOV     W4,[W14+#18]
2322:  MOV     W5,[W14+#1A]
2324:  MOV     W6,[W14+#1C]
2326:  MOV     W7,[W14+#1E]
2328:  BTSS    W3.F
232A:  BRA     2334
232C:  MOV     [W14+#28],W8
232E:  DEC     W8,W8
2330:  BSET    W8.D
2332:  MOV     W8,[W14+#28]
2334:  BCLR    W3.F
2336:  CALL    21E2
233A:  MOV     [W14+#28],W8
233C:  MOV     [W14+#26],W9
233E:  CP0     W9
2340:  BTSC.B  42.1
2342:  INC.B   W8L,W8L
2344:  MOV     W8,[W14+#28]
2346:  MOV     [W14+#22],W9
2348:  CLR     W9
234A:  MOV     W9,[W14+#22]
234C:  MOV     [W14+#18],W4
234E:  MOV     [W14+#1A],W5
2350:  MOV     [W14+#1C],W6
2352:  MOV     [W14+#1E],W7
2354:  CALL    2238
2358:  MOV     [W14+#22],W13
235A:  BTSC    W13.0
235C:  BRA     2422
235E:  MOV     W8,[W14+#10]
2360:  MOV     W9,[W14+#12]
2362:  MOV     W10,[W14+#14]
2364:  MOV     W11,[W14+#16]
2366:  MOV     [W14+#22],W13
2368:  BTG     W13.0
236A:  MOV     W13,[W14+#22]
236C:  CP0     W0
236E:  BRA     NZ,2394
2370:  MOV     [W14+#26],W9
2372:  INC     W9,W9
2374:  MOV     [W14+#24],W10
2376:  SUB     W10,W9,W8
2378:  BRA     Z,2394
237A:  MOV     [W14+#28],W11
237C:  CP0     W11
237E:  BRA     Z,239C
2380:  AND     W11,#1F,W8
2382:  SUB     W10,W8,W8
2384:  BRA     Z,2388
2386:  BRA     C,240A
2388:  BTSC    W11.F
238A:  BRA     240A
238C:  BTSC    W11.E
238E:  BRA     239C
2390:  MOV     #20,W0
2392:  BRA     2402
2394:  MOV     [W14+#28],W11
2396:  MOV     #2000,W12
2398:  AND     W12,W11,W11
239A:  MOV     W11,[W14+#28]
239C:  MOV     [W14+#28],W11
239E:  BTSS    W11.D
23A0:  BRA     23C0
23A2:  BCLR    W11.D
23A4:  MOV     [W14+#26],W9
23A6:  CP0     W9
23A8:  BTSS.B  42.1
23AA:  DEC     W11,W11
23AC:  CLR     W11
23AE:  MOV     W11,[W14+#28]
23B0:  MOV     W0,W10
23B2:  BTSC.B  223.1
23B4:  BRA     23B2
23B6:  MOV     #2D,W4
23B8:  MOV     W4,224
23BA:  MOV     W10,W0
23BC:  CLR     W11
23BE:  MOV     W11,[W14+#28]
23C0:  MOV     [W14+#26],W9
23C2:  MOV     [W14+#24],W10
23C4:  SUB     W10,W9,W8
23C6:  BRA     NZ,23E0
23C8:  CLR     W11
23CA:  MOV     W11,[W14+#28]
23CC:  MOV     W0,W10
23CE:  BTSC.B  223.1
23D0:  BRA     23CE
23D2:  MOV     #2E,W4
23D4:  MOV     W4,224
23D6:  MOV     [W14+#28],W11
23D8:  MOV     #2000,W12
23DA:  AND     W12,W11,W11
23DC:  MOV     W11,[W14+#28]
23DE:  MOV     W10,W0
23E0:  MOV     #30,W1
23E2:  MOV     [W14+#28],W11
23E4:  BTSS    W11.D
23E6:  BRA     2402
23E8:  BCLR    W11.D
23EA:  MOV     [W14+#26],W9
23EC:  CP0     W9
23EE:  BTSS.B  42.1
23F0:  DEC     W11,W11
23F2:  CLR     W11
23F4:  MOV     W11,[W14+#28]
23F6:  BTSC.B  223.1
23F8:  BRA     23F6
23FA:  MOV     #2D,W4
23FC:  MOV     W4,224
23FE:  CLR     W0
2400:  MOV     #30,W1
2402:  ADD     W1,W0,W0
2404:  BTSC.B  223.1
2406:  BRA     2404
2408:  MOV     W0,224
240A:  MOV     [W14+#24],W13
240C:  DEC     W13,W13
240E:  BRA     Z,2442
2410:  MOV     W13,[W14+#24]
2412:  MOV     [W14+#18],W0
2414:  MOV     [W14+#1A],W1
2416:  MOV     [W14+#1C],W2
2418:  MOV     [W14+#1E],W3
241A:  MOV     #A,W4
241C:  CLR     W5
241E:  MUL.UU  W6,#0,W6
2420:  BRA     2354
2422:  MOV     W0,[W14+#18]
2424:  MOV     W1,[W14+#1A]
2426:  MOV     W2,[W14+#1C]
2428:  MOV     W3,[W14+#1E]
242A:  MOV     W0,W4
242C:  MOV     W1,W5
242E:  MOV     W2,W6
2430:  MOV     W3,W7
2432:  MOV     [W14+#10],W0
2434:  MOV     [W14+#12],W1
2436:  MOV     [W14+#14],W2
2438:  MOV     [W14+#16],W3
243A:  MOV     [W14+#22],W13
243C:  BTG     W13.0
243E:  MOV     W13,[W14+#22]
2440:  BRA     2354
2442:  ULNK    
2444:  MOV     #1A,W5
2446:  REPEAT  #7
2448:  MOV     [--W15],[W5--]
244A:  MOV     [--W15],W5
244C:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
*
104C:  CP0     W0
104E:  BTSC.B  42.1
1050:  BRA     105A
1052:  REPEAT  #3E7B
1054:  NOP     
1056:  DEC     W0,W0
1058:  BRA     NZ,1052
105A:  RETURN  
....................  
.................... #PIN_SELECT U1RX = PIN_B12 // PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 // PIN_B15 // 
.................... #use rs232(UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define DEVICE_ID 2 
.................... #define limitSw_x PIN_B8 // 
.................... #define limitSw_y PIN_A2 // 
.................... #define limitSw_z PIN_A4 // 
.................... #define Motor_Bp PIN_B10 // Pin output is connected to DXI0  (PWM) 
.................... #define Motor_Br PIN_B2  // Pin output is connected to DX02 
.................... #define Motor_Bl PIN_B3  // Pin output is connected to DX03 
.................... #define Motor_Ap PIN_B4  // Pin output is connected to DX03 
.................... #define Motor_Ar PIN_A1  // Pin output is connected to DX03 
.................... #define Motor_Al PIN_A0  // Pin output is connected to DX03 
.................... #define Motor_Zp PIN_B14 // Pin output is connected to DX03 
.................... #define Motor_Zr PIN_B15 // Pin output is connected to DX03 
.................... #define Motor_Zl PIN_B9  // Pin output is connected to DX03 
.................... #define Encode_A PIN_B7  // Pin output is connected to DX03 
.................... #define Encode_B PIN_B6  // Pin output is connected to DX03 
.................... #define Encode_Z PIN_B5  // Pin output is connected to DX03 
.................... #define servo_r PIN_B0   // servo 270 
.................... #define servo_l PIN_B1   // servo 180 
....................  
.................... #PIN_SELECT OC1 = Motor_Bp 
.................... #PIN_SELECT OC2 = Motor_Ap 
.................... #PIN_SELECT OC3 = Motor_Zp 
.................... #PIN_SELECT OC4 = servo_r 
.................... #PIN_SELECT OC5 = servo_l 
.................... #PIN_SELECT INT1 = Encode_B 
.................... #PIN_SELECT INT2 = Encode_Z 
....................  
.................... // long count = 0; 
.................... long count_a = 0; 
.................... long count_b = 0; 
.................... long count_z = 0; 
.................... // long posi = 0; 
.................... int u_a; 
.................... int *a_u = &u_a; 
.................... int u_b; 
.................... int *b_u = &u_b; 
.................... int u_z; 
.................... int *z_u = &u_z; 
....................  
.................... int s_a = 0; 
.................... int *a_s = &s_a; 
.................... int s_b = 0; 
.................... int *b_s = &s_b; 
.................... int s_z = 0; 
.................... int *z_s = &s_z; 
.................... int p_a = 0; 
.................... int *a_p = &p_a; 
.................... int p_b = 0; 
.................... int *b_p = &p_b; 
.................... int p_z = 0; 
.................... int *z_p = &p_z; 
....................  
.................... int tolerance = 50; 
....................  
.................... float K_Pz = 0.6; 
.................... float K_Iz = 0.00; 
.................... float K_Dz = 0.0; 
.................... float K_Pa = 0.65; 
.................... float K_Ia = 0.01; 
.................... float K_Da = 0.0; 
.................... float K_Pb = 0.65; 
.................... float K_Ib = 0.01; 
.................... float K_Db = 0.0; 
....................  
.................... int direction_z = 0; 
.................... int direction_a = 0; 
.................... int direction_b = 0; 
.................... char array[20] = {}; 
.................... char SM_id = 0; 
.................... int getPackage = 0; 
.................... char command_ID; 
.................... // char* print_float(float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     char stringFloat[20]; 
.................... //     sprintf(stringFloat, "%d.%d", intDist, dotDist); 
.................... //     return stringFloat; 
.................... // } 
.................... // void print_float(char* stringResult, float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     sprintf(stringResult, "%d.%d", intDist, dotDist); 
.................... // } 
....................  
.................... // Encoder Interrupts 
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0(void) { 
*
0ED6:  PUSH    42
0ED8:  PUSH    36
0EDA:  PUSH    32
0EDC:  MOV     W0,[W15++]
0EDE:  MOV     #2,W0
0EE0:  REPEAT  #C
0EE2:  MOV     [W0++],[W15++]
....................   if (direction_a == 0) { 
0EE4:  CP0     908
0EE6:  BRA     NZ,EF0
....................     count_a++; 
0EE8:  INC     08B0
0EEA:  BTSC.B  42.1
0EEC:  INC     08B2
....................   } else { 
0EEE:  BRA     EF6
....................     count_a--; 
0EF0:  DEC     08B0
0EF2:  BTSS.B  42.0
0EF4:  DEC     08B2
....................   } 
.................... } 
....................  
0EF6:  BCLR.B  84.0
0EF8:  MOV     #1A,W0
0EFA:  REPEAT  #C
0EFC:  MOV     [--W15],[W0--]
0EFE:  MOV     [--W15],W0
0F00:  POP     32
0F02:  POP     36
0F04:  POP     42
0F06:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
0F08:  PUSH    42
0F0A:  PUSH    36
0F0C:  PUSH    32
0F0E:  MOV     W0,[W15++]
0F10:  MOV     #2,W0
0F12:  REPEAT  #C
0F14:  MOV     [W0++],[W15++]
....................   if (direction_b == 0) { 
0F16:  CP0     90A
0F18:  BRA     NZ,F22
....................     count_b++; 
0F1A:  INC     08B4
0F1C:  BTSC.B  42.1
0F1E:  INC     08B6
....................   } else { 
0F20:  BRA     F28
....................     count_b--; 
0F22:  DEC     08B4
0F24:  BTSS.B  42.0
0F26:  DEC     08B6
....................   } 
.................... } 
....................  
0F28:  BCLR.B  86.4
0F2A:  MOV     #1A,W0
0F2C:  REPEAT  #C
0F2E:  MOV     [--W15],[W0--]
0F30:  MOV     [--W15],W0
0F32:  POP     32
0F34:  POP     36
0F36:  POP     42
0F38:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2(void) { 
0F3A:  PUSH    42
0F3C:  PUSH    36
0F3E:  PUSH    32
0F40:  MOV     W0,[W15++]
0F42:  MOV     #2,W0
0F44:  REPEAT  #C
0F46:  MOV     [W0++],[W15++]
....................   if (direction_z == 0) { 
0F48:  CP0     906
0F4A:  BRA     NZ,F54
....................     count_z++; 
0F4C:  INC     08B8
0F4E:  BTSC.B  42.1
0F50:  INC     08BA
....................   } else { 
0F52:  BRA     F5A
....................     count_z--; 
0F54:  DEC     08B8
0F56:  BTSS.B  42.0
0F58:  DEC     08BA
....................   } 
0F5A:  BCLR.B  87.5
0F5C:  MOV     #1A,W0
0F5E:  REPEAT  #C
0F60:  MOV     [--W15],[W0--]
0F62:  MOV     [--W15],W0
0F64:  POP     32
0F66:  POP     36
0F68:  POP     42
0F6A:  RETFIE  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT0); 
*
100C:  BSET.B  94.0
....................   ext_int_edge(0, L_TO_H); // Rising Edge 
100E:  BCLR.B  82.0
....................   enable_interrupts(INT_EXT1); 
1010:  BSET.B  96.4
....................   ext_int_edge(1, L_TO_H); // Rising Edge 
1012:  BCLR.B  82.1
....................   enable_interrupts(INT_EXT2); 
1014:  BSET.B  97.5
....................   ext_int_edge(2, L_TO_H); // Rising Edge 
1016:  BCLR.B  82.2
1018:  RETURN  
.................... } 
....................  
.................... // 
....................  
.................... // Communication Routines 
....................  
.................... void SM_RxD(int c) { 
*
0F6C:  MOV     W5,[W15++]
....................   if (getPackage == 0) { 
0F6E:  CP0     922
0F70:  BRA     NZ,FD6
....................     if (SM_id < 2) { 
0F72:  MOV.B   920,W0L
0F74:  SE      W0,W0
0F76:  CP      W0,#2
0F78:  BRA     GE,F94
....................       if (c == 255) { 
0F7A:  MOV     992,W4
0F7C:  XOR     #FF,W4
0F7E:  BRA     NZ,F90
....................         array[SM_id] = c; 
0F80:  MOV.B   920,W0L
0F82:  SE      W0,W0
0F84:  MOV     #90C,W4
0F86:  ADD     W0,W4,W5
0F88:  MOV     992,W0
0F8A:  MOV.B   W0L,[W5+#0]
....................         SM_id++; 
0F8C:  INC.B   0920
....................       } else { 
0F8E:  BRA     F92
....................         SM_id = 0; 
0F90:  CLR.B   920
....................       } 
....................     } else if (SM_id == 2) { 
0F92:  BRA     FD6
0F94:  MOV.B   920,W0L
0F96:  SE      W0,W0
0F98:  CP      W0,#2
0F9A:  BRA     NZ,FB0
....................       array[SM_id] = c; 
0F9C:  MOV.B   920,W0L
0F9E:  SE      W0,W0
0FA0:  MOV     #90C,W4
0FA2:  ADD     W0,W4,W5
0FA4:  MOV     992,W0
0FA6:  MOV.B   W0L,[W5+#0]
....................       command_ID = c; 
0FA8:  MOV.B   992,W0L
0FAA:  MOV.B   W0L,921
....................       SM_id++; 
0FAC:  INC.B   0920
....................     } else if (SM_id > 2) { 
0FAE:  BRA     FD6
0FB0:  MOV.B   920,W0L
0FB2:  SE      W0,W0
0FB4:  CP      W0,#2
0FB6:  BRA     LE,FD6
....................       array[SM_id] = c; 
0FB8:  MOV.B   920,W0L
0FBA:  SE      W0,W0
0FBC:  MOV     #90C,W4
0FBE:  ADD     W0,W4,W5
0FC0:  MOV     992,W0
0FC2:  MOV.B   W0L,[W5+#0]
....................       if (SM_id >= 9) { 
0FC4:  MOV.B   920,W0L
0FC6:  SE      W0,W0
0FC8:  CP      W0,#9
0FCA:  BRA     LT,FD4
....................         getPackage = 1; 
0FCC:  MOV     #1,W4
0FCE:  MOV     W4,922
....................         SM_id = 0; 
0FD0:  CLR.B   920
....................       } else { 
0FD2:  BRA     FD6
....................         SM_id++; 
0FD4:  INC.B   0920
....................       } 
....................     } 
....................   } 
0FD6:  MOV     [--W15],W5
0FD8:  RETURN  
.................... } 
....................  
.................... #INT_RDA 
.................... void UART1_Isr() { 
0FDA:  PUSH    42
0FDC:  PUSH    36
0FDE:  PUSH    32
0FE0:  MOV     W0,[W15++]
0FE2:  MOV     #2,W0
0FE4:  REPEAT  #C
0FE6:  MOV     [W0++],[W15++]
0FE8:  BTSS.B  222.0
0FEA:  BRA     FE8
0FEC:  MOV     226,W0
0FEE:  MOV.B   W0L,990
0FF0:  CLR.B   991
....................   int c = getc(); 
....................   // putc(c); 
....................   SM_RxD(c); 
0FF2:  PUSH    990
0FF4:  POP     992
0FF6:  CALL    F6C
0FFA:  BCLR.B  85.3
0FFC:  MOV     #1A,W0
0FFE:  REPEAT  #C
1000:  MOV     [--W15],[W0--]
1002:  MOV     [--W15],W0
1004:  POP     32
1006:  POP     36
1008:  POP     42
100A:  RETFIE  
.................... } 
.................... // 
....................  
.................... // Motor 
.................... void Motor_z(int u) { 
*
105C:  MOV     W5,[W15++]
....................   if (u > 100) 
105E:  MOV     92A,W4
1060:  MOV     #64,W3
1062:  CP      W3,W4
1064:  BRA     GE,106A
....................     u = 100; 
1066:  MOV     #64,W4
1068:  MOV     W4,92A
....................   if (u < -100) 
106A:  MOV     92A,W4
106C:  MOV     #FF9C,W3
106E:  CP      W3,W4
1070:  BRA     LE,1076
....................     u = -100; 
1072:  MOV     #FF9C,W4
1074:  MOV     W4,92A
....................   if (u > 0) { 
1076:  MOV     92A,W4
1078:  CP      W4,#0
107A:  BRA     LE,1090
....................     output_bit(Motor_Zr, 0); 
107C:  BCLR.B  2CD.7
107E:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
1080:  BSET.B  2CD.1
1082:  BCLR.B  2C9.1
....................     direction_z = 0; 
1084:  CLR     906
....................     set_pwm_duty(3, (int)(2 * u)); 
1086:  MOV     92A,W4
1088:  MUL.UU  W4,#2,W0
108A:  MOV     W0,W5
108C:  MOV     W5,18C
....................   } else if (u < 0) { 
108E:  BRA     10C4
1090:  MOV     92A,W4
1092:  CP      W4,#0
1094:  BRA     GE,10B2
....................     output_bit(Motor_Zr, 1); 
1096:  BSET.B  2CD.7
1098:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 0); 
109A:  BCLR.B  2CD.1
109C:  BCLR.B  2C9.1
....................     direction_z = 1; 
109E:  MOV     #1,W4
10A0:  MOV     W4,906
....................     set_pwm_duty(3, (int)(2 * -u)); 
10A2:  MOV     #0,W4
10A4:  MOV     92A,W3
10A6:  SUB     W4,W3,W0
10A8:  MOV     W0,W4
10AA:  MUL.UU  W4,#2,W0
10AC:  MOV     W0,W5
10AE:  MOV     W5,18C
....................   } else { 
10B0:  BRA     10C4
....................     output_bit(Motor_Zr, 1); 
10B2:  BSET.B  2CD.7
10B4:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
10B6:  BSET.B  2CD.1
10B8:  BCLR.B  2C9.1
....................     set_pwm_duty(3, (int)(100)); 
10BA:  MOV     #64,W4
10BC:  MOV     W4,18C
....................     delay_ms(200); 
10BE:  MOV     #C8,W0
10C0:  CALL    104C
....................   } 
10C4:  MOV     [--W15],W5
10C6:  RETURN  
.................... } 
....................  
.................... void Motor_a(int u) { 
10C8:  MOV     W5,[W15++]
....................   if (u > 100) 
10CA:  MOV     930,W4
10CC:  MOV     #64,W3
10CE:  CP      W3,W4
10D0:  BRA     GE,10D6
....................     u = 100; 
10D2:  MOV     #64,W4
10D4:  MOV     W4,930
....................   if (u < -100) 
10D6:  MOV     930,W4
10D8:  MOV     #FF9C,W3
10DA:  CP      W3,W4
10DC:  BRA     LE,10E2
....................     u = -100; 
10DE:  MOV     #FF9C,W4
10E0:  MOV     W4,930
....................   if (u > 0) { 
10E2:  MOV     930,W4
10E4:  CP      W4,#0
10E6:  BRA     LE,10FC
....................     output_bit(Motor_Ar, 1); 
10E8:  BSET.B  2C4.1
10EA:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 0); 
10EC:  BCLR.B  2C4.0
10EE:  BCLR.B  2C0.0
....................     direction_a = 0; 
10F0:  CLR     908
....................     set_pwm_duty(2, (int)(2 * u)); 
10F2:  MOV     930,W4
10F4:  MUL.UU  W4,#2,W0
10F6:  MOV     W0,W5
10F8:  MOV     W5,186
....................   } else if (u < 0) { 
10FA:  BRA     1130
10FC:  MOV     930,W4
10FE:  CP      W4,#0
1100:  BRA     GE,111E
....................     output_bit(Motor_Ar, 0); 
1102:  BCLR.B  2C4.1
1104:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 1); 
1106:  BSET.B  2C4.0
1108:  BCLR.B  2C0.0
....................     direction_a = 1; 
110A:  MOV     #1,W4
110C:  MOV     W4,908
....................     set_pwm_duty(2, (int)(2 * -u)); 
110E:  MOV     #0,W4
1110:  MOV     930,W3
1112:  SUB     W4,W3,W0
1114:  MOV     W0,W4
1116:  MUL.UU  W4,#2,W0
1118:  MOV     W0,W5
111A:  MOV     W5,186
....................   } else { 
111C:  BRA     1130
....................     output_bit(Motor_Ar, 1); 
111E:  BSET.B  2C4.1
1120:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 1); 
1122:  BSET.B  2C4.0
1124:  BCLR.B  2C0.0
....................     set_pwm_duty(2, (int)(100)); 
1126:  MOV     #64,W4
1128:  MOV     W4,186
....................     delay_ms(200); 
112A:  MOV     #C8,W0
112C:  CALL    104C
....................   } 
1130:  MOV     [--W15],W5
1132:  RETURN  
.................... } 
....................  
.................... void Motor_b(int u) { 
1134:  MOV     W5,[W15++]
....................   if (u > 100) 
1136:  MOV     930,W4
1138:  MOV     #64,W3
113A:  CP      W3,W4
113C:  BRA     GE,1142
....................     u = 100; 
113E:  MOV     #64,W4
1140:  MOV     W4,930
....................   if (u < -100) 
1142:  MOV     930,W4
1144:  MOV     #FF9C,W3
1146:  CP      W3,W4
1148:  BRA     LE,114E
....................     u = -100; 
114A:  MOV     #FF9C,W4
114C:  MOV     W4,930
....................   if (u > 0) { 
114E:  MOV     930,W4
1150:  CP      W4,#0
1152:  BRA     LE,1168
....................     output_bit(Motor_Br, 1); 
1154:  BSET.B  2CC.2
1156:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 0); 
1158:  BCLR.B  2CC.3
115A:  BCLR.B  2C8.3
....................     direction_b = 0; 
115C:  CLR     90A
....................     set_pwm_duty(1, (int)(2 * u)); 
115E:  MOV     930,W4
1160:  MUL.UU  W4,#2,W0
1162:  MOV     W0,W5
1164:  MOV     W5,180
....................   } else if (u < 0) { 
1166:  BRA     119C
1168:  MOV     930,W4
116A:  CP      W4,#0
116C:  BRA     GE,118A
....................     output_bit(Motor_Br, 0); 
116E:  BCLR.B  2CC.2
1170:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
1172:  BSET.B  2CC.3
1174:  BCLR.B  2C8.3
....................     direction_b = 1; 
1176:  MOV     #1,W4
1178:  MOV     W4,90A
....................     set_pwm_duty(1, (int)(2 * -u)); 
117A:  MOV     #0,W4
117C:  MOV     930,W3
117E:  SUB     W4,W3,W0
1180:  MOV     W0,W4
1182:  MUL.UU  W4,#2,W0
1184:  MOV     W0,W5
1186:  MOV     W5,180
....................   } else { 
1188:  BRA     119C
....................     output_bit(Motor_Br, 1); 
118A:  BSET.B  2CC.2
118C:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
118E:  BSET.B  2CC.3
1190:  BCLR.B  2C8.3
....................     set_pwm_duty(1, (int)(100)); 
1192:  MOV     #64,W4
1194:  MOV     W4,180
....................     delay_ms(200); 
1196:  MOV     #C8,W0
1198:  CALL    104C
....................   } 
119C:  MOV     [--W15],W5
119E:  RETURN  
.................... } 
....................  
.................... void PID(long r, long count, long s, long p, int *u, float K_P, float K_I, 
....................          float K_D) { 
*
1848:  MOV     W5,[W15++]
184A:  MOV     W6,[W15++]
184C:  MOV     W7,[W15++]
184E:  MOV     930,W4
1850:  MOV     934,W3
1852:  SUB     W4,W3,W0
1854:  MOV     W0,94E
1856:  MOV     932,W4
1858:  MOV     936,W3
185A:  SUBB    W4,W3,W0
185C:  MOV     W0,950
....................   long e = r - count; 
....................   s = s + e; 
185E:  MOV     938,W0
1860:  ADD     94E,W0
1862:  MOV     W0,938
1864:  MOV     950,W4
1866:  MOV     93A,W3
1868:  ADDC    W3,W4,W0
186A:  MOV     W0,93A
....................   *u = (K_P * e) + (K_I * s) + (K_D * (e - p)); 
186C:  MOV     940,W5
186E:  MOV     94E,W0
1870:  MOV     950,W1
1872:  CALL    1560
1876:  MOV     W0,W2
1878:  MOV     W1,W3
187A:  MOV     942,W0
187C:  MOV     944,W1
187E:  CALL    15AE
1882:  MOV.D   W0,W6
1884:  MOV     938,W0
1886:  MOV     93A,W1
1888:  CALL    1560
188C:  MOV     W0,W2
188E:  MOV     W1,W3
1890:  MOV     946,W0
1892:  MOV     948,W1
1894:  CALL    15AE
1898:  BCLR.B  43.0
189A:  MOV     W0,W2
189C:  MOV     W1,W3
189E:  MOV     W6,W0
18A0:  MOV     W7,W1
18A2:  CALL    1672
18A6:  MOV.D   W0,W6
18A8:  MOV     94E,W4
18AA:  MOV     93C,W3
18AC:  SUB     W4,W3,W0
18AE:  MOV     950,W4
18B0:  MOV     93E,W3
18B2:  SUBB    W4,W3,W1
18B4:  CALL    1560
18B8:  MOV     W0,W2
18BA:  MOV     W1,W3
18BC:  MOV     94A,W0
18BE:  MOV     94C,W1
18C0:  CALL    15AE
18C4:  BCLR.B  43.0
18C6:  MOV     W0,W2
18C8:  MOV     W1,W3
18CA:  MOV     W6,W0
18CC:  MOV     W7,W1
18CE:  CALL    1672
18D2:  CALL    181C
18D6:  MOV     W0,[W5]
....................   p = e; 
18D8:  PUSH    94E
18DA:  POP     93C
18DC:  PUSH    950
18DE:  POP     93E
18E0:  MOV     [--W15],W7
18E2:  MOV     [--W15],W6
18E4:  MOV     [--W15],W5
18E6:  RETURN  
.................... } 
.................... // 
....................  
.................... // Utilities 
.................... int mergeInts(int MSB, int LSB) { 
*
14CA:  MOV     W5,[W15++]
14CC:  MOV.B   936,W0L
14CE:  CLR.B   1
14D0:  MOV     #100,W4
14D2:  MUL.SS  W4,W0,W0
14D4:  MOV     W0,W5
14D6:  MOV     938,W4
14D8:  CLR.B   9
14DA:  ADD     W5,W4,W0
14DC:  CLR     W1
14DE:  BTSC    W0.F
14E0:  SETM    W1
14E2:  MOV     W0,93A
14E4:  MOV     W1,93C
....................   long a = (256 * (int)(unsigned char)MSB) + (unsigned char)LSB; 
....................   printf("merged %d and %d into: %d \n", MSB, LSB, a); 
14E6:  MOV     #0,W1
14E8:  MOV     W1,W0
14EA:  CLR.B   1
14EC:  CALL    DFC
14F0:  INC     W1,W1
14F2:  BTSC.B  223.1
14F4:  BRA     14F2
14F6:  MOV     W0,224
14F8:  MOV     #6,W0
14FA:  CPSGT   W1,W0
14FC:  BRA     14E8
14FE:  MOV     936,W0
1500:  MOV     #0,W4
1502:  CALL    13D4
1506:  MOV     #9,W1
1508:  MOV     W1,W0
150A:  CLR.B   1
150C:  CALL    DFC
1510:  INC     W1,W1
1512:  BTSC.B  223.1
1514:  BRA     1512
1516:  MOV     W0,224
1518:  MOV     #D,W0
151A:  CPSGT   W1,W0
151C:  BRA     1508
151E:  MOV     938,W0
1520:  MOV     #0,W4
1522:  CALL    13D4
1526:  MOV     #10,W1
1528:  MOV     W1,W0
152A:  CLR.B   1
152C:  CALL    DFC
1530:  INC     W1,W1
1532:  BTSC.B  223.1
1534:  BRA     1532
1536:  MOV     W0,224
1538:  MOV     #16,W0
153A:  CPSGT   W1,W0
153C:  BRA     1528
153E:  MOV     93A,W0
1540:  MOV     93C,W1
1542:  MOV     #0,W4
1544:  CALL    11E4
1548:  BTSC.B  223.1
154A:  BRA     1548
154C:  MOV     #20,W4
154E:  MOV     W4,224
1550:  BTSC.B  223.1
1552:  BRA     1550
1554:  MOV     #A,W4
1556:  MOV     W4,224
....................   return a; 
1558:  PUSH    93A
155A:  POP     0
155C:  MOV     [--W15],W5
155E:  RETURN  
.................... } 
....................  
.................... float intsToFloat(unsigned char LSB, unsigned char hexadec) { 
*
244E:  MOV     W5,[W15++]
2450:  MOV     #C,W5
2452:  REPEAT  #4
2454:  MOV     [W5++],[W15++]
2456:  MOV.B   926,W0L
2458:  CLR.B   1
245A:  CALL    2098
245E:  MOV     W0,W5
2460:  MOV     W1,W6
2462:  MOV.B   927,W0L
2464:  CLR.B   1
2466:  CALL    2098
246A:  MOV     W0,W7
246C:  MOV     W1,W8
246E:  MOV     W7,W0
2470:  MOV     W8,W1
2472:  MOV     #0,W2
2474:  MOV     #4380,W3
2476:  CALL    20D2
247A:  BCLR.B  43.0
247C:  MOV     W0,W2
247E:  MOV     W1,W3
2480:  MOV     W5,W0
2482:  MOV     W6,W1
2484:  CALL    1672
2488:  MOV     W0,928
248A:  MOV     W1,92A
....................   float flo = (float)LSB + ((float)hexadec) / 256; 
....................   printf("merged %d and %d into: %0.2f\n", LSB, hexadec, flo); 
248C:  MOV     #0,W1
248E:  MOV     W1,W0
2490:  CLR.B   1
2492:  CALL    E24
2496:  INC     W1,W1
2498:  BTSC.B  223.1
249A:  BRA     2498
249C:  MOV     W0,224
249E:  MOV     #6,W0
24A0:  CPSGT   W1,W0
24A2:  BRA     248E
24A4:  MOV.B   926,W0L
24A6:  SE      W0,W0
24A8:  MOV     #0,W4
24AA:  CALL    13D4
24AE:  MOV     #9,W1
24B0:  MOV     W1,W0
24B2:  CLR.B   1
24B4:  CALL    E24
24B8:  INC     W1,W1
24BA:  BTSC.B  223.1
24BC:  BRA     24BA
24BE:  MOV     W0,224
24C0:  MOV     #D,W0
24C2:  CPSGT   W1,W0
24C4:  BRA     24B0
24C6:  MOV.B   927,W0L
24C8:  SE      W0,W0
24CA:  MOV     #0,W4
24CC:  CALL    13D4
24D0:  MOV     #10,W1
24D2:  MOV     W1,W0
24D4:  CLR.B   1
24D6:  CALL    E24
24DA:  INC     W1,W1
24DC:  BTSC.B  223.1
24DE:  BRA     24DC
24E0:  MOV     W0,224
24E2:  MOV     #16,W0
24E4:  CPSGT   W1,W0
24E6:  BRA     24D2
24E8:  MOV     92A,W2
24EA:  MOV     928,W1
24EC:  MOV     #0,W0
24EE:  CALL    219C
24F2:  MOV     #2,W9
24F4:  MOV     #C009,W10
24F6:  CALL    22CC
24FA:  BTSC.B  223.1
24FC:  BRA     24FA
24FE:  MOV     #A,W4
2500:  MOV     W4,224
....................   return flo; 
2502:  MOV     928,W0
2504:  MOV     92A,W1
2506:  MOV     #14,W5
2508:  REPEAT  #4
250A:  MOV     [--W15],[W5--]
250C:  MOV     [--W15],W5
250E:  RETURN  
.................... } 
.................... // 
....................  
.................... // COMMANDS// 
.................... void setHome() { 
*
12F8:  MOV     W5,[W15++]
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
12FA:  MOV     #E,W4
12FC:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
12FE:  MOV     #E,W4
1300:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
1302:  MOV     #E,W4
1304:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
1306:  CLR     18C
....................   set_pwm_duty(2, 0); 
1308:  CLR     186
....................   set_pwm_duty(1, 0); 
130A:  CLR     180
....................   do { 
....................     Motor_z(-100); 
130C:  MOV     #FF9C,W4
130E:  MOV     W4,92A
1310:  CALL    105C
....................   } while (input(limitSw_z) == 1); 
1314:  BSET.B  2C0.4
1316:  BTSC.B  2C2.4
1318:  BRA     130C
....................   Motor_z(0); 
131A:  CLR     92A
131C:  CALL    105C
....................   do { 
....................     Motor_a(-100); 
1320:  MOV     #FF9C,W4
1322:  MOV     W4,930
1324:  CALL    10C8
....................     Motor_b(-100); 
1328:  MOV     #FF9C,W4
132A:  MOV     W4,930
132C:  CALL    1134
....................   } while (input(limitSw_y) == 1); 
1330:  BSET.B  2C0.2
1332:  BTSC.B  2C2.2
1334:  BRA     1320
....................   Motor_a(0); 
1336:  CLR     930
1338:  CALL    10C8
....................   Motor_b(0); 
133C:  CLR     930
133E:  CALL    1134
....................   do { 
....................     Motor_a(100); 
1342:  MOV     #64,W4
1344:  MOV     W4,930
1346:  CALL    10C8
....................     Motor_b(-100); 
134A:  MOV     #FF9C,W4
134C:  MOV     W4,930
134E:  CALL    1134
....................   } while (input(limitSw_x) == 1); 
1352:  BSET.B  2C9.0
1354:  BTSC.B  2CB.0
1356:  BRA     1342
....................   Motor_a(0); 
1358:  CLR     930
135A:  CALL    10C8
....................   Motor_b(0); 
135E:  CLR     930
1360:  CALL    1134
....................   printf("%d, %d, %d\n", count_a, count_b, count_z); 
1364:  MOV     8B0,W0
1366:  MOV     8B2,W1
1368:  MOV     #0,W4
136A:  CALL    11E4
136E:  BTSC.B  223.1
1370:  BRA     136E
1372:  MOV     #2C,W4
1374:  MOV     W4,224
1376:  BTSC.B  223.1
1378:  BRA     1376
137A:  MOV     #20,W4
137C:  MOV     W4,224
137E:  MOV     8B4,W0
1380:  MOV     8B6,W1
1382:  MOV     #0,W4
1384:  CALL    11E4
1388:  BTSC.B  223.1
138A:  BRA     1388
138C:  MOV     #2C,W4
138E:  MOV     W4,224
1390:  BTSC.B  223.1
1392:  BRA     1390
1394:  MOV     #20,W4
1396:  MOV     W4,224
1398:  MOV     8B8,W0
139A:  MOV     8BA,W1
139C:  MOV     #0,W4
139E:  CALL    11E4
13A2:  BTSC.B  223.1
13A4:  BRA     13A2
13A6:  MOV     #A,W4
13A8:  MOV     W4,224
....................   count_a = 0; 
13AA:  CLR     8B0
13AC:  CLR     8B2
....................   count_b = 0; 
13AE:  CLR     8B4
13B0:  CLR     8B6
....................   count_z = 0; 
13B2:  CLR     8B8
13B4:  CLR     8BA
....................   printf("done"); 
13B6:  MOV     #0,W1
13B8:  MOV     W1,W0
13BA:  CLR.B   1
13BC:  CALL    E4E
13C0:  INC     W1,W1
13C2:  BTSC.B  223.1
13C4:  BRA     13C2
13C6:  MOV     W0,224
13C8:  MOV     #3,W0
13CA:  CPSGT   W1,W0
13CC:  BRA     13B8
....................   getPackage = 0; 
13CE:  CLR     922
13D0:  MOV     [--W15],W5
13D2:  RETURN  
.................... } 
....................  
.................... void setPosAB() { 
*
18E8:  MOV     W5,[W15++]
18EA:  MOV     W6,[W15++]
18EC:  MOV.B   90F,W0L
18EE:  MOV.B   W0L,W5L
18F0:  SE      W5,W5
18F2:  MOV.B   910,W0L
18F4:  MOV.B   W0L,C
18F6:  SE      W6,W6
18F8:  MOV     W5,936
18FA:  MOV     W6,938
18FC:  CALL    14CA
1900:  CLR     W1
1902:  BTSC    W0.F
1904:  SETM    W1
1906:  MOV     W0,926
1908:  MOV     W1,928
190A:  MOV.B   911,W0L
190C:  MOV.B   W0L,W5L
190E:  SE      W5,W5
1910:  MOV.B   912,W0L
1912:  MOV.B   W0L,C
1914:  SE      W6,W6
1916:  MOV     W5,936
1918:  MOV     W6,938
191A:  CALL    14CA
191E:  CLR     W1
1920:  BTSC    W0.F
1922:  SETM    W1
1924:  MOV     W0,92A
1926:  MOV     W1,92C
....................   long r_a = mergeInts((int)array[3], (int)array[4]); 
....................   long r_b = mergeInts((int)array[5], (int)array[6]); 
....................   if ((int)array[7] == 1) { 
1928:  MOV.B   913,W0L
192A:  MOV.B   W0L,W5L
192C:  SE      W5,W5
192E:  CP      W5,#1
1930:  BRA     NZ,1942
....................     r_a = 0 - r_a; 
1932:  MOV     #0,W4
1934:  MOV     926,W3
1936:  SUB     W4,W3,W0
1938:  MOV     W0,926
193A:  MOV     #0,W4
193C:  MOV     928,W3
193E:  SUBB    W4,W3,W0
1940:  MOV     W0,928
....................   } 
....................   if ((int)array[8] == 1) { 
1942:  MOV.B   914,W0L
1944:  MOV.B   W0L,A
1946:  SE      W5,W5
1948:  CP      W5,#1
194A:  BRA     NZ,195C
....................     r_b = 0 - r_b; 
194C:  MOV     #0,W4
194E:  MOV     92A,W3
1950:  SUB     W4,W3,W0
1952:  MOV     W0,92A
1954:  MOV     #0,W4
1956:  MOV     92C,W3
1958:  SUBB    W4,W3,W0
195A:  MOV     W0,92C
....................   } 
....................   printf("r_a = %d\n", (int)r_a); 
195C:  MOV     #0,W1
195E:  MOV     W1,W0
1960:  CLR.B   1
1962:  CALL    E60
1966:  INC     W1,W1
1968:  BTSC.B  223.1
196A:  BRA     1968
196C:  MOV     W0,224
196E:  MOV     #5,W0
1970:  CPSGT   W1,W0
1972:  BRA     195E
1974:  MOV     926,W0
1976:  MOV     #0,W4
1978:  CALL    13D4
197C:  BTSC.B  223.1
197E:  BRA     197C
1980:  MOV     #A,W4
1982:  MOV     W4,224
....................   printf("r_b = %d\n", (int)r_b); 
1984:  MOV     #0,W1
1986:  MOV     W1,W0
1988:  CLR.B   1
198A:  CALL    E76
198E:  INC     W1,W1
1990:  BTSC.B  223.1
1992:  BRA     1990
1994:  MOV     W0,224
1996:  MOV     #5,W0
1998:  CPSGT   W1,W0
199A:  BRA     1986
199C:  MOV     92A,W0
199E:  MOV     #0,W4
19A0:  CALL    13D4
19A4:  BTSC.B  223.1
19A6:  BRA     19A4
19A8:  MOV     #A,W4
19AA:  MOV     W4,224
....................   while (abs(r_a - count_a) > tolerance || abs(r_b - count_b) > tolerance) { 
19AC:  MOV     926,W4
19AE:  MOV     8B0,W3
19B0:  SUB     W4,W3,W5
19B2:  MOV     928,W4
19B4:  MOV     8B2,W3
19B6:  SUBB    W4,W3,W6
19B8:  MOV     W5,W0
19BA:  MOV     W6,W1
19BC:  BTSS    W1.F
19BE:  BRA     19C8
19C0:  MOV     #0,W4
19C2:  SUB     W4,W5,W0
19C4:  MOV     #0,W4
19C6:  SUBB    W4,W6,W1
19C8:  MOV     W0,W5
19CA:  MOV     W1,W6
19CC:  MOV     8E0,W0
19CE:  CLR     W1
19D0:  BTSC    W0.F
19D2:  SETM    W1
19D4:  CP      W1,W6
19D6:  BRA     LT,1A10
19D8:  BRA     GT,19DE
19DA:  CP      W0,W5
19DC:  BRA     NC,1A10
19DE:  MOV     92A,W4
19E0:  MOV     8B4,W3
19E2:  SUB     W4,W3,W5
19E4:  MOV     92C,W4
19E6:  MOV     8B6,W3
19E8:  SUBB    W4,W3,W6
19EA:  MOV     W5,W0
19EC:  MOV     W6,W1
19EE:  BTSS    W1.F
19F0:  BRA     19FA
19F2:  MOV     #0,W4
19F4:  SUB     W4,W5,W0
19F6:  MOV     #0,W4
19F8:  SUBB    W4,W6,W1
19FA:  MOV     W0,W5
19FC:  MOV     W1,W6
19FE:  MOV     8E0,W0
1A00:  CLR     W1
1A02:  BTSC    W0.F
1A04:  SETM    W1
1A06:  CP      W1,W6
1A08:  BRA     GT,1A9A
1A0A:  BRA     LT,1A10
1A0C:  CP      W0,W5
1A0E:  BRA     C,1A9A
....................     PID(r_a, count_a, a_s, a_p, a_u, K_Pa, K_Ia, K_Da); 
1A10:  PUSH    926
1A12:  POP     930
1A14:  PUSH    928
1A16:  POP     932
1A18:  PUSH    8B0
1A1A:  POP     934
1A1C:  PUSH    8B2
1A1E:  POP     936
1A20:  PUSH    8CA
1A22:  POP     938
1A24:  CLR     93A
1A26:  PUSH    8D6
1A28:  POP     93C
1A2A:  CLR     93E
1A2C:  PUSH    8BE
1A2E:  POP     940
1A30:  PUSH    8EE
1A32:  POP     942
1A34:  PUSH    8F0
1A36:  POP     944
1A38:  PUSH    8F2
1A3A:  POP     946
1A3C:  PUSH    8F4
1A3E:  POP     948
1A40:  PUSH    8F6
1A42:  POP     94A
1A44:  PUSH    8F8
1A46:  POP     94C
1A48:  CALL    1848
....................     PID(r_b, count_b, b_s, b_p, b_u, K_Pb, K_Ib, K_Db); 
1A4C:  PUSH    92A
1A4E:  POP     930
1A50:  PUSH    92C
1A52:  POP     932
1A54:  PUSH    8B4
1A56:  POP     934
1A58:  PUSH    8B6
1A5A:  POP     936
1A5C:  PUSH    8CE
1A5E:  POP     938
1A60:  CLR     93A
1A62:  PUSH    8DA
1A64:  POP     93C
1A66:  CLR     93E
1A68:  PUSH    8C2
1A6A:  POP     940
1A6C:  PUSH    8FA
1A6E:  POP     942
1A70:  PUSH    8FC
1A72:  POP     944
1A74:  PUSH    8FE
1A76:  POP     946
1A78:  PUSH    900
1A7A:  POP     948
1A7C:  PUSH    902
1A7E:  POP     94A
1A80:  PUSH    904
1A82:  POP     94C
1A84:  CALL    1848
....................     Motor_a(u_a); 
1A88:  PUSH    8BC
1A8A:  POP     930
1A8C:  CALL    10C8
....................     Motor_b(u_b); 
1A90:  PUSH    8C0
1A92:  POP     930
1A94:  CALL    1134
1A98:  BRA     19AC
....................   } 
....................   Motor_a(0); 
1A9A:  CLR     930
1A9C:  CALL    10C8
....................   Motor_b(0); 
1AA0:  CLR     930
1AA2:  CALL    1134
....................   printf("position = %d, %d\n", count_a, count_b); 
1AA6:  MOV     #0,W1
1AA8:  MOV     W1,W0
1AAA:  CLR.B   1
1AAC:  CALL    E8C
1AB0:  INC     W1,W1
1AB2:  BTSC.B  223.1
1AB4:  BRA     1AB2
1AB6:  MOV     W0,224
1AB8:  MOV     #A,W0
1ABA:  CPSGT   W1,W0
1ABC:  BRA     1AA8
1ABE:  MOV     8B0,W0
1AC0:  MOV     8B2,W1
1AC2:  MOV     #0,W4
1AC4:  CALL    11E4
1AC8:  BTSC.B  223.1
1ACA:  BRA     1AC8
1ACC:  MOV     #2C,W4
1ACE:  MOV     W4,224
1AD0:  BTSC.B  223.1
1AD2:  BRA     1AD0
1AD4:  MOV     #20,W4
1AD6:  MOV     W4,224
1AD8:  MOV     8B4,W0
1ADA:  MOV     8B6,W1
1ADC:  MOV     #0,W4
1ADE:  CALL    11E4
1AE2:  BTSC.B  223.1
1AE4:  BRA     1AE2
1AE6:  MOV     #A,W4
1AE8:  MOV     W4,224
....................   printf("done"); 
1AEA:  MOV     #0,W1
1AEC:  MOV     W1,W0
1AEE:  CLR.B   1
1AF0:  CALL    E4E
1AF4:  INC     W1,W1
1AF6:  BTSC.B  223.1
1AF8:  BRA     1AF6
1AFA:  MOV     W0,224
1AFC:  MOV     #3,W0
1AFE:  CPSGT   W1,W0
1B00:  BRA     1AEC
....................   getPackage = 0; 
1B02:  CLR     922
1B04:  MOV     [--W15],W6
1B06:  MOV     [--W15],W5
1B08:  RETURN  
.................... } 
....................  
.................... void setPosZ() { 
1B0A:  MOV     W5,[W15++]
1B0C:  MOV     W6,[W15++]
1B0E:  MOV.B   90F,W0L
1B10:  MOV.B   W0L,W5L
1B12:  SE      W5,W5
1B14:  MOV.B   910,W0L
1B16:  MOV.B   W0L,C
1B18:  SE      W6,W6
1B1A:  MOV     W5,936
1B1C:  MOV     W6,938
1B1E:  CALL    14CA
1B22:  CLR     W1
1B24:  BTSC    W0.F
1B26:  SETM    W1
1B28:  MOV     W0,926
1B2A:  MOV     W1,928
....................   long r_z = mergeInts((int)array[3], (int)array[4]); 
....................   printf("r_z = %d", (int)r_z); 
1B2C:  MOV     #0,W1
1B2E:  MOV     W1,W0
1B30:  CLR.B   1
1B32:  CALL    EAC
1B36:  INC     W1,W1
1B38:  BTSC.B  223.1
1B3A:  BRA     1B38
1B3C:  MOV     W0,224
1B3E:  MOV     #5,W0
1B40:  CPSGT   W1,W0
1B42:  BRA     1B2E
1B44:  MOV     926,W0
1B46:  MOV     #0,W4
1B48:  CALL    13D4
....................   while (abs(r_z - count_z) > 20) { 
1B4C:  MOV     926,W4
1B4E:  MOV     8B8,W3
1B50:  SUB     W4,W3,W5
1B52:  MOV     928,W4
1B54:  MOV     8BA,W3
1B56:  SUBB    W4,W3,W6
1B58:  MOV     W5,W0
1B5A:  MOV     W6,W1
1B5C:  BTSS    W1.F
1B5E:  BRA     1B68
1B60:  MOV     #0,W4
1B62:  SUB     W4,W5,W0
1B64:  MOV     #0,W4
1B66:  SUBB    W4,W6,W1
1B68:  MOV     W0,W5
1B6A:  MOV     W1,W6
1B6C:  CP      W6,#0
1B6E:  BRA     LT,1BBC
1B70:  BRA     GT,1B76
1B72:  CP      W5,#14
1B74:  BRA     LEU,1BBC
....................     PID(r_z, count_z, z_s, z_p, z_u, K_Pz, K_Iz, K_Dz); 
1B76:  PUSH    926
1B78:  POP     930
1B7A:  PUSH    928
1B7C:  POP     932
1B7E:  PUSH    8B8
1B80:  POP     934
1B82:  PUSH    8BA
1B84:  POP     936
1B86:  PUSH    8D2
1B88:  POP     938
1B8A:  CLR     93A
1B8C:  PUSH    8DE
1B8E:  POP     93C
1B90:  CLR     93E
1B92:  PUSH    8C6
1B94:  POP     940
1B96:  PUSH    8E2
1B98:  POP     942
1B9A:  PUSH    8E4
1B9C:  POP     944
1B9E:  PUSH    8E6
1BA0:  POP     946
1BA2:  PUSH    8E8
1BA4:  POP     948
1BA6:  PUSH    8EA
1BA8:  POP     94A
1BAA:  PUSH    8EC
1BAC:  POP     94C
1BAE:  CALL    1848
....................     Motor_z(u_z); 
1BB2:  PUSH    8C4
1BB4:  POP     92A
1BB6:  CALL    105C
1BBA:  BRA     1B4C
....................     //printf("count_z : %d\n",count_z); 
....................     // delay_ms(10); 
....................   } 
....................   Motor_z(0); 
1BBC:  CLR     92A
1BBE:  CALL    105C
....................   // printf("position = %d\n", count_z); 
....................   // printf("done"); 
....................   getPackage = 0; 
1BC2:  CLR     922
1BC4:  MOV     [--W15],W6
1BC6:  MOV     [--W15],W5
1BC8:  RETURN  
.................... } 
....................  
.................... void gripClose() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1BCA:  MOV     #6,W4
1BCC:  MOV     W4,19C
....................   set_pwm_duty(5, 2600); 
1BCE:  MOV     #A28,W4
1BD0:  MOV     W4,198
....................   delay_ms(500); 
1BD2:  MOV     #1F4,W0
1BD4:  CALL    104C
....................   printf("done"); 
1BD8:  MOV     #0,W1
1BDA:  MOV     W1,W0
1BDC:  CLR.B   1
1BDE:  CALL    E4E
1BE2:  INC     W1,W1
1BE4:  BTSC.B  223.1
1BE6:  BRA     1BE4
1BE8:  MOV     W0,224
1BEA:  MOV     #3,W0
1BEC:  CPSGT   W1,W0
1BEE:  BRA     1BDA
....................   getPackage = 0; 
1BF0:  CLR     922
1BF2:  RETURN  
.................... } 
....................  
.................... void gripOpen() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1BF4:  MOV     #6,W4
1BF6:  MOV     W4,19C
....................   set_pwm_duty(5, 4200); 
1BF8:  MOV     #1068,W4
1BFA:  MOV     W4,198
....................   delay_ms(500); 
1BFC:  MOV     #1F4,W0
1BFE:  CALL    104C
....................   printf("done"); 
1C02:  MOV     #0,W1
1C04:  MOV     W1,W0
1C06:  CLR.B   1
1C08:  CALL    E4E
1C0C:  INC     W1,W1
1C0E:  BTSC.B  223.1
1C10:  BRA     1C0E
1C12:  MOV     W0,224
1C14:  MOV     #3,W0
1C16:  CPSGT   W1,W0
1C18:  BRA     1C04
....................   getPackage = 0; 
1C1A:  CLR     922
1C1C:  RETURN  
.................... } 
....................  
.................... void gripRotate() { 
*
1FD6:  MOV     W5,[W15++]
1FD8:  MOV     W6,[W15++]
1FDA:  MOV     W7,[W15++]
1FDC:  MOV     W8,[W15++]
1FDE:  MOV.B   90F,W0L
1FE0:  MOV.B   W0L,W5L
1FE2:  SE      W5,W5
1FE4:  MOV.B   910,W0L
1FE6:  MOV.B   W0L,C
1FE8:  SE      W6,W6
1FEA:  MOV     W5,936
1FEC:  MOV     W6,938
1FEE:  CALL    14CA
1FF2:  MOV     W0,926
....................   int angle = mergeInts((int)array[3], (int)array[4]); 
....................   setup_compare(4, COMPARE_PWM | COMPARE_TIMER2); 
1FF4:  MOV     #6,W4
1FF6:  MOV     W4,196
....................   set_pwm_duty(4, (int)(((angle * 0.186) + 12) * 80)); 
1FF8:  MOV     926,W0
1FFA:  CLR     W3
1FFC:  BTSC    W0.F
1FFE:  SETM    W3
2000:  MOV     W3,W1
2002:  MOV     W3,W2
2004:  CALL    1C1E
2008:  MOV     #2B02,W4
200A:  MOV     #1687,W5
200C:  MOV     #CED9,W6
200E:  MOV     #3FC7,W7
2010:  CALL    1C82
2014:  MOV     W0,W5
2016:  MOV     W1,W6
2018:  MOV     W2,W7
201A:  MOV     W3,W8
201C:  BCLR.B  43.0
201E:  MOV     W5,[W15++]
2020:  MOV     W6,[W15++]
2022:  MOV     W7,[W15++]
2024:  MOV     W5,W0
2026:  MOV     W6,W1
2028:  MOV     W7,W2
202A:  MOV     W8,W3
202C:  MOV     #0,W4
202E:  MOV     #0,W5
2030:  MOV     #0,W6
2032:  MOV     #4028,W7
2034:  CALL    1D92
2038:  MOV     [--W15],W7
203A:  MOV     [--W15],W6
203C:  MOV     [--W15],W5
203E:  MOV     W0,W5
2040:  MOV     W1,W6
2042:  MOV     W2,W7
2044:  MOV     W3,W8
2046:  MOV     W5,[W15++]
2048:  MOV     W6,[W15++]
204A:  MOV     W7,[W15++]
204C:  MOV     W5,W0
204E:  MOV     W6,W1
2050:  MOV     W7,W2
2052:  MOV     W8,W3
2054:  MOV     #0,W4
2056:  MOV     #0,W5
2058:  MOV     #0,W6
205A:  MOV     #4054,W7
205C:  CALL    1C82
2060:  MOV     [--W15],W7
2062:  MOV     [--W15],W6
2064:  MOV     [--W15],W5
2066:  CALL    1F80
206A:  MOV     W0,W5
206C:  MOV     W5,192
....................   delay_ms(500); 
206E:  MOV     #1F4,W0
2070:  CALL    104C
....................   printf("done"); 
2074:  MOV     #0,W1
2076:  MOV     W1,W0
2078:  CLR.B   1
207A:  CALL    E4E
207E:  INC     W1,W1
2080:  BTSC.B  223.1
2082:  BRA     2080
2084:  MOV     W0,224
2086:  MOV     #3,W0
2088:  CPSGT   W1,W0
208A:  BRA     2076
....................   getPackage = 0; 
208C:  CLR     922
208E:  MOV     [--W15],W8
2090:  MOV     [--W15],W7
2092:  MOV     [--W15],W6
2094:  MOV     [--W15],W5
2096:  RETURN  
.................... } 
....................  
.................... void setAGains() { 
....................   K_Pa = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
*
2510:  MOV.B   90F,W0L
2512:  MOV.B   W0L,926
2514:  MOV.B   910,W0L
2516:  MOV.B   W0L,927
2518:  CALL    244E
251C:  MOV     W0,8EE
251E:  MOV     W1,8F0
....................   K_Ia = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
2520:  MOV.B   911,W0L
2522:  MOV.B   W0L,926
2524:  MOV.B   912,W0L
2526:  MOV.B   W0L,927
2528:  CALL    244E
252C:  MOV     W0,8F2
252E:  MOV     W1,8F4
....................   K_Da = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
2530:  MOV.B   913,W0L
2532:  MOV.B   W0L,926
2534:  MOV.B   914,W0L
2536:  MOV.B   W0L,927
2538:  CALL    244E
253C:  MOV     W0,8F6
253E:  MOV     W1,8F8
....................   printf("done"); 
2540:  MOV     #0,W1
2542:  MOV     W1,W0
2544:  CLR.B   1
2546:  CALL    E4E
254A:  INC     W1,W1
254C:  BTSC.B  223.1
254E:  BRA     254C
2550:  MOV     W0,224
2552:  MOV     #3,W0
2554:  CPSGT   W1,W0
2556:  BRA     2542
....................   getPackage = 0; 
2558:  CLR     922
255A:  RETURN  
.................... } 
....................  
.................... void setBGains() { 
....................   K_Pb = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
255C:  MOV.B   90F,W0L
255E:  MOV.B   W0L,926
2560:  MOV.B   910,W0L
2562:  MOV.B   W0L,927
2564:  CALL    244E
2568:  MOV     W0,8FA
256A:  MOV     W1,8FC
....................   K_Ib = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
256C:  MOV.B   911,W0L
256E:  MOV.B   W0L,926
2570:  MOV.B   912,W0L
2572:  MOV.B   W0L,927
2574:  CALL    244E
2578:  MOV     W0,8FE
257A:  MOV     W1,900
....................   K_Db = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
257C:  MOV.B   913,W0L
257E:  MOV.B   W0L,926
2580:  MOV.B   914,W0L
2582:  MOV.B   W0L,927
2584:  CALL    244E
2588:  MOV     W0,902
258A:  MOV     W1,904
....................   printf("done"); 
258C:  MOV     #0,W1
258E:  MOV     W1,W0
2590:  CLR.B   1
2592:  CALL    E4E
2596:  INC     W1,W1
2598:  BTSC.B  223.1
259A:  BRA     2598
259C:  MOV     W0,224
259E:  MOV     #3,W0
25A0:  CPSGT   W1,W0
25A2:  BRA     258E
....................   getPackage = 0; 
25A4:  CLR     922
25A6:  RETURN  
.................... } 
....................  
.................... void setZGains() { 
....................   K_Pz = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
25A8:  MOV.B   90F,W0L
25AA:  MOV.B   W0L,926
25AC:  MOV.B   910,W0L
25AE:  MOV.B   W0L,927
25B0:  CALL    244E
25B4:  MOV     W0,8E2
25B6:  MOV     W1,8E4
....................   K_Iz = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
25B8:  MOV.B   911,W0L
25BA:  MOV.B   W0L,926
25BC:  MOV.B   912,W0L
25BE:  MOV.B   W0L,927
25C0:  CALL    244E
25C4:  MOV     W0,8E6
25C6:  MOV     W1,8E8
....................   K_Dz = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
25C8:  MOV.B   913,W0L
25CA:  MOV.B   W0L,926
25CC:  MOV.B   914,W0L
25CE:  MOV.B   W0L,927
25D0:  CALL    244E
25D4:  MOV     W0,8EA
25D6:  MOV     W1,8EC
....................   printf("done"); 
25D8:  MOV     #0,W1
25DA:  MOV     W1,W0
25DC:  CLR.B   1
25DE:  CALL    E4E
25E2:  INC     W1,W1
25E4:  BTSC.B  223.1
25E6:  BRA     25E4
25E8:  MOV     W0,224
25EA:  MOV     #3,W0
25EC:  CPSGT   W1,W0
25EE:  BRA     25DA
....................   getPackage = 0; 
25F0:  CLR     922
25F2:  RETURN  
.................... } 
....................  
.................... int sumCheck() { 
*
101A:  CLR.B   926
101C:  MOV.B   915,W0L
101E:  MOV.B   W0L,927
....................   char sum = 0; 
....................   char checksum = array[9]; 
....................   for (int i = 0; i < 9; i++) { 
1020:  CLR     928
1022:  MOV     928,W4
1024:  CP      W4,#9
1026:  BRA     GE,1038
....................     sum = sum + (char)array[i]; 
1028:  MOV     #90C,W4
102A:  MOV     928,W3
102C:  ADD     W3,W4,W0
102E:  MOV     W0,W4
1030:  MOV.B   [W4],W0L
1032:  ADD.B   926
1034:  INC     0928
1036:  BRA     1022
....................   } 
....................   sum = (char)sum; 
....................   if (sum == checksum) { 
1038:  MOV.B   926,W0L
103A:  CP.B    927
103C:  BRA     NZ,1046
....................     return 1; 
103E:  MOV     #1,W4
1040:  MOV     W4,0
1042:  BRA     104A
....................   } else { 
1044:  BRA     104A
....................     return 0; 
1046:  CLR     0
1048:  BRA     104A
....................   } 
104A:  RETURN  
.................... } 
.................... // 
....................  
.................... // 
.................... void main() { 
*
25F4:  MOV     #2780,W15
25F6:  MOV     #27FF,W0
25F8:  MOV     W0,20
25FA:  NOP     
25FC:  MOV     #4444,W0
25FE:  MOV     W0,A8
2600:  BSET.B  81.7
2602:  MOV     #46,W0
2604:  MOV.B   W0L,742
2606:  MOV     #57,W0
2608:  MOV.B   W0L,742
260A:  BCLR.B  742.6
260C:  MOV     #63F,W0
260E:  MOV     W0,680
2610:  MOV     #3F05,W0
2612:  MOV     W0,682
2614:  MOV     #3F0C,W0
2616:  MOV     W0,6A4
2618:  MOV     #1615,W0
261A:  MOV     W0,6C0
261C:  MOV     #13,W0
261E:  MOV     W0,6C4
2620:  MOV     #12,W0
2622:  MOV     W0,6CA
2624:  MOV     #300,W0
2626:  MOV     W0,6CC
2628:  MOV     #14,W0
262A:  MOV     W0,6CE
262C:  MOV     #46,W0
262E:  MOV.B   W0L,742
2630:  MOV     #57,W0
2632:  MOV.B   W0L,742
2634:  BSET.B  742.6
2636:  CLR     744
2638:  MOV     #8000,W4
263A:  MOV     W4,220
263C:  MOV     #400,W4
263E:  MOV     W4,222
2640:  BSET.B  220.3
2642:  MOV     #1A0,W4
2644:  MOV     W4,228
2646:  CLR     8B0
2648:  CLR     8B2
264A:  CLR     8B4
264C:  CLR     8B6
264E:  CLR     8B8
2650:  CLR     8BA
2652:  MOV     #8BC,W4
2654:  MOV     W4,8BE
2656:  MOV     #8C0,W4
2658:  MOV     W4,8C2
265A:  MOV     #8C4,W4
265C:  MOV     W4,8C6
265E:  CLR     8C8
2660:  MOV     #8C8,W4
2662:  MOV     W4,8CA
2664:  CLR     8CC
2666:  MOV     #8CC,W4
2668:  MOV     W4,8CE
266A:  CLR     8D0
266C:  MOV     #8D0,W4
266E:  MOV     W4,8D2
2670:  CLR     8D4
2672:  MOV     #8D4,W4
2674:  MOV     W4,8D6
2676:  CLR     8D8
2678:  MOV     #8D8,W4
267A:  MOV     W4,8DA
267C:  CLR     8DC
267E:  MOV     #8DC,W4
2680:  MOV     W4,8DE
2682:  MOV     #32,W4
2684:  MOV     W4,8E0
2686:  MOV     #999A,W4
2688:  MOV     W4,8E2
268A:  MOV     #3F19,W4
268C:  MOV     W4,8E4
268E:  CLR     8E6
2690:  CLR     8E8
2692:  CLR     8EA
2694:  CLR     8EC
2696:  MOV     #6666,W4
2698:  MOV     W4,8EE
269A:  MOV     #3F26,W4
269C:  MOV     W4,8F0
269E:  MOV     #D70A,W4
26A0:  MOV     W4,8F2
26A2:  MOV     #3C23,W4
26A4:  MOV     W4,8F4
26A6:  CLR     8F6
26A8:  CLR     8F8
26AA:  MOV     #6666,W4
26AC:  MOV     W4,8FA
26AE:  MOV     #3F26,W4
26B0:  MOV     W4,8FC
26B2:  MOV     #D70A,W4
26B4:  MOV     W4,8FE
26B6:  MOV     #3C23,W4
26B8:  MOV     W4,900
26BA:  CLR     902
26BC:  CLR     904
26BE:  CLR     906
26C0:  CLR     908
26C2:  CLR     90A
26C4:  CLR.B   920
26C6:  CLR     922
26C8:  SETM    32C
26CA:  BRA     2764
26CC:  DATA    C0,06,08
26CE:  DATA    00,00,00
26D0:  DATA    4B,F0,3F
26D2:  DATA    5C,0A,58
26D4:  DATA    F6,3B,8F
26D6:  DATA    00,C0,3C
26D8:  DATA    8B,28,AC
26DA:  DATA    3C,BE,F6
26DC:  DATA    3F,D2,D5
26DE:  DATA    44,16,8C
26E0:  DATA    15,D7,BF
26E2:  DATA    69,00,5A
26E4:  DATA    2E,1B,87
26E6:  DATA    99,3F,9A
26E8:  DATA    5F,AD,4B
26EA:  DATA    91,E4,01
26EC:  DATA    C0,5D,11
26EE:  DATA    2F,92,E4
26F0:  DATA    81,FB,3F
26F2:  DATA    38,DA,91
26F4:  DATA    80,9D,C5
26F6:  DATA    E0,BF,6F
26F8:  DATA    12,C0,B4
26FA:  DATA    C3,09,AB
26FC:  DATA    3F,6B,C1
26FE:  DATA    03,4E,C1
2700:  DATA    B5,45,BF
2702:  DATA    F7,40,05
2704:  DATA    FF,00,5A
2706:  DATA    EF,3F,F3
2708:  DATA    A3,E2,F7
270A:  DATA    D7,FF,01
270C:  DATA    40,C0,B4
270E:  DATA    FF,05,3C
2710:  DATA    58,FC,3F
2712:  DATA    3B,D3,C0
2714:  DATA    B5,BA,8C
2716:  DATA    E2,3F,39
2718:  DATA    D3,C7,3D
271A:  DATA    41,79,B2
271C:  DATA    3F,87,0D
271E:  DATA    3C,50,D0
2720:  DATA    AF,62,3F
2722:  DATA    30,4B,8D
2724:  DATA    A2,82,AA
2726:  DATA    04,40,09
2728:  DATA    A0,40,4A
272A:  DATA    05,76,03
272C:  DATA    40,EC,9E
272E:  DATA    37,88,A6
2730:  DATA    44,F0,3F
2732:  DATA    8F,12,8D
2734:  DATA    29,9A,5B
2736:  DATA    C7,3F,0E
2738:  DATA    E0,80,7C
273A:  DATA    A1,D8,86
273C:  DATA    3F,29,4B
273E:  DATA    FB,95,C2
2740:  DATA    37,1A,3F
2742:  DATA    C0,14,09
2744:  DATA    0C,00,00
2746:  DATA    00,00,00
2748:  INC     W2,W2
274A:  CP      W2,#1
274C:  BRA     NZ,2756
274E:  TBLRDL  [W1],W3
2750:  TBLRDH  [W1++],W4
2752:  MOV.B   6,W0L
2754:  RETURN  
2756:  CP      W2,#2
2758:  BRA     NZ,275E
275A:  MOV.B   7,W0L
275C:  RETURN  
275E:  MOV.B   8,W0L
2760:  CLR     W2
2762:  RETURN  
2764:  MOV     #0,W6
2766:  MOV     #0,W0
2768:  MOV     W0,32
276A:  MOV     #26CC,W0
276C:  MOV     W0,W1
276E:  CLR     W2
2770:  CALL    2748
2774:  MOV.B   W0L,B
2776:  CALL    2748
277A:  MOV.B   W0L,A
277C:  CP0     W5
277E:  BRA     Z,27B2
2780:  BTSS    W5.F
2782:  BRA     2792
2784:  CALL    2748
2788:  MOV.B   W0L,D
278A:  CALL    2748
278E:  MOV.B   W0L,C
2790:  BCLR    W5.F
2792:  BTSS    W5.E
2794:  BRA     27A6
2796:  BCLR    W5.E
2798:  DEC     W5,W5
279A:  CALL    2748
279E:  MOV.B   W0L,W7L
27A0:  REPEAT  W5
27A2:  MOV.B   W7L,[W6++]
27A4:  BRA     2770
27A6:  CALL    2748
27AA:  MOV.B   W0L,[W6++]
27AC:  DEC     W5,W5
27AE:  BRA     NZ,27A6
27B0:  BRA     2770
....................   disable_interrupts(GLOBAL); 
27B2:  BCLR.B  81.7
27B4:  MOV     #E0,W4
27B6:  MOV     W4,42
27B8:  BSET.B  81.7
....................  
....................   clear_interrupt( 
....................       INT_RDA); // recommend style coding to confirm everything clear before use 
27BA:  REPEAT  #3
27BC:  MOV     226,W0
27BE:  BCLR.B  85.3
....................  
....................   enable_interrupts(INT_RDA); 
27C0:  BSET.B  95.3
....................   Init_Interrupts(); 
27C2:  CALL    100C
....................   enable_interrupts(GLOBAL); 
27C6:  BCLR.B  81.7
27C8:  CLR     42
27CA:  BSET.B  81.7
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); 
27CC:  CLR     112
27CE:  MOV     #C8,W4
27D0:  MOV     W4,10E
27D2:  MOV     #8010,W4
27D4:  MOV     W4,112
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8, 8000); 
27D6:  CLR     110
27D8:  MOV     #1F40,W4
27DA:  MOV     W4,10C
27DC:  MOV     #8010,W4
27DE:  MOV     W4,110
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
27E0:  MOV     #E,W4
27E2:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
27E4:  MOV     #E,W4
27E6:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
27E8:  MOV     #E,W4
27EA:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
27EC:  CLR     18C
....................   set_pwm_duty(2, 0); 
27EE:  CLR     186
....................   set_pwm_duty(1, 0); 
27F0:  CLR     180
....................   count_a = 0; 
27F2:  CLR     8B0
27F4:  CLR     8B2
....................   count_b = 0; 
27F6:  CLR     8B4
27F8:  CLR     8B6
....................   count_z = 0; 
27FA:  CLR     8B8
27FC:  CLR     8BA
....................   // setPosAB(); 
....................   // gripOpen(); 
....................   // delay_ms(1000); 
....................   // gripClose(); 
....................   // delay_ms(1000); 
....................   // printf("System Ready!\r\n"); 
....................   while (TRUE) { 
....................     if (getPackage >= 1) { 
27FE:  MOV     922,W4
2800:  CP      W4,#1
2802:  BRA     LT,28A6
....................       int received = sumCheck(); 
2804:  CALL    101A
2808:  MOV     W0,924
....................       if (!received) { 
280A:  CP0     924
280C:  BRA     NZ,282A
....................         printf("resend"); 
280E:  MOV     #0,W1
2810:  MOV     W1,W0
2812:  CLR.B   1
2814:  CALL    EC2
2818:  INC     W1,W1
281A:  BTSC.B  223.1
281C:  BRA     281A
281E:  MOV     W0,224
2820:  MOV     #5,W0
2822:  CPSGT   W1,W0
2824:  BRA     2810
....................         getPackage = 0; 
2826:  CLR     922
....................       } else { 
2828:  BRA     28A6
....................         switch (array[2]) { 
282A:  MOV.B   90E,W0L
282C:  CLR.B   1
282E:  XOR     #0,W0
2830:  BRA     Z,2854
2832:  XOR     #1,W0
2834:  BRA     Z,285A
2836:  XOR     #3,W0
2838:  BRA     Z,2860
283A:  XOR     #1,W0
283C:  BRA     Z,2866
283E:  XOR     #7,W0
2840:  BRA     Z,286C
2842:  XOR     #1,W0
2844:  BRA     Z,2872
2846:  XOR     #3,W0
2848:  BRA     Z,2878
284A:  XOR     #1,W0
284C:  BRA     Z,287E
284E:  XOR     #F,W0
2850:  BRA     Z,2884
2852:  BRA     288A
....................         case 0: 
....................           setHome(); 
2854:  CALL    12F8
....................           break; 
2858:  BRA     28A6
....................         case 1: 
....................           setPosAB(); 
285A:  CALL    18E8
....................           break; 
285E:  BRA     28A6
....................         case 2: 
....................           setPosZ(); 
2860:  CALL    1B0A
....................           break; 
2864:  BRA     28A6
....................         case 3: 
....................           gripClose(); 
2866:  CALL    1BCA
....................           break; 
286A:  BRA     28A6
....................         case 4: 
....................           gripOpen(); 
286C:  CALL    1BF4
....................           break; 
2870:  BRA     28A6
....................         case 5: 
....................           gripRotate(); 
2872:  CALL    1FD6
....................           break; 
2876:  BRA     28A6
....................         case 6: 
....................           setAGains(); 
2878:  CALL    2510
....................           break; 
287C:  BRA     28A6
....................         case 7: 
....................           setBGains(); 
287E:  CALL    255C
....................           break; 
2882:  BRA     28A6
....................         case 8: 
....................           setZGains(); 
2884:  CALL    25A8
....................           break; 
2888:  BRA     28A6
....................         default: 
....................           printf("resend"); 
288A:  MOV     #0,W1
288C:  MOV     W1,W0
288E:  CLR.B   1
2890:  CALL    EC2
2894:  INC     W1,W1
2896:  BTSC.B  223.1
2898:  BRA     2896
289A:  MOV     W0,224
289C:  MOV     #5,W0
289E:  CPSGT   W1,W0
28A0:  BRA     288C
....................           getPackage = 0; 
28A2:  CLR     922
....................           break; 
28A4:  BRA     28A6
....................         } 
....................       } 
....................     } 
28A6:  BRA     27FE
....................   } 
.................... } 
28A8:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
