CCS PCD C Compiler, Version 5.015, 5967               19-Nov-18 15:57

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\SWT\project.lst

               ROM used:   7824 bytes (23%)
                           Largest free fragment is 22892
               RAM used:   424 (5%) at main() level
                           542 (7%) worst case
               Stack size: 128

*
0C00:  GOTO    27CC
*
0C24:  GOTO    EF2
*
0C50:  GOTO    FF6
*
0C74:  GOTO    F24
*
0C98:  GOTO    F56
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    6D,65,00
0E0A:  DATA    72,67,00
0E0C:  DATA    65,64,00
0E0E:  DATA    20,25,00
0E10:  DATA    64,20,00
0E12:  DATA    61,6E,00
0E14:  DATA    64,20,00
0E16:  DATA    25,64,00
0E18:  DATA    20,69,00
0E1A:  DATA    6E,74,00
0E1C:  DATA    6F,3A,00
0E1E:  DATA    20,25,00
0E20:  DATA    64,20,00
0E22:  DATA    0A,00,00
0E24:  CLR     32
0E26:  MOV     #E30,W3
0E28:  ADD     W3,W0,W0
0E2A:  TBLRDL.B[W0],W0L
0E2C:  CLR.B   1
0E2E:  RETURN  
0E30:  DATA    6D,65,00
0E32:  DATA    72,67,00
0E34:  DATA    65,64,00
0E36:  DATA    20,25,00
0E38:  DATA    64,20,00
0E3A:  DATA    61,6E,00
0E3C:  DATA    64,20,00
0E3E:  DATA    25,64,00
0E40:  DATA    20,69,00
0E42:  DATA    6E,74,00
0E44:  DATA    6F,3A,00
0E46:  DATA    20,25,00
0E48:  DATA    30,2E,00
0E4A:  DATA    32,66,00
0E4C:  DATA    0A,00,00
0E4E:  CLR     32
0E50:  MOV     #E5A,W3
0E52:  ADD     W3,W0,W0
0E54:  TBLRDL.B[W0],W0L
0E56:  CLR.B   1
0E58:  RETURN  
0E5A:  DATA    64,6F,00
0E5C:  DATA    6E,65,00
0E5E:  DATA    00,00,00
0E60:  CLR     32
0E62:  MOV     #E6C,W3
0E64:  ADD     W3,W0,W0
0E66:  TBLRDL.B[W0],W0L
0E68:  CLR.B   1
0E6A:  RETURN  
0E6C:  DATA    72,5F,00
0E6E:  DATA    61,20,00
0E70:  DATA    3D,20,00
0E72:  DATA    25,64,00
0E74:  DATA    0A,00,00
0E76:  CLR     32
0E78:  MOV     #E82,W3
0E7A:  ADD     W3,W0,W0
0E7C:  TBLRDL.B[W0],W0L
0E7E:  CLR.B   1
0E80:  RETURN  
0E82:  DATA    72,5F,00
0E84:  DATA    62,20,00
0E86:  DATA    3D,20,00
0E88:  DATA    25,64,00
0E8A:  DATA    0A,00,00
0E8C:  CLR     32
0E8E:  MOV     #E98,W3
0E90:  ADD     W3,W0,W0
0E92:  TBLRDL.B[W0],W0L
0E94:  CLR.B   1
0E96:  RETURN  
0E98:  DATA    70,6F,00
0E9A:  DATA    73,69,00
0E9C:  DATA    74,69,00
0E9E:  DATA    6F,6E,00
0EA0:  DATA    20,3D,00
0EA2:  DATA    20,25,00
0EA4:  DATA    64,2C,00
0EA6:  DATA    20,25,00
0EA8:  DATA    64,0A,00
0EAA:  DATA    00,00,00
0EAC:  CLR     32
0EAE:  MOV     #EB8,W3
0EB0:  ADD     W3,W0,W0
0EB2:  TBLRDL.B[W0],W0L
0EB4:  CLR.B   1
0EB6:  RETURN  
0EB8:  DATA    72,5F,00
0EBA:  DATA    7A,20,00
0EBC:  DATA    3D,20,00
0EBE:  DATA    25,64,00
0EC0:  DATA    00,00,00
0EC2:  CLR     32
0EC4:  MOV     #ECE,W3
0EC6:  ADD     W3,W0,W0
0EC8:  TBLRDL.B[W0],W0L
0ECA:  CLR.B   1
0ECC:  RETURN  
0ECE:  DATA    70,6F,00
0ED0:  DATA    73,69,00
0ED2:  DATA    74,69,00
0ED4:  DATA    6F,6E,00
0ED6:  DATA    20,3D,00
0ED8:  DATA    20,25,00
0EDA:  DATA    64,0A,00
0EDC:  DATA    00,00,00
0EDE:  CLR     32
0EE0:  MOV     #EEA,W3
0EE2:  ADD     W3,W0,W0
0EE4:  TBLRDL.B[W0],W0L
0EE6:  CLR.B   1
0EE8:  RETURN  
0EEA:  DATA    72,65,00
0EEC:  DATA    73,65,00
0EEE:  DATA    6E,64,00
0EF0:  DATA    00,00,00
*
12A2:  MOV     W6,[W15++]
12A4:  MOV     W7,[W15++]
12A6:  MOV     W8,[W15++]
12A8:  MOV     W9,[W15++]
12AA:  CLR     W4
12AC:  CLR     W5
12AE:  CLR     W6
12B0:  CLR     W7
12B2:  XOR     W2,W3,W8
12B4:  BRA     Z,12D8
12B6:  MOV     #20,W8
12B8:  BCLR.B  42.0
12BA:  RLC     W0,W0
12BC:  RLC     W1,W1
12BE:  RLC     W4,W4
12C0:  RLC     W5,W5
12C2:  CP      W5,W3
12C4:  BRA     NZ,12C8
12C6:  CPB     W4,W2
12C8:  BRA     NC,12D0
12CA:  SUB     W4,W2,W4
12CC:  SUBB    W5,W3,W5
12CE:  BSET.B  42.0
12D0:  RLC     W6,W6
12D2:  RLC     W7,W7
12D4:  DEC     W8,W8
12D6:  BRA     NZ,12B8
12D8:  MOV     W7,W1
12DA:  MOV     W6,W0
12DC:  MOV     [--W15],W9
12DE:  MOV     [--W15],W8
12E0:  MOV     [--W15],W7
12E2:  MOV     [--W15],W6
12E4:  RETURN  
12E6:  MOV     W5,[W15++]
12E8:  MOV     #C,W5
12EA:  REPEAT  #7
12EC:  MOV     [W5++],[W15++]
12EE:  BTSS    W1.F
12F0:  BRA     1300
12F2:  NEG     W0,W0
12F4:  BRA     Z,12F8
12F6:  BRA     NZ,12FC
12F8:  NEG     W1,W1
12FA:  BRA     12FE
12FC:  COM     W1,W1
12FE:  BSET    W4.8
1300:  CLR     W5
1302:  MOV     W0,W6
1304:  MOV     W1,W7
1306:  MOV     W4,W12
1308:  BCLR    W4.F
130A:  CP0.B   W4L
130C:  BRA     NZ,1310
130E:  BRA     1340
1310:  SUB.B   W4L,#B,W5L
1312:  BRA     NC,1340
1314:  SUB.B   W4L,W5L,W4L
1316:  BTSS    W12.F
1318:  BRA     1330
131A:  BTSS    W4.8
131C:  BRA     132C
131E:  MOV     #2D,W0
1320:  BTSC.B  223.1
1322:  BRA     1320
1324:  MOV     W0,224
1326:  BCLR    W4.8
1328:  DEC     W5,W5
132A:  BRA     N,1340
132C:  MOV     #30,W0
132E:  BRA     1332
1330:  MOV     #20,W0
1332:  BTSC.B  223.1
1334:  BRA     1332
1336:  MOV     W0,224
1338:  DEC     W5,W5
133A:  BRA     NN,1332
133C:  BTSC    W4.8
133E:  DEC.B   W4L,W4L
1340:  MOV     #E,W8
1342:  MOV     #0,W9
1344:  LNK     #10
1346:  MOV     W12,[W14+W8]
1348:  DEC2    W8,W8
134A:  BRA     NN,1346
134C:  MOV     W4,W5
134E:  MOV     #A,W4
1350:  BTSC    W5.8
1352:  INC     W4,W4
1354:  BSET    W5.E
1356:  BTSC    W12.F
1358:  BSET    W5.F
135A:  CP0.B   W5L
135C:  BRA     Z,1360
135E:  DEC.B   W5L,W5L
1360:  MOV     W4,[W14]
1362:  MOV     W5,[W14+#2]
1364:  MOV     W6,W0
1366:  MOV     W7,W1
1368:  MOV     #CA00,W2
136A:  MOV     #3B9A,W3
136C:  MOV     #2710,W8
136E:  BCLR    W13.F
1370:  BCLR.B  43.0
1372:  CALL    12A2
1376:  BTG     W13.F
1378:  BTSC    W13.F
137A:  BRA     138A
137C:  MOV     W0,[W14+#8]
137E:  MOV     W1,[W14+#A]
1380:  MOV     W0,W2
1382:  MOV     W1,W3
1384:  MOV     [W14+#4],W0
1386:  MOV     [W14+#6],W1
1388:  BRA     1370
138A:  MOV     W2,[W14+#8]
138C:  MOV     W3,[W14+#A]
138E:  MOV     W4,[W14+#4]
1390:  MOV     W5,[W14+#6]
1392:  MOV     [W14],W4
1394:  MOV     [W14+#2],W5
1396:  MOV     #30,W6
1398:  CP0     W0
139A:  BRA     NZ,13BE
139C:  BTSS    W5.E
139E:  BRA     13C2
13A0:  DEC     W4,W4
13A2:  MOV     W4,[W14]
13A4:  CP0     W4
13A6:  BRA     Z,13C2
13A8:  CP.B    W4L,W5L
13AA:  BRA     Z,13B0
13AC:  BTSC.B  42.0
13AE:  BRA     13E0
13B0:  BTSS    W5.F
13B2:  BRA     13BA
13B4:  BTSS    W5.8
13B6:  BRA     13D8
13B8:  BRA     13C8
13BA:  MOV     #20,W6
13BC:  BRA     13D8
13BE:  BCLR    W5.E
13C0:  MOV     W5,[W14+#2]
13C2:  MOV     [W14+#2],W5
13C4:  BTSS    W5.8
13C6:  BRA     13D8
13C8:  BCLR    W5.8
13CA:  MOV     W5,[W14+#2]
13CC:  MOV     W0,W10
13CE:  MOV     #2D,W0
13D0:  BTSC.B  223.1
13D2:  BRA     13D0
13D4:  MOV     W0,224
13D6:  MOV     W10,W0
13D8:  ADD.B   W6L,W0L,W0L
13DA:  BTSC.B  223.1
13DC:  BRA     13DA
13DE:  MOV     W0,224
13E0:  MOV     [W14+#8],W0
13E2:  MOV     [W14+#A],W1
13E4:  MOV     #A,W2
13E6:  CLR     W3
13E8:  CP      W0,#1
13EA:  BRA     Z,13EE
13EC:  BRA     1370
13EE:  ULNK    
13F0:  MOV     #1A,W5
13F2:  REPEAT  #7
13F4:  MOV     [--W15],[W5--]
13F6:  MOV     [--W15],W5
13F8:  RETURN  
*
14EA:  MOV     W5,[W15++]
14EC:  MOV     #C,W5
14EE:  REPEAT  #3
14F0:  MOV     [W5++],[W15++]
14F2:  BTSS    W0.F
14F4:  BRA     150E
14F6:  NEG     W0,W0
14F8:  BSET    W4.8
14FA:  BTSS    W4.F
14FC:  BRA     150E
14FE:  MOV     W0,[W15++]
1500:  MOV     #2D,W0
1502:  BTSC.B  223.1
1504:  BRA     1502
1506:  MOV     W0,224
1508:  MOV     [--W15],W0
150A:  BCLR    W4.8
150C:  DEC.B   0008
150E:  CLR     W5
1510:  MOV     W0,W7
1512:  MOV     W4,W9
1514:  BCLR    W4.F
1516:  CP0.B   W4L
1518:  BRA     NZ,1526
151A:  BTSC    W9.F
151C:  BRA     1522
151E:  MOV     #0,W5
1520:  BRA     1540
1522:  MOV     #0,W5
1524:  BRA     1540
1526:  SUB.B   W4L,#6,W5L
1528:  BRA     NC,153E
152A:  MOV     #30,W0
152C:  BTSS    W9.F
152E:  MOV     #20,W0
1530:  BTSC.B  223.1
1532:  BRA     1530
1534:  MOV     W0,224
1536:  DEC     W5,W5
1538:  BRA     NN,1530
153A:  MOV     #5,W5
153C:  BRA     1540
153E:  MOV     W4,W5
1540:  MOV     #6,W4
1542:  BTSC    W5.8
1544:  INC     W4,W4
1546:  BSET    W5.E
1548:  BTSC    W9.F
154A:  BSET    W5.F
154C:  MOV     #2710,W8
154E:  REPEAT  #11
1550:  DIV.U   W7,W8
1552:  CALL    1596
1556:  MOV     W1,W7
1558:  MOV     #3E8,W8
155A:  REPEAT  #11
155C:  DIV.U   W7,W8
155E:  CALL    1596
1562:  MOV     W1,W7
1564:  MOV     #64,W8
1566:  REPEAT  #11
1568:  DIV.U   W7,W8
156A:  CALL    1596
156E:  MOV     W1,W7
1570:  MOV     #A,W8
1572:  REPEAT  #11
1574:  DIV.U   W7,W8
1576:  CALL    1596
157A:  BTSS    W9.8
157C:  BRA     1588
157E:  MOV     #2D,W0
1580:  BTSC.B  223.1
1582:  BRA     1580
1584:  MOV     W0,224
1586:  BCLR    W9.8
1588:  MOV     #30,W0
158A:  ADD.B   W1L,W0L,W0L
158C:  MOV     W0,2A
158E:  BTSC.B  223.1
1590:  BRA     158E
1592:  MOV     W0,224
1594:  BRA     15D6
1596:  MOV     #30,W6
1598:  CP0     W0
159A:  BRA     NZ,15B8
159C:  BTSS    W5.E
159E:  BRA     15CC
15A0:  DEC     W4,W4
15A2:  CP.B    W4L,W5L
15A4:  BRA     Z,15AA
15A6:  BTSC.B  42.0
15A8:  RETURN  
15AA:  CP0     W0
15AC:  BRA     NZ,15B8
15AE:  BTSS    W5.E
15B0:  BRA     15CC
15B2:  BTSS    W5.F
15B4:  MOV     #20,W6
15B6:  BRA     15CC
15B8:  BCLR    W5.E
15BA:  BTSS    W9.8
15BC:  BRA     15CC
15BE:  MOV     W0,W10
15C0:  MOV     #2D,W0
15C2:  BTSC.B  223.1
15C4:  BRA     15C2
15C6:  MOV     W0,224
15C8:  BCLR    W9.8
15CA:  MOV     W10,W0
15CC:  ADD.B   W6L,W0L,W0L
15CE:  BTSC.B  223.1
15D0:  BRA     15CE
15D2:  MOV     W0,224
15D4:  RETURN  
15D6:  MOV     #12,W5
15D8:  REPEAT  #3
15DA:  MOV     [--W15],[W5--]
15DC:  MOV     [--W15],W5
15DE:  RETURN  
*
1676:  MOV     W5,[W15++]
1678:  MOV     W6,[W15++]
167A:  MOV     W0,W4
167C:  MOV     W1,W5
167E:  CLR     W0
1680:  CLR     W1
1682:  BCLR    W6.0
1684:  BTSS    W5.F
1686:  BRA     1694
1688:  BSET    W6.0
168A:  NEG     W4,W4
168C:  BRA     Z,1692
168E:  COM     W5,W5
1690:  BRA     1694
1692:  NEG     W5,W5
1694:  IOR      W4,  W5,W3
1696:  BRA     Z,16BE
1698:  CLR     W2
169A:  MOV     #B6,W1
169C:  BTSC    W2.7
169E:  BRA     16AE
16A0:  BCLR.B  42.0
16A2:  RLC     W4,W4
16A4:  RLC     W5,W5
16A6:  RLC     W0,W0
16A8:  RLC     W2,W2
16AA:  DEC     W1,W1
16AC:  BRA     NZ,169C
16AE:  SWAP    W1
16B0:  BCLR.B  42.0
16B2:  RRC     W1,W1
16B4:  BCLR    W1.F
16B6:  BCLR    W2.7
16B8:  XOR.B   W2L,W1L,W1L
16BA:  BTSC    W6.0
16BC:  BSET    W1.F
16BE:  MOV     [--W15],W6
16C0:  MOV     [--W15],W5
16C2:  RETURN  
16C4:  MOV     W5,[W15++]
16C6:  MOV     #C,W5
16C8:  REPEAT  #4
16CA:  MOV     [W5++],[W15++]
16CC:  MOV     W0,W4
16CE:  MOV     W1,W5
16D0:  MOV     W3,W7
16D2:  MOV     W2,W6
16D4:  BCLR.B  42.0
16D6:  BCLR.B  42.1
16D8:  RLC     W1,W1
16DA:  SWAP    W1
16DC:  AND     #FF,W1
16DE:  CP0     W1
16E0:  BRA     Z,1778
16E2:  BCLR.B  42.0
16E4:  BCLR.B  42.1
16E6:  RLC     W3,W3
16E8:  SWAP    W3
16EA:  AND     #FF,W3
16EC:  CP0     W3
16EE:  BRA     Z,1778
16F0:  ZE      W0,W0
16F2:  ADD.B   W3L,W1L,W0L
16F4:  BRA     C,16FE
16F6:  SUB     #7F,W0
16F8:  BRA     Z,1778
16FA:  BRA     NC,1778
16FC:  BRA     1702
16FE:  ADD.B   #81,W0L
1700:  BRA     C,1778
1702:  XOR     W5,W7,W10
1704:  BCLR.B  42.0
1706:  BCLR.B  42.1
1708:  AND     #FF,W5
170A:  BSET    W5.7
170C:  BCLR.B  42.0
170E:  AND     #FF,W7
1710:  BSET    W7.7
1712:  MUL.UU  W4,W6,W2
1714:  MUL.UU  W5,W6,W8
1716:  ADDC    W8,W3,W3
1718:  MOV     W9,W1
171A:  BTSC.B  42.0
171C:  INC     W1,W1
171E:  BCLR.B  42.0
1720:  MUL.UU  W7,W4,W8
1722:  ADDC    W8,W3,W3
1724:  ADDC    W9,W1,W1
1726:  MUL.UU  W5,W7,W8
1728:  ADDC    W8,W1,W1
172A:  INC     W0,W0
172C:  CP0     W1
172E:  BTSC.B  42.1
1730:  BRA     1734
1732:  BRA     173A
1734:  CP0     W3
1736:  BTSC.B  42.1
1738:  BRA     1744
173A:  BTSC    W1.F
173C:  BRA     1744
173E:  RLC     W3,W3
1740:  RLC     W1,W1
1742:  DEC     W0,W0
1744:  MOV     W1,W2
1746:  BCLR.B  42.0
1748:  BTSS    W3.7
174A:  BRA     175E
174C:  MOV     #FF00,W7
174E:  AND     W3,W7,W3
1750:  ADD     #100,W3
1752:  ADDC    W2,#0,W2
1754:  CP0     W2
1756:  BRA     NZ,175E
1758:  CP0     W3
175A:  BRA     NZ,175E
175C:  INC     W0,W0
175E:  SWAP    W0
1760:  BCLR.B  42.0
1762:  BCLR.B  42.1
1764:  RRC     W0,W1
1766:  BTSC    W10.F
1768:  BSET    W1.F
176A:  BCLR    W2.F
176C:  SWAP    W2
176E:  XOR.B   W2L,W1L,W1L
1770:  SWAP    W3
1772:  MOV.B   W3L,W2L
1774:  MOV     W2,W0
1776:  BRA     177E
1778:  MOV     #0,W0
177A:  MOV     #0,W1
177C:  BRA     177E
177E:  MOV     #14,W5
1780:  REPEAT  #4
1782:  MOV     [--W15],[W5--]
1784:  MOV     [--W15],W5
1786:  RETURN  
1788:  MOV     W5,[W15++]
178A:  MOV     #C,W5
178C:  REPEAT  #3
178E:  MOV     [W5++],[W15++]
1790:  CLR     W9
1792:  MOV     #8000,W8
1794:  BTSC.B  43.0
1796:  XOR     W8,W3,W3
1798:  CP0     W0
179A:  BRA     NZ,17A2
179C:  MOV     #7FFF,W10
179E:  AND     W1,W10,W10
17A0:  BTSS.B  42.1
17A2:  MOV     W1,W10
17A4:  XOR     W3,W10,W11
17A6:  MOV     W1,W6
17A8:  MOV     W3,W7
17AA:  MOV     W3,W12
17AC:  BCLR.B  42.1
17AE:  BCLR.B  42.0
17B0:  RLC     W6,W6
17B2:  SWAP    W6
17B4:  AND     #FF,W6
17B6:  CP0     W6
17B8:  BRA     Z,18FC
17BA:  BCLR.B  42.1
17BC:  BCLR.B  42.0
17BE:  RLC     W7,W7
17C0:  SWAP    W7
17C2:  AND     #FF,W7
17C4:  CP0     W7
17C6:  BRA     Z,1906
17C8:  BCLR.B  42.1
17CA:  BCLR.B  42.0
17CC:  CP      W7,W6
17CE:  BRA     Z,1908
17D0:  BRA     N,1918
17D2:  BCLR    W9.0
17D4:  BSET    W9.1
17D6:  SUB     W7,W6,W8
17D8:  MOV     W7,W6
17DA:  AND     #FF,W1
17DC:  BSET    W1.7
17DE:  AND     #FF,W3
17E0:  BSET    W3.7
17E2:  MOV     #28,W7
17E4:  CP      W7,W8
17E6:  BRA     N,180A
17E8:  BCLR.B  42.1
17EA:  BCLR.B  42.0
17EC:  RRC     W1,W1
17EE:  RRC     W0,W0
17F0:  DEC     W8,W8
17F2:  BRA     NZ,17E8
17F4:  BRA     1810
17F6:  MOV     #28,W7
17F8:  CP      W7,W8
17FA:  BRA     N,180E
17FC:  BCLR.B  42.1
17FE:  BCLR.B  42.0
1800:  RRC     W3,W3
1802:  RRC     W2,W2
1804:  DEC     W8,W8
1806:  BRA     NZ,17FC
1808:  BRA     1828
180A:  MOV     W2,W0
180C:  MOV     W3,W1
180E:  BRA     1896
1810:  BTSS    W11.F
1812:  BRA     1836
1814:  BTSC    W9.4
1816:  MOV     W12,W11
1818:  NEG     W0,W0
181A:  BRA     Z,1820
181C:  COM.B   W1L,W1L
181E:  BRA     1822
1820:  NEG     W1,W1
1822:  BTSC    W9.4
1824:  BRA     187C
1826:  BRA     1836
1828:  BTSS    W11.F
182A:  BRA     1836
182C:  NEG     W2,W2
182E:  BRA     Z,1834
1830:  COM.B   W3L,W3L
1832:  BRA     1836
1834:  NEG     W3,W3
1836:  AND     #FF,W5
1838:  BCLR.B  42.1
183A:  BCLR.B  42.0
183C:  ADD     W0,W2,W0
183E:  ADDC.B  W1L,W3L,W1L
1840:  BTSC.B  42.0
1842:  BSET    W9.3
1844:  BTSC    W9.0
1846:  BRA     185A
1848:  BTSC    W9.1
184A:  BRA     184E
184C:  BRA     1864
184E:  BTSC    W11.F
1850:  BRA     187C
1852:  BTSC    W9.3
1854:  BRA     18A8
1856:  BSET    W9.6
1858:  BRA     1896
185A:  BTSC    W11.F
185C:  BRA     187C
185E:  BTSC    W9.3
1860:  BRA     18A8
1862:  BRA     1896
1864:  BCLR    W9.2
1866:  BTSC    W11.F
1868:  BRA     1872
186A:  MOV     W10,W11
186C:  BTSC    W9.3
186E:  BRA     18A8
1870:  BRA     18DE
1872:  BSET    W9.4
1874:  XOR.B   #80,W1L
1876:  BTSC    W1.7
1878:  BRA     1814
187A:  MOV     W10,W11
187C:  AND     #FF,W1
187E:  IOR      W0,  W1,W7
1880:  BRA     Z,1896
1882:  BTSC    W1.7
1884:  BRA     1896
1886:  BCLR.B  42.1
1888:  BCLR.B  42.0
188A:  RLC     W0,W0
188C:  RLC     W1,W1
188E:  DEC     W6,W6
1890:  BTSC.B  42.1
1892:  BRA     18F6
1894:  BRA     1882
1896:  BTSC    W9.0
1898:  MOV     W10,W11
189A:  BTSC    W9.1
189C:  MOV     W12,W11
189E:  BTSS    W9.5
18A0:  BRA     18D6
18A2:  BTSC    W10.F
18A4:  BSET    W0.8
18A6:  BRA     18DE
18A8:  BSET.B  42.0
18AA:  RRC.B   W1L,W1L
18AC:  RRC     W0,W0
18AE:  BTSC.B  42.0
18B0:  BSET    W9.5
18B2:  INC     W6,W6
18B4:  BRA     Z,18F6
18B6:  BTSS    W9.5
18B8:  BRA     18CA
18BA:  INC     W0,W0
18BC:  BRA     NZ,18CA
18BE:  INC.B   W1L,W1L
18C0:  BRA     NZ,18CA
18C2:  RRC.B   W1L,W1L
18C4:  RRC     W0,W0
18C6:  INC     W6,W6
18C8:  BRA     Z,18F6
18CA:  BTSC    W9.0
18CC:  MOV     W10,W11
18CE:  BTSC    W9.1
18D0:  MOV     W12,W11
18D2:  BTSC.B  42.1
18D4:  BRA     18F6
18D6:  BTSC    W9.6
18D8:  MOV     W10,W11
18DA:  BTSC    W9.7
18DC:  MOV     W12,W11
18DE:  IOR      W0,  W1,W2
18E0:  BRA     Z,1928
18E2:  BCLR    W1.7
18E4:  SWAP    W6
18E6:  BCLR.B  42.1
18E8:  BCLR.B  42.0
18EA:  RRC     W6,W6
18EC:  XOR     W6,W1,W1
18EE:  BSET    W1.F
18F0:  BTSS    W11.F
18F2:  BCLR    W1.F
18F4:  BRA     1928
18F6:  MOV     #0,W0
18F8:  MOV     #0,W1
18FA:  BRA     1928
18FC:  BTSC    W10.F
18FE:  XOR     W8,W3,W3
1900:  MOV     W2,W0
1902:  MOV     W3,W1
1904:  BRA     1928
1906:  BRA     1928
1908:  AND     #FF,W3
190A:  BSET    W3.7
190C:  AND     #FF,W1
190E:  BSET    W1.7
1910:  BTSC    W11.F
1912:  BCLR    W3.7
1914:  BSET    W9.2
1916:  BRA     1828
1918:  SUB     W6,W7,W8
191A:  AND     #FF,W1
191C:  BSET    W1.7
191E:  AND     #FF,W3
1920:  BSET    W3.7
1922:  BCLR    W9.1
1924:  BSET    W9.0
1926:  BRA     17F6
1928:  MOV     #12,W5
192A:  REPEAT  #3
192C:  MOV     [--W15],[W5--]
192E:  MOV     [--W15],W5
1930:  RETURN  
1932:  MOV     W0,W2
1934:  MOV     W1,W3
1936:  MOV.B   W1L,W0L
1938:  SWAP    W0
193A:  BSET    W0.F
193C:  RLC     W1,W1
193E:  SWAP    W1
1940:  ZE      W1,W1
1942:  MOV     #8E,W4
1944:  SUB.B   W4L,W1L,W1L
1946:  BRA     Z,1954
1948:  CP0     W0
194A:  BRA     Z,1954
194C:  BCLR.B  42.0
194E:  RRC     W0,W0
1950:  DEC     W1,W1
1952:  BRA     NZ,1948
1954:  BTSS    W3.F
1956:  BRA     195C
1958:  NEG     W0,W0
195A:  BRA     195C
195C:  RETURN  
*
1D90:  MOV     W5,[W15++]
1D92:  MOV     #C,W5
1D94:  REPEAT  #3
1D96:  MOV     [W5++],[W15++]
1D98:  MOV     W0,W4
1D9A:  MOV     W1,W5
1D9C:  MOV     W2,W6
1D9E:  MOV     W3,W7
1DA0:  CLR     W0
1DA2:  CLR     W1
1DA4:  CLR     W2
1DA6:  CLR     W3
1DA8:  BCLR    W8.0
1DAA:  BTSS    W7.F
1DAC:  BRA     1DB8
1DAE:  BSET    W8.0
1DB0:  NEG     W4,W4
1DB2:  COM     W5,W5
1DB4:  COM     W6,W6
1DB6:  COM     W7,W7
1DB8:  IOR      W4,  W5,W9
1DBA:  BRA     NZ,1DC0
1DBC:  IOR      W6,  W7,W9
1DBE:  BRA     Z,1DEA
1DC0:  MOV     #473,W9
1DC2:  BTSC    W3.4
1DC4:  BRA     1DDC
1DC6:  BCLR.B  42.0
1DC8:  RLC     W4,W4
1DCA:  RLC     W5,W5
1DCC:  RLC     W6,W6
1DCE:  RLC     W7,W7
1DD0:  RLC     W0,W0
1DD2:  RLC     W1,W1
1DD4:  RLC     W2,W2
1DD6:  RLC     W3,W3
1DD8:  DEC     W9,W9
1DDA:  BRA     NZ,1DC2
1DDC:  SL      W9,#4,W9
1DDE:  BCLR.B  42.0
1DE0:  BCLR    W9.F
1DE2:  BCLR    W3.4
1DE4:  XOR     W9,W3,W3
1DE6:  BTSC    W8.0
1DE8:  BSET    W3.F
1DEA:  MOV     #12,W5
1DEC:  REPEAT  #3
1DEE:  MOV     [--W15],[W5--]
1DF0:  MOV     [--W15],W5
1DF2:  RETURN  
1DF4:  MOV     W8,[W15++]
1DF6:  MOV     #12,W8
1DF8:  REPEAT  #4
1DFA:  MOV     [W8++],[W15++]
1DFC:  CLR     W11
1DFE:  MUL.UU  W12,#0,W12
1E00:  MOV     W3,W8
1E02:  MOV     W7,W9
1E04:  MOV     #7FF,W10
1E06:  BCLR.B  42.0
1E08:  BCLR.B  42.1
1E0A:  ASR     W8,#4,W8
1E0C:  AND     W10,W8,W8
1E0E:  CP0     W8
1E10:  BRA     Z,1EF4
1E12:  BCLR.B  42.0
1E14:  BCLR.B  42.1
1E16:  ASR     W9,#4,W9
1E18:  AND     W10,W9,W9
1E1A:  CP0     W9
1E1C:  BRA     Z,1EF4
1E1E:  ADD     W9,W8,W8
1E20:  BTSC    W9.B
1E22:  BRA     1E2C
1E24:  SUB     #3FF,W8
1E26:  BRA     Z,1EF4
1E28:  BRA     NC,1EF4
1E2A:  BRA     1E32
1E2C:  MOV     #401,W10
1E2E:  ADD.B   W10L,W5L,W5L
1E30:  BRA     C,1EF4
1E32:  XOR     W3,W7,W13
1E34:  BCLR.B  42.0
1E36:  BCLR.B  42.1
1E38:  AND     #F,W3
1E3A:  BSET    W3.4
1E3C:  AND     #F,W7
1E3E:  BSET    W7.4
1E40:  MOV     W8,[W15++]
1E42:  MUL.UU  W4,W1,W8
1E44:  MUL.UU  W5,W0,W10
1E46:  ADD     W8,W10,W10
1E48:  ADDC    W9,W11,W11
1E4A:  ADDC    #0,W12
1E4C:  MUL.UU  W4,W2,W8
1E4E:  ADD     W8,W11,W11
1E50:  ADDC    W9,W12,W12
1E52:  MUL.UU  W5,W1,W8
1E54:  CLR     W10
1E56:  ADD     W8,W11,W11
1E58:  ADDC    W9,W12,W12
1E5A:  ADDC    #0,W10
1E5C:  MUL.UU  W6,W0,W8
1E5E:  ADD     W8,W11,W11
1E60:  ADDC    W9,W12,W12
1E62:  ADDC    #0,W10
1E64:  CLR     W11
1E66:  MUL.UU  W4,W3,W8
1E68:  ADD     W8,W12,W12
1E6A:  ADDC    W9,W10,W10
1E6C:  ADDC    #0,W11
1E6E:  MUL.UU  W5,W2,W8
1E70:  ADD     W8,W12,W12
1E72:  ADDC    W9,W10,W10
1E74:  ADDC    #0,W11
1E76:  MUL.UU  W6,W1,W8
1E78:  ADD     W8,W12,W12
1E7A:  ADDC    W9,W10,W10
1E7C:  ADDC    #0,W11
1E7E:  MUL.UU  W7,W0,W8
1E80:  ADD     W8,W12,W12
1E82:  ADDC    W9,W10,W10
1E84:  ADDC    #0,W11
1E86:  MOV     W12,W0
1E88:  CLR     W12
1E8A:  MUL.UU  W5,W3,W8
1E8C:  ADD     W8,W10,W10
1E8E:  ADDC    W9,W11,W11
1E90:  ADDC    #0,W12
1E92:  MUL.UU  W6,W2,W8
1E94:  ADD     W8,W10,W10
1E96:  ADDC    W9,W11,W11
1E98:  ADDC    #0,W12
1E9A:  MUL.UU  W6,W3,W8
1E9C:  ADD     W8,W11,W11
1E9E:  ADDC    W9,W12,W12
1EA0:  MUL.UU  W7,W1,W8
1EA2:  ADD     W8,W10,W10
1EA4:  ADDC    W9,W11,W11
1EA6:  ADDC    #0,W12
1EA8:  MUL.UU  W7,W2,W8
1EAA:  ADD     W8,W11,W11
1EAC:  ADDC    W9,W12,W12
1EAE:  MUL.UU  W7,W3,W8
1EB0:  ADD     W8,W12,W12
1EB2:  MOV     W10,W1
1EB4:  MOV     W11,W2
1EB6:  MOV     W12,W3
1EB8:  MOV     #5,W4
1EBA:  BCLR.B  42.0
1EBC:  RRC     W3,W3
1EBE:  RRC     W2,W2
1EC0:  RRC     W1,W1
1EC2:  RRC     W0,W0
1EC4:  DEC     W4,W4
1EC6:  BRA     NZ,1EBA
1EC8:  MOV     [--W15],W8
1ECA:  INC     W8,W8
1ECC:  IOR      W0,  W1,W6
1ECE:  BRA     Z,1ED2
1ED0:  BRA     1ED6
1ED2:  IOR      W2,  W3,W6
1ED4:  BRA     Z,1EE6
1ED6:  BTSC    W3.4
1ED8:  BRA     1EE6
1EDA:  BCLR.B  42.0
1EDC:  RLC     W0,W0
1EDE:  RLC     W1,W1
1EE0:  RLC     W2,W2
1EE2:  RLC     W3,W3
1EE4:  DEC     W8,W8
1EE6:  SL      W8,#4,W8
1EE8:  BCLR    W3.F
1EEA:  BTSC    W13.F
1EEC:  BSET    W3.F
1EEE:  BCLR    W3.4
1EF0:  XOR     W8,W3,W3
1EF2:  BRA     1EFA
1EF4:  MUL.UU  W0,#0,W0
1EF6:  MUL.UU  W0,#0,W2
1EF8:  BRA     1EFA
1EFA:  MOV     #1A,W8
1EFC:  REPEAT  #4
1EFE:  MOV     [--W15],[W8--]
1F00:  MOV     [--W15],W8
1F02:  RETURN  
1F04:  MOV     W8,[W15++]
1F06:  MOV     #12,W8
1F08:  REPEAT  #4
1F0A:  MOV     [W8++],[W15++]
1F0C:  MOV     #8000,W8
1F0E:  BTSC.B  43.0
1F10:  XOR     W8,W7,W7
1F12:  CP0     W0
1F14:  BRA     NZ,1F24
1F16:  CP0     W1
1F18:  BRA     NZ,1F24
1F1A:  CP0     W2
1F1C:  BRA     NZ,1F24
1F1E:  MOV     #7FFF,W10
1F20:  AND     W3,W10,W10
1F22:  BTSS.B  42.1
1F24:  MOV     W3,W10
1F26:  XOR     W7,W10,W11
1F28:  MOV     W3,W8
1F2A:  MOV     W7,W9
1F2C:  MOV     W7,W12
1F2E:  MOV     #7FF,W13
1F30:  BCLR.B  42.1
1F32:  BCLR.B  42.0
1F34:  ASR     W8,#4,W8
1F36:  AND     W13,W8,W8
1F38:  CP0     W8
1F3A:  BRA     Z,20B4
1F3C:  BCLR.B  42.1
1F3E:  BCLR.B  42.0
1F40:  ASR     W9,#4,W9
1F42:  AND     W13,W9,W9
1F44:  CP0     W9
1F46:  BRA     Z,20C4
1F48:  CLR     W13
1F4A:  BCLR.B  42.1
1F4C:  BCLR.B  42.0
1F4E:  CP      W9,W8
1F50:  BRA     Z,20C6
1F52:  BRA     N,20D6
1F54:  BCLR    W13.0
1F56:  BSET    W13.1
1F58:  SUB     W9,W8,W8
1F5A:  AND     #F,W3
1F5C:  BSET    W3.4
1F5E:  AND     #F,W7
1F60:  BSET    W7.4
1F62:  SUB     #34,W8
1F64:  BRA     NN,1F92
1F66:  ADD     #34,W8
1F68:  BCLR.B  42.1
1F6A:  BCLR.B  42.0
1F6C:  RRC     W3,W3
1F6E:  RRC     W2,W2
1F70:  RRC     W1,W1
1F72:  RRC     W0,W0
1F74:  DEC     W8,W8
1F76:  BRA     NZ,1F68
1F78:  BRA     1FA2
1F7A:  SUB     #34,W8
1F7C:  BRA     NN,1F9C
1F7E:  ADD     #34,W8
1F80:  BCLR.B  42.1
1F82:  BCLR.B  42.0
1F84:  RRC     W7,W7
1F86:  RRC     W6,W6
1F88:  RRC     W5,W5
1F8A:  RRC     W4,W4
1F8C:  DEC     W8,W8
1F8E:  BRA     NZ,1F80
1F90:  BRA     1FC8
1F92:  MOV     W4,W0
1F94:  MOV     W5,W1
1F96:  MOV     W6,W2
1F98:  MOV     W7,W3
1F9A:  XOR     W11,W12,W12
1F9C:  BTSC    W12.F
1F9E:  BTG     W11.F
1FA0:  BRA     2094
1FA2:  BTSS    W11.F
1FA4:  BRA     1FE4
1FA6:  BTSC    W13.4
1FA8:  MOV     W12,W11
1FAA:  COM     W0,W0
1FAC:  COM     W1,W1
1FAE:  COM     W2,W2
1FB0:  COM.B   W3L,W3L
1FB2:  AND.B   #1F,W3L
1FB4:  INC     W0,W0
1FB6:  BRA     NZ,1FC2
1FB8:  INC     W1,W1
1FBA:  BRA     NZ,1FC2
1FBC:  INC     W2,W2
1FBE:  BRA     NZ,1FC2
1FC0:  INC.B   W3L,W3L
1FC2:  BTSC    W13.4
1FC4:  BRA     202A
1FC6:  BRA     1FE4
1FC8:  BTSS    W11.F
1FCA:  BRA     1FE4
1FCC:  COM     W4,W4
1FCE:  COM     W5,W5
1FD0:  COM     W6,W6
1FD2:  COM.B   W7L,W7L
1FD4:  AND.B   #1F,W7L
1FD6:  INC     W4,W4
1FD8:  BRA     NZ,1FE4
1FDA:  INC     W5,W5
1FDC:  BRA     NZ,1FE4
1FDE:  INC     W6,W6
1FE0:  BRA     NZ,1FE4
1FE2:  INC.B   W7L,W7L
1FE4:  BCLR.B  42.1
1FE6:  BCLR.B  42.0
1FE8:  ADD     W0,W4,W0
1FEA:  ADDC    W1,W5,W1
1FEC:  ADDC    W2,W6,W2
1FEE:  ADDC.B  W3L,W7L,W3L
1FF0:  BTSC    W3.5
1FF2:  BSET    W13.3
1FF4:  BTSC    W13.0
1FF6:  BRA     200A
1FF8:  BTSC    W13.1
1FFA:  BRA     1FFE
1FFC:  BRA     2014
1FFE:  BTSC    W11.F
2000:  BRA     202A
2002:  BTSC    W13.3
2004:  BRA     2058
2006:  BSET    W13.6
2008:  BRA     204C
200A:  BTSC    W11.F
200C:  BRA     202A
200E:  BTSC    W13.3
2010:  BRA     2058
2012:  BRA     204C
2014:  BTSC    W11.F
2016:  BRA     2020
2018:  MOV     W10,W11
201A:  BTSC    W13.3
201C:  BRA     2058
201E:  BRA     2094
2020:  BSET    W13.4
2022:  XOR.B   #10,W3L
2024:  BTSC    W3.4
2026:  BRA     1FA6
2028:  MOV     W10,W11
202A:  AND     #1F,W3
202C:  IOR      W3,  W2,W8
202E:  BRA     NZ,2034
2030:  IOR      W1,  W0,W8
2032:  BRA     Z,204C
2034:  BTSC    W3.4
2036:  BRA     204C
2038:  BCLR.B  42.1
203A:  BCLR.B  42.0
203C:  RLC     W0,W0
203E:  RLC     W1,W1
2040:  RLC     W2,W2
2042:  RLC     W3,W3
2044:  DEC     W9,W9
2046:  BTSC.B  42.1
2048:  BRA     20AE
204A:  BRA     2034
204C:  BTSC    W13.0
204E:  MOV     W10,W11
2050:  BTSC    W13.1
2052:  MOV     W12,W11
2054:  BTSS    W13.5
2056:  BRA     2094
2058:  BCLR.B  42.0
205A:  RRC.B   W3L,W3L
205C:  RRC     W2,W2
205E:  RRC     W1,W1
2060:  RRC     W0,W0
2062:  BTSC.B  42.0
2064:  BSET    W13.5
2066:  INC     W9,W9
2068:  BTSC.B  42.1
206A:  BRA     20AE
206C:  BTSS    W13.5
206E:  BRA     208C
2070:  INC     W0,W0
2072:  BRA     NZ,208C
2074:  INC     W1,W1
2076:  BRA     NZ,208C
2078:  INC     W2,W2
207A:  BRA     NZ,208C
207C:  INC     W3,W3
207E:  BRA     NZ,208C
2080:  RRC.B   W3L,W3L
2082:  RRC     W2,W2
2084:  RRC     W1,W1
2086:  RRC     W0,W0
2088:  INC     W9,W9
208A:  BRA     Z,20AE
208C:  BTSC    W13.0
208E:  MOV     W10,W11
2090:  BTSC    W13.1
2092:  MOV     W12,W11
2094:  IOR      W0,  W1,W4
2096:  BRA     NZ,209C
2098:  IOR      W2,  W3,W4
209A:  BRA     Z,20E8
209C:  BCLR    W3.4
209E:  BCLR.B  42.1
20A0:  BCLR.B  42.0
20A2:  SL      W9,#4,W9
20A4:  XOR     W9,W3,W3
20A6:  BSET    W3.F
20A8:  BTSS    W11.F
20AA:  BCLR    W3.F
20AC:  BRA     20E8
20AE:  MUL.UU  W0,#0,W0
20B0:  MUL.UU  W2,#0,W2
20B2:  BRA     20E8
20B4:  MOV     #8000,W8
20B6:  BTSC    W10.F
20B8:  XOR     W8,W7,W7
20BA:  MOV     W5,W1
20BC:  MOV     W4,W0
20BE:  MOV     W6,W2
20C0:  MOV     W7,W3
20C2:  BRA     20E8
20C4:  BRA     20E8
20C6:  AND     #F,W7
20C8:  BSET    W7.4
20CA:  AND     #F,W3
20CC:  BSET    W3.4
20CE:  BTSC    W11.F
20D0:  BCLR    W7.4
20D2:  BSET    W13.2
20D4:  BRA     1FC8
20D6:  AND     #F,W3
20D8:  BSET    W3.4
20DA:  AND     #F,W7
20DC:  BSET    W7.4
20DE:  SUB     W8,W9,W8
20E0:  ADD     W8,W9,W9
20E2:  BCLR    W13.1
20E4:  BSET    W13.0
20E6:  BRA     1F7A
20E8:  MOV     #1A,W8
20EA:  REPEAT  #4
20EC:  MOV     [--W15],[W8--]
20EE:  MOV     [--W15],W8
20F0:  RETURN  
20F2:  MOV     W5,[W15++]
20F4:  MOV     #C,W5
20F6:  REPEAT  #5
20F8:  MOV     [W5++],[W15++]
20FA:  MOV     W3,W8
20FC:  MOV     W2,W7
20FE:  MOV     W1,W6
2100:  MOV     W0,W5
2102:  MOV     W3,W9
2104:  MOV     #473,W11
2106:  ASR     W3,#4,W3
2108:  MOV     #7FF,W10
210A:  AND     W10,W3,W3
210C:  SUB     W11,W3,W11
210E:  AND     #1F,W8
2110:  BSET    W8.4
2112:  CLR     W0
2114:  CLR     W1
2116:  CLR     W2
2118:  CLR     W3
211A:  BCLR.B  42.0
211C:  RRC     W8,W8
211E:  RRC     W7,W7
2120:  RRC     W6,W6
2122:  RRC     W5,W5
2124:  RRC     W3,W3
2126:  RRC     W2,W2
2128:  RRC     W1,W1
212A:  RRC     W0,W0
212C:  DEC     W11,W11
212E:  BRA     NZ,211A
2130:  BTSS    W9.F
2132:  BRA     213E
2134:  NEG     W0,W0
2136:  COM     W1,W1
2138:  COM     W2,W2
213A:  COM     W3,W3
213C:  BRA     213E
213E:  MOV     #16,W5
2140:  REPEAT  #5
2142:  MOV     [--W15],[W5--]
2144:  MOV     [--W15],W5
2146:  RETURN  
*
220A:  MOV     W5,[W15++]
220C:  MOV     W6,[W15++]
220E:  MOV     #8E,W1
2210:  CP0     W0
2212:  BRA     Z,2238
2214:  BTSC    W0.F
2216:  BRA     2220
2218:  BCLR.B  42.0
221A:  RLC     W0,W0
221C:  DEC     W1,W1
221E:  BRA     2214
2220:  SWAP    W1
2222:  BCLR.B  42.0
2224:  RRC     W1,W1
2226:  BCLR    W0.F
2228:  SWAP    W0
222A:  XOR.B   W0L,W1L,W1L
222C:  AND.B   #0,W0L
222E:  BRA     223E
2230:  MOV.B   W1L,W0L
2232:  BSET    W1.7
2234:  AND.B   #0,W1L
2236:  BRA     223E
2238:  CLR     W0
223A:  CLR     W1
223C:  BRA     223E
223E:  MOV     [--W15],W6
2240:  MOV     [--W15],W5
2242:  RETURN  
2244:  MOV     W5,[W15++]
2246:  MOV     #C,W5
2248:  REPEAT  #4
224A:  MOV     [W5++],[W15++]
224C:  CLR     W9
224E:  XOR     W1,W3,W9
2250:  MOV     W1,W6
2252:  MOV     W0,W5
2254:  MOV     W3,W8
2256:  MOV     W2,W7
2258:  RLC     W1,W1
225A:  SWAP    W1
225C:  ZE      W1,W1
225E:  CP0     W1
2260:  BRA     Z,22FE
2262:  RLC     W3,W3
2264:  SWAP    W3
2266:  ZE      W3,W3
2268:  CP0     W3
226A:  BRA     Z,22FE
226C:  CLR     W0
226E:  SUB.B   W1L,W3L,W0L
2270:  BRA     NC,2278
2272:  ADD.B   #7F,W0L
2274:  BRA     C,22FE
2276:  BRA     227E
2278:  SUB.B   #81,W0L
227A:  BRA     NC,22FE
227C:  BRA     Z,22FE
227E:  MOV     W5,W1
2280:  MOV     W6,W2
2282:  BSET    W2.7
2284:  AND     #FF,W2
2286:  AND     #FF,W8
2288:  BSET    W8.7
228A:  MOV     #19,W10
228C:  CLR     W3
228E:  CLR     W4
2290:  SUB     W1,W7,W1
2292:  SUBB    W2,W8,W2
2294:  BRA     N,229A
2296:  BRA     C,22A0
2298:  BRA     NZ,22A2
229A:  ADD     W1,W7,W1
229C:  ADDC    W2,W8,W2
229E:  BRA     22A2
22A0:  BSET    W4.0
22A2:  DEC     W10,W10
22A4:  BRA     Z,22B4
22A6:  BCLR.B  42.0
22A8:  RLC     W1,W1
22AA:  RLC     W2,W2
22AC:  BCLR.B  42.0
22AE:  RLC     W4,W4
22B0:  RLC     W3,W3
22B2:  BRA     2290
22B4:  CLR     W10
22B6:  BTSC    W3.8
22B8:  BRA     22BC
22BA:  BRA     22C8
22BC:  BCLR.B  42.0
22BE:  RRC     W3,W3
22C0:  BCLR    W3.7
22C2:  RRC     W4,W4
22C4:  RLC     W10,W10
22C6:  BRA     22CC
22C8:  DEC     W0,W0
22CA:  BRA     Z,22FE
22CC:  BTSC    W10.F
22CE:  BRA     NC,22DA
22D0:  RLC     W1,W1
22D2:  RLC     W2,W2
22D4:  SUB     W1,W7,W1
22D6:  SUBB    W2,W8,W2
22D8:  BRA     NC,22EC
22DA:  INC     W4,W4
22DC:  BRA     NZ,22EC
22DE:  INC     W3,W3
22E0:  BRA     NZ,22EC
22E2:  INC     W0,W0
22E4:  BRA     Z,22FE
22E6:  BRA     22EC
22E8:  DEC     W0,W0
22EA:  BRA     Z,22FE
22EC:  SWAP    W0
22EE:  RRC     W0,W1
22F0:  BSET    W1.F
22F2:  BTSS    W9.F
22F4:  BCLR    W1.F
22F6:  BCLR    W3.7
22F8:  XOR.B   W3L,W1L,W1L
22FA:  MOV     W4,W0
22FC:  BRA     2304
22FE:  MOV     #0,W0
2300:  MOV     #0,W1
2302:  BRA     2304
2304:  MOV     #14,W5
2306:  REPEAT  #4
2308:  MOV     [--W15],[W5--]
230A:  MOV     [--W15],W5
230C:  RETURN  
230E:  MOV     W5,[W15++]
2310:  MOV     W2,W3
2312:  MOV     W2,W5
2314:  BCLR.B  42.0
2316:  RLC     W3,W3
2318:  SWAP    W3
231A:  AND     #FF,W3
231C:  BRA     NZ,2324
231E:  MUL.UU  W0,#0,W0
2320:  MUL.UU  W2,#0,W2
2322:  BRA     2350
2324:  ADD     #380,W3
2326:  AND     #7F,W2
2328:  MOV     #3,W6
232A:  CLR     W4
232C:  BCLR.B  42.0
232E:  RRC     W2,W2
2330:  RRC     W1,W1
2332:  RRC     W0,W0
2334:  BTSC.B  42.0
2336:  INC     W4,W4
2338:  DEC     W6,W6
233A:  BRA     NZ,232C
233C:  BCLR    W2.7
233E:  SL      W3,#4,W3
2340:  BCLR    W3.F
2342:  BTSC    W5.F
2344:  BSET    W3.F
2346:  XOR     W2,W3,W3
2348:  MOV     W1,W2
234A:  MOV     W0,W1
234C:  ADD     W4,W1,W1
234E:  CLR     W0
2350:  MOV     [--W15],W5
2352:  RETURN  
2354:  MOV     W5,[W15++]
2356:  MOV     #C,W5
2358:  REPEAT  #5
235A:  MOV     [W5++],[W15++]
235C:  MOV     W3,W8
235E:  MOV     W2,W7
2360:  MOV     W1,W6
2362:  MOV     W0,W5
2364:  MOV     W3,W9
2366:  MOV     #473,W11
2368:  ASR     W3,#4,W3
236A:  MOV     #7FF,W10
236C:  AND     W10,W3,W3
236E:  SUB     W11,W3,W11
2370:  AND     #1F,W8
2372:  BSET    W8.4
2374:  CLR     W0
2376:  CLR     W1
2378:  CLR     W2
237A:  CLR     W3
237C:  BCLR.B  42.0
237E:  RRC     W8,W8
2380:  RRC     W7,W7
2382:  RRC     W6,W6
2384:  RRC     W5,W5
2386:  RRC     W3,W3
2388:  RRC     W2,W2
238A:  RRC     W1,W1
238C:  RRC     W0,W0
238E:  DEC     W11,W11
2390:  BRA     NZ,237C
2392:  BTSS    W9.F
2394:  BRA     23A0
2396:  NEG     W0,W0
2398:  COM     W1,W1
239A:  COM     W2,W2
239C:  COM     W3,W3
239E:  BRA     23A0
23A0:  MOV     #16,W5
23A2:  REPEAT  #5
23A4:  MOV     [--W15],[W5--]
23A6:  MOV     [--W15],W5
23A8:  RETURN  
23AA:  MOV     W12,[W15++]
23AC:  MOV     W13,[W15++]
23AE:  CLR     W8
23B0:  CLR     W9
23B2:  CLR     W10
23B4:  CLR     W11
23B6:  CLR     W12
23B8:  CLR     W13
23BA:  MOV     #E,W8
23BC:  MOV     #0,W9
23BE:  LNK     #10
23C0:  MOV     W12,[W14+W8]
23C2:  DEC2    W8,W8
23C4:  BRA     NN,23C0
23C6:  XOR     W4,W5,W8
23C8:  BRA     NZ,23CE
23CA:  XOR     W6,W7,W8
23CC:  BRA     Z,242C
23CE:  CLR     W8
23D0:  MOV     #40,W13
23D2:  MOV     #40,W13
23D4:  BCLR.B  42.0
23D6:  RLC     W0,W0
23D8:  RLC     W1,W1
23DA:  RLC     W2,W2
23DC:  RLC     W3,W3
23DE:  RLC     W8,W8
23E0:  RLC     W9,W9
23E2:  RLC     W10,W10
23E4:  RLC     W11,W11
23E6:  CP      W11,W7
23E8:  BRA     NZ,23F4
23EA:  CPB     W10,W6
23EC:  BRA     NZ,23F4
23EE:  CPB     W9,W5
23F0:  BRA     NZ,23F4
23F2:  CPB     W8,W4
23F4:  BRA     NC,2400
23F6:  SUB     W8,W4,W8
23F8:  SUBB    W9,W5,W9
23FA:  SUBB    W10,W6,W10
23FC:  SUBB    W11,W7,W11
23FE:  BSET.B  42.0
2400:  MOV     W8,[W14]
2402:  MOV     W9,[W14+#2]
2404:  MOV     W10,[W14+#4]
2406:  MOV     W11,[W14+#6]
2408:  MOV     [W14+#8],W8
240A:  MOV     [W14+#A],W9
240C:  MOV     [W14+#C],W10
240E:  MOV     [W14+#E],W11
2410:  RLC     W8,W8
2412:  RLC     W9,W9
2414:  RLC     W10,W10
2416:  RLC     W11,W11
2418:  MOV     W8,[W14+#8]
241A:  MOV     W9,[W14+#A]
241C:  MOV     W10,[W14+#C]
241E:  MOV     W11,[W14+#E]
2420:  MOV     [W14],W8
2422:  MOV     [W14+#2],W9
2424:  MOV     [W14+#4],W10
2426:  MOV     [W14+#6],W11
2428:  DEC     W13,W13
242A:  BRA     NZ,23D4
242C:  MOV     [W14+#8],W0
242E:  MOV     [W14+#A],W1
2430:  MOV     [W14+#C],W2
2432:  MOV     [W14+#E],W3
2434:  ULNK    
2436:  BRA     2438
2438:  MOV     [--W15],W13
243A:  MOV     [--W15],W12
243C:  RETURN  
243E:  MOV     W5,[W15++]
2440:  MOV     #C,W5
2442:  REPEAT  #7
2444:  MOV     [W5++],[W15++]
2446:  LNK     #2A
2448:  MOV     #28,W8
244A:  CLR     W12
244C:  MOV     W12,[W14+W8]
244E:  DEC2    W8,W8
2450:  BRA     NN,244C
2452:  CP0     W9
2454:  BRA     Z,2472
2456:  MOV     W9,[W14+#26]
2458:  MOV     W10,[W14+#28]
245A:  MOV     #4024,W7
245C:  CLR     W6
245E:  MUL.UU  W4,#0,W4
2460:  MOV     W9,[W14+#24]
2462:  MOV     #4024,W7
2464:  CLR     W6
2466:  MUL.UU  W4,#0,W4
2468:  CALL    1DF4
246C:  MOV     [W14+#24],W9
246E:  DEC     W9,W9
2470:  BRA     NZ,2460
2472:  MOV     [W14+#26],W9
2474:  MOV     #14,W8
2476:  MOV     W8,[W14+#24]
2478:  MOV     #41CD,W7
247A:  MOV     #CD65,W6
247C:  MUL.UU  W4,#0,W4
247E:  MOV     W0,[W14+#10]
2480:  MOV     W1,[W14+#12]
2482:  MOV     W2,[W14+#14]
2484:  MOV     W3,[W14+#16]
2486:  MOV     #14,W8
2488:  MOV     W8,[W14+#20]
248A:  MOV     #0,W4
248C:  MOV     #89E8,W5
248E:  MOV     #2304,W6
2490:  MOV     #8AC7,W7
2492:  MOV     W4,[W14+#18]
2494:  MOV     W5,[W14+#1A]
2496:  MOV     W6,[W14+#1C]
2498:  MOV     W7,[W14+#1E]
249A:  BTSS    W3.F
249C:  BRA     24A6
249E:  MOV     [W14+#28],W8
24A0:  DEC     W8,W8
24A2:  BSET    W8.D
24A4:  MOV     W8,[W14+#28]
24A6:  BCLR    W3.F
24A8:  CALL    2354
24AC:  MOV     [W14+#28],W8
24AE:  MOV     [W14+#26],W9
24B0:  CP0     W9
24B2:  BTSC.B  42.1
24B4:  INC.B   W8L,W8L
24B6:  MOV     W8,[W14+#28]
24B8:  MOV     [W14+#22],W9
24BA:  CLR     W9
24BC:  MOV     W9,[W14+#22]
24BE:  MOV     [W14+#18],W4
24C0:  MOV     [W14+#1A],W5
24C2:  MOV     [W14+#1C],W6
24C4:  MOV     [W14+#1E],W7
24C6:  CALL    23AA
24CA:  MOV     [W14+#22],W13
24CC:  BTSC    W13.0
24CE:  BRA     2594
24D0:  MOV     W8,[W14+#10]
24D2:  MOV     W9,[W14+#12]
24D4:  MOV     W10,[W14+#14]
24D6:  MOV     W11,[W14+#16]
24D8:  MOV     [W14+#22],W13
24DA:  BTG     W13.0
24DC:  MOV     W13,[W14+#22]
24DE:  CP0     W0
24E0:  BRA     NZ,2506
24E2:  MOV     [W14+#26],W9
24E4:  INC     W9,W9
24E6:  MOV     [W14+#24],W10
24E8:  SUB     W10,W9,W8
24EA:  BRA     Z,2506
24EC:  MOV     [W14+#28],W11
24EE:  CP0     W11
24F0:  BRA     Z,250E
24F2:  AND     W11,#1F,W8
24F4:  SUB     W10,W8,W8
24F6:  BRA     Z,24FA
24F8:  BRA     C,257C
24FA:  BTSC    W11.F
24FC:  BRA     257C
24FE:  BTSC    W11.E
2500:  BRA     250E
2502:  MOV     #20,W0
2504:  BRA     2574
2506:  MOV     [W14+#28],W11
2508:  MOV     #2000,W12
250A:  AND     W12,W11,W11
250C:  MOV     W11,[W14+#28]
250E:  MOV     [W14+#28],W11
2510:  BTSS    W11.D
2512:  BRA     2532
2514:  BCLR    W11.D
2516:  MOV     [W14+#26],W9
2518:  CP0     W9
251A:  BTSS.B  42.1
251C:  DEC     W11,W11
251E:  CLR     W11
2520:  MOV     W11,[W14+#28]
2522:  MOV     W0,W10
2524:  BTSC.B  223.1
2526:  BRA     2524
2528:  MOV     #2D,W4
252A:  MOV     W4,224
252C:  MOV     W10,W0
252E:  CLR     W11
2530:  MOV     W11,[W14+#28]
2532:  MOV     [W14+#26],W9
2534:  MOV     [W14+#24],W10
2536:  SUB     W10,W9,W8
2538:  BRA     NZ,2552
253A:  CLR     W11
253C:  MOV     W11,[W14+#28]
253E:  MOV     W0,W10
2540:  BTSC.B  223.1
2542:  BRA     2540
2544:  MOV     #2E,W4
2546:  MOV     W4,224
2548:  MOV     [W14+#28],W11
254A:  MOV     #2000,W12
254C:  AND     W12,W11,W11
254E:  MOV     W11,[W14+#28]
2550:  MOV     W10,W0
2552:  MOV     #30,W1
2554:  MOV     [W14+#28],W11
2556:  BTSS    W11.D
2558:  BRA     2574
255A:  BCLR    W11.D
255C:  MOV     [W14+#26],W9
255E:  CP0     W9
2560:  BTSS.B  42.1
2562:  DEC     W11,W11
2564:  CLR     W11
2566:  MOV     W11,[W14+#28]
2568:  BTSC.B  223.1
256A:  BRA     2568
256C:  MOV     #2D,W4
256E:  MOV     W4,224
2570:  CLR     W0
2572:  MOV     #30,W1
2574:  ADD     W1,W0,W0
2576:  BTSC.B  223.1
2578:  BRA     2576
257A:  MOV     W0,224
257C:  MOV     [W14+#24],W13
257E:  DEC     W13,W13
2580:  BRA     Z,25B4
2582:  MOV     W13,[W14+#24]
2584:  MOV     [W14+#18],W0
2586:  MOV     [W14+#1A],W1
2588:  MOV     [W14+#1C],W2
258A:  MOV     [W14+#1E],W3
258C:  MOV     #A,W4
258E:  CLR     W5
2590:  MUL.UU  W6,#0,W6
2592:  BRA     24C6
2594:  MOV     W0,[W14+#18]
2596:  MOV     W1,[W14+#1A]
2598:  MOV     W2,[W14+#1C]
259A:  MOV     W3,[W14+#1E]
259C:  MOV     W0,W4
259E:  MOV     W1,W5
25A0:  MOV     W2,W6
25A2:  MOV     W3,W7
25A4:  MOV     [W14+#10],W0
25A6:  MOV     [W14+#12],W1
25A8:  MOV     [W14+#14],W2
25AA:  MOV     [W14+#16],W3
25AC:  MOV     [W14+#22],W13
25AE:  BTG     W13.0
25B0:  MOV     W13,[W14+#22]
25B2:  BRA     24C6
25B4:  ULNK    
25B6:  MOV     #1A,W5
25B8:  REPEAT  #7
25BA:  MOV     [--W15],[W5--]
25BC:  MOV     [--W15],W5
25BE:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
*
1068:  CP0     W0
106A:  BTSC.B  42.1
106C:  BRA     1076
106E:  REPEAT  #3E7B
1070:  NOP     
1072:  DEC     W0,W0
1074:  BRA     NZ,106E
1076:  RETURN  
....................  
.................... #PIN_SELECT U1RX = PIN_B12 // PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 // PIN_B15 // 
.................... #use rs232(UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define DEVICE_ID 2 
.................... #define limitSw_x PIN_B8 // 
.................... #define limitSw_y PIN_A2 // 
.................... #define limitSw_z PIN_A4 // 
.................... #define Motor_Bp PIN_B10 // Pin output is connected to DXI0  (PWM) 
.................... #define Motor_Br PIN_B2  // Pin output is connected to DX02 
.................... #define Motor_Bl PIN_B3  // Pin output is connected to DX03 
.................... #define Motor_Ap PIN_B4  // Pin output is connected to DX03 
.................... #define Motor_Ar PIN_A1  // Pin output is connected to DX03 
.................... #define Motor_Al PIN_A0  // Pin output is connected to DX03 
.................... #define Motor_Zp PIN_B14 // Pin output is connected to DX03 
.................... #define Motor_Zr PIN_B15 // Pin output is connected to DX03 
.................... #define Motor_Zl PIN_B9  // Pin output is connected to DX03 
.................... #define Encode_A PIN_B7  // Pin output is connected to DX03 
.................... #define Encode_B PIN_B6  // Pin output is connected to DX03 
.................... #define Encode_Z PIN_B5  // Pin output is connected to DX03 
.................... #define servo_r PIN_B0   // servo 270 
.................... #define servo_l PIN_B1   // servo 180 
....................  
.................... #PIN_SELECT OC1 = Motor_Bp 
.................... #PIN_SELECT OC2 = Motor_Ap 
.................... #PIN_SELECT OC3 = Motor_Zp 
.................... #PIN_SELECT OC4 = servo_r 
.................... #PIN_SELECT OC5 = servo_l 
.................... #PIN_SELECT INT1 = Encode_B 
.................... #PIN_SELECT INT2 = Encode_Z 
....................  
.................... // long count = 0; 
.................... long count_a = 0; 
.................... long count_b = 0; 
.................... long count_z = 0; 
.................... // long posi = 0; 
.................... int u_a; 
.................... int *a_u = &u_a; 
.................... int u_b; 
.................... int *b_u = &u_b; 
.................... int u_z; 
.................... int *z_u = &u_z; 
....................  
.................... int s_a = 0; 
.................... int *a_s = &s_a; 
.................... int s_b = 0; 
.................... int *b_s = &s_b; 
.................... int s_z = 0; 
.................... int *z_s = &s_z; 
.................... int p_a = 0; 
.................... int *a_p = &p_a; 
.................... int p_b = 0; 
.................... int *b_p = &p_b; 
.................... int p_z = 0; 
.................... int *z_p = &p_z; 
....................  
.................... int tolerance_a = 30; 
.................... int tolerance_b = 30; 
.................... int tolerance_z = 20; 
....................  
.................... float K_Pz = 0.6; 
.................... float K_Iz = 0.0015; 
.................... float K_Dz = 0.00; 
.................... float K_Pa = 2; 
.................... float K_Ia = 0.001; 
.................... float K_Da = 0.00; 
.................... float K_Pb = 2; 
.................... float K_Ib = 0.00; 
.................... float K_Db = 0.00; 
....................  
.................... int direction_z = 0; 
.................... int direction_a = 0; 
.................... int direction_b = 0; 
.................... char array[20] = {}; 
.................... char SM_id = 0; 
.................... int getPackage = 0; 
.................... char command_ID; 
.................... // char* print_float(float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     char stringFloat[20]; 
.................... //     sprintf(stringFloat, "%d.%d", intDist, dotDist); 
.................... //     return stringFloat; 
.................... // } 
.................... // void print_float(char* stringResult, float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     sprintf(stringResult, "%d.%d", intDist, dotDist); 
.................... // } 
....................  
.................... // Encoder Interrupts 
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0(void) { 
*
0EF2:  PUSH    42
0EF4:  PUSH    36
0EF6:  PUSH    32
0EF8:  MOV     W0,[W15++]
0EFA:  MOV     #2,W0
0EFC:  REPEAT  #C
0EFE:  MOV     [W0++],[W15++]
....................   if (direction_a == 0) { 
0F00:  CP0     90C
0F02:  BRA     NZ,F0C
....................     count_a++; 
0F04:  INC     08B0
0F06:  BTSC.B  42.1
0F08:  INC     08B2
....................   } else { 
0F0A:  BRA     F12
....................     count_a--; 
0F0C:  DEC     08B0
0F0E:  BTSS.B  42.0
0F10:  DEC     08B2
....................   } 
.................... } 
....................  
0F12:  BCLR.B  84.0
0F14:  MOV     #1A,W0
0F16:  REPEAT  #C
0F18:  MOV     [--W15],[W0--]
0F1A:  MOV     [--W15],W0
0F1C:  POP     32
0F1E:  POP     36
0F20:  POP     42
0F22:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
0F24:  PUSH    42
0F26:  PUSH    36
0F28:  PUSH    32
0F2A:  MOV     W0,[W15++]
0F2C:  MOV     #2,W0
0F2E:  REPEAT  #C
0F30:  MOV     [W0++],[W15++]
....................   if (direction_b == 0) { 
0F32:  CP0     90E
0F34:  BRA     NZ,F3E
....................     count_b++; 
0F36:  INC     08B4
0F38:  BTSC.B  42.1
0F3A:  INC     08B6
....................   } else { 
0F3C:  BRA     F44
....................     count_b--; 
0F3E:  DEC     08B4
0F40:  BTSS.B  42.0
0F42:  DEC     08B6
....................   } 
.................... } 
....................  
0F44:  BCLR.B  86.4
0F46:  MOV     #1A,W0
0F48:  REPEAT  #C
0F4A:  MOV     [--W15],[W0--]
0F4C:  MOV     [--W15],W0
0F4E:  POP     32
0F50:  POP     36
0F52:  POP     42
0F54:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2(void) { 
0F56:  PUSH    42
0F58:  PUSH    36
0F5A:  PUSH    32
0F5C:  MOV     W0,[W15++]
0F5E:  MOV     #2,W0
0F60:  REPEAT  #C
0F62:  MOV     [W0++],[W15++]
....................   if (direction_z == 0) { 
0F64:  CP0     90A
0F66:  BRA     NZ,F70
....................     count_z++; 
0F68:  INC     08B8
0F6A:  BTSC.B  42.1
0F6C:  INC     08BA
....................   } else { 
0F6E:  BRA     F76
....................     count_z--; 
0F70:  DEC     08B8
0F72:  BTSS.B  42.0
0F74:  DEC     08BA
....................   } 
0F76:  BCLR.B  87.5
0F78:  MOV     #1A,W0
0F7A:  REPEAT  #C
0F7C:  MOV     [--W15],[W0--]
0F7E:  MOV     [--W15],W0
0F80:  POP     32
0F82:  POP     36
0F84:  POP     42
0F86:  RETFIE  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT0); 
*
1028:  BSET.B  94.0
....................   ext_int_edge(0, L_TO_H); // Rising Edge 
102A:  BCLR.B  82.0
....................   enable_interrupts(INT_EXT1); 
102C:  BSET.B  96.4
....................   ext_int_edge(1, L_TO_H); // Rising Edge 
102E:  BCLR.B  82.1
....................   enable_interrupts(INT_EXT2); 
1030:  BSET.B  97.5
....................   ext_int_edge(2, L_TO_H); // Rising Edge 
1032:  BCLR.B  82.2
1034:  RETURN  
.................... } 
....................  
.................... // 
....................  
.................... // Communication Routines 
....................  
.................... void SM_RxD(int c) { 
*
0F88:  MOV     W5,[W15++]
....................   if (getPackage == 0) { 
0F8A:  CP0     926
0F8C:  BRA     NZ,FF2
....................     if (SM_id < 2) { 
0F8E:  MOV.B   924,W0L
0F90:  SE      W0,W0
0F92:  CP      W0,#2
0F94:  BRA     GE,FB0
....................       if (c == 255) { 
0F96:  MOV     99C,W4
0F98:  XOR     #FF,W4
0F9A:  BRA     NZ,FAC
....................         array[SM_id] = c; 
0F9C:  MOV.B   924,W0L
0F9E:  SE      W0,W0
0FA0:  MOV     #910,W4
0FA2:  ADD     W0,W4,W5
0FA4:  MOV     99C,W0
0FA6:  MOV.B   W0L,[W5+#0]
....................         SM_id++; 
0FA8:  INC.B   0924
....................       } else { 
0FAA:  BRA     FAE
....................         SM_id = 0; 
0FAC:  CLR.B   924
....................       } 
....................     } else if (SM_id == 2) { 
0FAE:  BRA     FF2
0FB0:  MOV.B   924,W0L
0FB2:  SE      W0,W0
0FB4:  CP      W0,#2
0FB6:  BRA     NZ,FCC
....................       array[SM_id] = c; 
0FB8:  MOV.B   924,W0L
0FBA:  SE      W0,W0
0FBC:  MOV     #910,W4
0FBE:  ADD     W0,W4,W5
0FC0:  MOV     99C,W0
0FC2:  MOV.B   W0L,[W5+#0]
....................       command_ID = c; 
0FC4:  MOV.B   99C,W0L
0FC6:  MOV.B   W0L,925
....................       SM_id++; 
0FC8:  INC.B   0924
....................     } else if (SM_id > 2) { 
0FCA:  BRA     FF2
0FCC:  MOV.B   924,W0L
0FCE:  SE      W0,W0
0FD0:  CP      W0,#2
0FD2:  BRA     LE,FF2
....................       array[SM_id] = c; 
0FD4:  MOV.B   924,W0L
0FD6:  SE      W0,W0
0FD8:  MOV     #910,W4
0FDA:  ADD     W0,W4,W5
0FDC:  MOV     99C,W0
0FDE:  MOV.B   W0L,[W5+#0]
....................       if (SM_id >= 9) { 
0FE0:  MOV.B   924,W0L
0FE2:  SE      W0,W0
0FE4:  CP      W0,#9
0FE6:  BRA     LT,FF0
....................         getPackage = 1; 
0FE8:  MOV     #1,W4
0FEA:  MOV     W4,926
....................         SM_id = 0; 
0FEC:  CLR.B   924
....................       } else { 
0FEE:  BRA     FF2
....................         SM_id++; 
0FF0:  INC.B   0924
....................       } 
....................     } 
....................   } 
0FF2:  MOV     [--W15],W5
0FF4:  RETURN  
.................... } 
....................  
.................... #INT_RDA 
.................... void UART1_Isr() { 
0FF6:  PUSH    42
0FF8:  PUSH    36
0FFA:  PUSH    32
0FFC:  MOV     W0,[W15++]
0FFE:  MOV     #2,W0
1000:  REPEAT  #C
1002:  MOV     [W0++],[W15++]
1004:  BTSS.B  222.0
1006:  BRA     1004
1008:  MOV     226,W0
100A:  MOV.B   W0L,998
100C:  CLR.B   999
....................   int c = getc(); 
....................   // putc(c); 
....................   SM_RxD(c); 
100E:  PUSH    998
1010:  POP     99C
1012:  CALL    F88
1016:  BCLR.B  85.3
1018:  MOV     #1A,W0
101A:  REPEAT  #C
101C:  MOV     [--W15],[W0--]
101E:  MOV     [--W15],W0
1020:  POP     32
1022:  POP     36
1024:  POP     42
1026:  RETFIE  
.................... } 
.................... // 
....................  
.................... // Motor 
.................... void Motor_z(int u , int s) { 
*
1078:  MOV     W5,[W15++]
....................   if (u > 100) 
107A:  MOV     92E,W4
107C:  MOV     #64,W3
107E:  CP      W3,W4
1080:  BRA     GE,1086
....................     u = 100; 
1082:  MOV     #64,W4
1084:  MOV     W4,92E
....................   if (u < -100) 
1086:  MOV     92E,W4
1088:  MOV     #FF9C,W3
108A:  CP      W3,W4
108C:  BRA     LE,1092
....................     u = -100; 
108E:  MOV     #FF9C,W4
1090:  MOV     W4,92E
....................   if(s==0){ 
1092:  CP0     930
1094:  BRA     NZ,10DA
....................     if (u > 0) { 
1096:  MOV     92E,W4
1098:  CP      W4,#0
109A:  BRA     LE,10AC
....................       output_bit(Motor_Zr, 0); 
109C:  BCLR.B  2CD.7
109E:  BCLR.B  2C9.7
....................       output_bit(Motor_Zl, 1); 
10A0:  BSET.B  2CD.1
10A2:  BCLR.B  2C9.1
....................       direction_z = 0; 
10A4:  CLR     90A
....................       set_pwm_duty(3, 50); 
10A6:  MOV     #32,W4
10A8:  MOV     W4,18C
....................     } else if (u < 0) { 
10AA:  BRA     10DA
10AC:  MOV     92E,W4
10AE:  CP      W4,#0
10B0:  BRA     GE,10C4
....................       output_bit(Motor_Zr, 1); 
10B2:  BSET.B  2CD.7
10B4:  BCLR.B  2C9.7
....................       output_bit(Motor_Zl, 0); 
10B6:  BCLR.B  2CD.1
10B8:  BCLR.B  2C9.1
....................       direction_z = 1; 
10BA:  MOV     #1,W4
10BC:  MOV     W4,90A
....................       set_pwm_duty(3, -50); 
10BE:  MOV     #FFCE,W4
10C0:  MOV     W4,18C
....................     } else if (u==0) { 
10C2:  BRA     10DA
10C4:  CP0     92E
10C6:  BRA     NZ,10DA
....................       output_bit(Motor_Zr, 1); 
10C8:  BSET.B  2CD.7
10CA:  BCLR.B  2C9.7
....................       output_bit(Motor_Zl, 1); 
10CC:  BSET.B  2CD.1
10CE:  BCLR.B  2C9.1
....................       set_pwm_duty(3, (int)(100)); 
10D0:  MOV     #64,W4
10D2:  MOV     W4,18C
....................       delay_ms(200); 
10D4:  MOV     #C8,W0
10D6:  CALL    1068
....................     } 
....................   } 
....................   if(s==1){ 
10DA:  MOV     930,W4
10DC:  CP      W4,#1
10DE:  BRA     NZ,1132
....................     if (u > 0) { 
10E0:  MOV     92E,W4
10E2:  CP      W4,#0
10E4:  BRA     LE,10FA
....................       output_bit(Motor_Zr, 0); 
10E6:  BCLR.B  2CD.7
10E8:  BCLR.B  2C9.7
....................       output_bit(Motor_Zl, 1); 
10EA:  BSET.B  2CD.1
10EC:  BCLR.B  2C9.1
....................       direction_z = 0; 
10EE:  CLR     90A
....................       set_pwm_duty(3, (int)(2 * u)); 
10F0:  MOV     92E,W4
10F2:  MUL.UU  W4,#2,W0
10F4:  MOV     W0,W5
10F6:  MOV     W5,18C
....................     } else if (u < 0) { 
10F8:  BRA     1132
10FA:  MOV     92E,W4
10FC:  CP      W4,#0
10FE:  BRA     GE,111C
....................       output_bit(Motor_Zr, 1); 
1100:  BSET.B  2CD.7
1102:  BCLR.B  2C9.7
....................       output_bit(Motor_Zl, 0); 
1104:  BCLR.B  2CD.1
1106:  BCLR.B  2C9.1
....................       direction_z = 1; 
1108:  MOV     #1,W4
110A:  MOV     W4,90A
....................       set_pwm_duty(3, (int)(2 * -u)); 
110C:  MOV     #0,W4
110E:  MOV     92E,W3
1110:  SUB     W4,W3,W0
1112:  MOV     W0,W4
1114:  MUL.UU  W4,#2,W0
1116:  MOV     W0,W5
1118:  MOV     W5,18C
....................     } else if (u==0) { 
111A:  BRA     1132
111C:  CP0     92E
111E:  BRA     NZ,1132
....................       output_bit(Motor_Zr, 1); 
1120:  BSET.B  2CD.7
1122:  BCLR.B  2C9.7
....................       output_bit(Motor_Zl, 1); 
1124:  BSET.B  2CD.1
1126:  BCLR.B  2C9.1
....................       set_pwm_duty(3, (int)(100)); 
1128:  MOV     #64,W4
112A:  MOV     W4,18C
....................       delay_ms(200); 
112C:  MOV     #C8,W0
112E:  CALL    1068
....................     } 
....................   } 
1132:  MOV     [--W15],W5
1134:  RETURN  
.................... } 
....................  
.................... void Motor_a(int u, int s) { 
1136:  MOV     W5,[W15++]
....................   if (u > 100) 
1138:  MOV     934,W4
113A:  MOV     #64,W3
113C:  CP      W3,W4
113E:  BRA     GE,1144
....................     u = 100; 
1140:  MOV     #64,W4
1142:  MOV     W4,934
....................   if (u < -100) 
1144:  MOV     934,W4
1146:  MOV     #FF9C,W3
1148:  CP      W3,W4
114A:  BRA     LE,1150
....................     u = -100; 
114C:  MOV     #FF9C,W4
114E:  MOV     W4,934
....................   if(s==0){ 
1150:  CP0     936
1152:  BRA     NZ,1194
....................     if (u > 0) { 
1154:  MOV     934,W4
1156:  CP      W4,#0
1158:  BRA     LE,116A
....................       output_bit(Motor_Ar, 1); 
115A:  BSET.B  2C4.1
115C:  BCLR.B  2C0.1
....................       output_bit(Motor_Al, 0); 
115E:  BCLR.B  2C4.0
1160:  BCLR.B  2C0.0
....................       set_pwm_duty(2, 50); 
1162:  MOV     #32,W4
1164:  MOV     W4,186
....................       direction_a = 0; 
1166:  CLR     90C
....................     } else if (u < 0) { 
1168:  BRA     1194
116A:  MOV     934,W4
116C:  CP      W4,#0
116E:  BRA     GE,1182
....................       output_bit(Motor_Ar, 0); 
1170:  BCLR.B  2C4.1
1172:  BCLR.B  2C0.1
....................       output_bit(Motor_Al, 1); 
1174:  BSET.B  2C4.0
1176:  BCLR.B  2C0.0
....................       direction_a = 1; 
1178:  MOV     #1,W4
117A:  MOV     W4,90C
....................       set_pwm_duty(2, -50); 
117C:  MOV     #FFCE,W4
117E:  MOV     W4,186
....................     } else { 
1180:  BRA     1194
....................       output_bit(Motor_Ar, 1); 
1182:  BSET.B  2C4.1
1184:  BCLR.B  2C0.1
....................       output_bit(Motor_Al, 1); 
1186:  BSET.B  2C4.0
1188:  BCLR.B  2C0.0
....................       set_pwm_duty(2, (int)(100)); 
118A:  MOV     #64,W4
118C:  MOV     W4,186
....................       delay_ms(200); 
118E:  MOV     #C8,W0
1190:  CALL    1068
....................     } 
....................   } 
....................   if(s==1){ 
1194:  MOV     936,W4
1196:  CP      W4,#1
1198:  BRA     NZ,11E8
....................     if (u > 0) { 
119A:  MOV     934,W4
119C:  CP      W4,#0
119E:  BRA     LE,11B4
....................       output_bit(Motor_Ar, 1); 
11A0:  BSET.B  2C4.1
11A2:  BCLR.B  2C0.1
....................       output_bit(Motor_Al, 0); 
11A4:  BCLR.B  2C4.0
11A6:  BCLR.B  2C0.0
....................       direction_a = 0; 
11A8:  CLR     90C
....................       set_pwm_duty(2, (int)(2*u)); 
11AA:  MOV     934,W4
11AC:  MUL.UU  W4,#2,W0
11AE:  MOV     W0,W5
11B0:  MOV     W5,186
....................     } else if (u < 0) { 
11B2:  BRA     11E8
11B4:  MOV     934,W4
11B6:  CP      W4,#0
11B8:  BRA     GE,11D6
....................       output_bit(Motor_Ar, 0); 
11BA:  BCLR.B  2C4.1
11BC:  BCLR.B  2C0.1
....................       output_bit(Motor_Al, 1); 
11BE:  BSET.B  2C4.0
11C0:  BCLR.B  2C0.0
....................       direction_a = 1; 
11C2:  MOV     #1,W4
11C4:  MOV     W4,90C
....................       set_pwm_duty(2, (int)(2*-u)); 
11C6:  MOV     #0,W4
11C8:  MOV     934,W3
11CA:  SUB     W4,W3,W0
11CC:  MOV     W0,W4
11CE:  MUL.UU  W4,#2,W0
11D0:  MOV     W0,W5
11D2:  MOV     W5,186
....................     } else { 
11D4:  BRA     11E8
....................       output_bit(Motor_Ar, 1); 
11D6:  BSET.B  2C4.1
11D8:  BCLR.B  2C0.1
....................       output_bit(Motor_Al, 1); 
11DA:  BSET.B  2C4.0
11DC:  BCLR.B  2C0.0
....................       set_pwm_duty(2, (int)(100)); 
11DE:  MOV     #64,W4
11E0:  MOV     W4,186
....................       delay_ms(200); 
11E2:  MOV     #C8,W0
11E4:  CALL    1068
....................     } 
....................   } 
11E8:  MOV     [--W15],W5
11EA:  RETURN  
....................  
.................... } 
....................  
.................... void Motor_b(int u, int s) { 
11EC:  MOV     W5,[W15++]
....................   if (u > 100) 
11EE:  MOV     934,W4
11F0:  MOV     #64,W3
11F2:  CP      W3,W4
11F4:  BRA     GE,11FA
....................     u = 100; 
11F6:  MOV     #64,W4
11F8:  MOV     W4,934
....................   if (u < -100) 
11FA:  MOV     934,W4
11FC:  MOV     #FF9C,W3
11FE:  CP      W3,W4
1200:  BRA     LE,1206
....................     u = -100; 
1202:  MOV     #FF9C,W4
1204:  MOV     W4,934
....................   if(s == 0){ 
1206:  CP0     936
1208:  BRA     NZ,124A
....................     if (u > 0) { 
120A:  MOV     934,W4
120C:  CP      W4,#0
120E:  BRA     LE,1220
....................       output_bit(Motor_Br, 1); 
1210:  BSET.B  2CC.2
1212:  BCLR.B  2C8.2
....................       output_bit(Motor_Bl, 0); 
1214:  BCLR.B  2CC.3
1216:  BCLR.B  2C8.3
....................       direction_b = 0; 
1218:  CLR     90E
....................       set_pwm_duty(1, 40); 
121A:  MOV     #28,W4
121C:  MOV     W4,180
....................     } else if (u < 0) { 
121E:  BRA     124A
1220:  MOV     934,W4
1222:  CP      W4,#0
1224:  BRA     GE,1238
....................       output_bit(Motor_Br, 0); 
1226:  BCLR.B  2CC.2
1228:  BCLR.B  2C8.2
....................       output_bit(Motor_Bl, 1); 
122A:  BSET.B  2CC.3
122C:  BCLR.B  2C8.3
....................       direction_b = 1; 
122E:  MOV     #1,W4
1230:  MOV     W4,90E
....................       set_pwm_duty(1, -40); 
1232:  MOV     #FFD8,W4
1234:  MOV     W4,180
....................     } else { 
1236:  BRA     124A
....................       output_bit(Motor_Br, 1); 
1238:  BSET.B  2CC.2
123A:  BCLR.B  2C8.2
....................       output_bit(Motor_Bl, 1); 
123C:  BSET.B  2CC.3
123E:  BCLR.B  2C8.3
....................       set_pwm_duty(1, (int)(100)); 
1240:  MOV     #64,W4
1242:  MOV     W4,180
....................       delay_ms(200); 
1244:  MOV     #C8,W0
1246:  CALL    1068
....................     } 
....................   } 
....................   if(s == 1){ 
124A:  MOV     936,W4
124C:  CP      W4,#1
124E:  BRA     NZ,129E
....................     if (u > 0) { 
1250:  MOV     934,W4
1252:  CP      W4,#0
1254:  BRA     LE,126A
....................       output_bit(Motor_Br, 1); 
1256:  BSET.B  2CC.2
1258:  BCLR.B  2C8.2
....................       output_bit(Motor_Bl, 0); 
125A:  BCLR.B  2CC.3
125C:  BCLR.B  2C8.3
....................       direction_b = 0; 
125E:  CLR     90E
....................       set_pwm_duty(1, (int)(2 * u)); 
1260:  MOV     934,W4
1262:  MUL.UU  W4,#2,W0
1264:  MOV     W0,W5
1266:  MOV     W5,180
....................     } else if (u < 0) { 
1268:  BRA     129E
126A:  MOV     934,W4
126C:  CP      W4,#0
126E:  BRA     GE,128C
....................       output_bit(Motor_Br, 0); 
1270:  BCLR.B  2CC.2
1272:  BCLR.B  2C8.2
....................       output_bit(Motor_Bl, 1); 
1274:  BSET.B  2CC.3
1276:  BCLR.B  2C8.3
....................       direction_b = 1; 
1278:  MOV     #1,W4
127A:  MOV     W4,90E
....................       set_pwm_duty(1, (int)(2 * -u)); 
127C:  MOV     #0,W4
127E:  MOV     934,W3
1280:  SUB     W4,W3,W0
1282:  MOV     W0,W4
1284:  MUL.UU  W4,#2,W0
1286:  MOV     W0,W5
1288:  MOV     W5,180
....................     } else { 
128A:  BRA     129E
....................       output_bit(Motor_Br, 1); 
128C:  BSET.B  2CC.2
128E:  BCLR.B  2C8.2
....................       output_bit(Motor_Bl, 1); 
1290:  BSET.B  2CC.3
1292:  BCLR.B  2C8.3
....................       set_pwm_duty(1, (int)(100)); 
1294:  MOV     #64,W4
1296:  MOV     W4,180
....................       delay_ms(200); 
1298:  MOV     #C8,W0
129A:  CALL    1068
....................     } 
....................   } 
129E:  MOV     [--W15],W5
12A0:  RETURN  
.................... } 
....................  
.................... void PID(long r, long count, long s, long p, int *u, float K_P, float K_I, 
....................          float K_D) { 
*
195E:  MOV     W5,[W15++]
1960:  MOV     W6,[W15++]
1962:  MOV     W7,[W15++]
1964:  MOV     934,W4
1966:  MOV     938,W3
1968:  SUB     W4,W3,W0
196A:  MOV     W0,952
196C:  MOV     936,W4
196E:  MOV     93A,W3
1970:  SUBB    W4,W3,W0
1972:  MOV     W0,954
....................   long e = r - count; 
....................   s = s + e; 
1974:  MOV     93C,W0
1976:  ADD     952,W0
1978:  MOV     W0,93C
197A:  MOV     954,W4
197C:  MOV     93E,W3
197E:  ADDC    W3,W4,W0
1980:  MOV     W0,93E
....................   *u = (K_P * e) + (K_I * s) + (K_D * (e - p)); 
1982:  MOV     944,W5
1984:  MOV     952,W0
1986:  MOV     954,W1
1988:  CALL    1676
198C:  MOV     W0,W2
198E:  MOV     W1,W3
1990:  MOV     946,W0
1992:  MOV     948,W1
1994:  CALL    16C4
1998:  MOV.D   W0,W6
199A:  MOV     93C,W0
199C:  MOV     93E,W1
199E:  CALL    1676
19A2:  MOV     W0,W2
19A4:  MOV     W1,W3
19A6:  MOV     94A,W0
19A8:  MOV     94C,W1
19AA:  CALL    16C4
19AE:  BCLR.B  43.0
19B0:  MOV     W0,W2
19B2:  MOV     W1,W3
19B4:  MOV     W6,W0
19B6:  MOV     W7,W1
19B8:  CALL    1788
19BC:  MOV.D   W0,W6
19BE:  MOV     952,W4
19C0:  MOV     940,W3
19C2:  SUB     W4,W3,W0
19C4:  MOV     954,W4
19C6:  MOV     942,W3
19C8:  SUBB    W4,W3,W1
19CA:  CALL    1676
19CE:  MOV     W0,W2
19D0:  MOV     W1,W3
19D2:  MOV     94E,W0
19D4:  MOV     950,W1
19D6:  CALL    16C4
19DA:  BCLR.B  43.0
19DC:  MOV     W0,W2
19DE:  MOV     W1,W3
19E0:  MOV     W6,W0
19E2:  MOV     W7,W1
19E4:  CALL    1788
19E8:  CALL    1932
19EC:  MOV     W0,[W5]
....................   p = e; 
19EE:  PUSH    952
19F0:  POP     940
19F2:  PUSH    954
19F4:  POP     942
19F6:  MOV     [--W15],W7
19F8:  MOV     [--W15],W6
19FA:  MOV     [--W15],W5
19FC:  RETURN  
.................... } 
.................... // 
....................  
.................... // Utilities 
.................... int mergeInts(int MSB, int LSB) { 
*
15E0:  MOV     W5,[W15++]
15E2:  MOV.B   93A,W0L
15E4:  CLR.B   1
15E6:  MOV     #100,W4
15E8:  MUL.SS  W4,W0,W0
15EA:  MOV     W0,W5
15EC:  MOV     93C,W4
15EE:  CLR.B   9
15F0:  ADD     W5,W4,W0
15F2:  CLR     W1
15F4:  BTSC    W0.F
15F6:  SETM    W1
15F8:  MOV     W0,93E
15FA:  MOV     W1,940
....................   long a = (256 * (int)(unsigned char)MSB) + (unsigned char)LSB; 
....................   printf("merged %d and %d into: %d \n", MSB, LSB, a); 
15FC:  MOV     #0,W1
15FE:  MOV     W1,W0
1600:  CLR.B   1
1602:  CALL    DFC
1606:  INC     W1,W1
1608:  BTSC.B  223.1
160A:  BRA     1608
160C:  MOV     W0,224
160E:  MOV     #6,W0
1610:  CPSGT   W1,W0
1612:  BRA     15FE
1614:  MOV     93A,W0
1616:  MOV     #0,W4
1618:  CALL    14EA
161C:  MOV     #9,W1
161E:  MOV     W1,W0
1620:  CLR.B   1
1622:  CALL    DFC
1626:  INC     W1,W1
1628:  BTSC.B  223.1
162A:  BRA     1628
162C:  MOV     W0,224
162E:  MOV     #D,W0
1630:  CPSGT   W1,W0
1632:  BRA     161E
1634:  MOV     93C,W0
1636:  MOV     #0,W4
1638:  CALL    14EA
163C:  MOV     #10,W1
163E:  MOV     W1,W0
1640:  CLR.B   1
1642:  CALL    DFC
1646:  INC     W1,W1
1648:  BTSC.B  223.1
164A:  BRA     1648
164C:  MOV     W0,224
164E:  MOV     #16,W0
1650:  CPSGT   W1,W0
1652:  BRA     163E
1654:  MOV     93E,W0
1656:  MOV     940,W1
1658:  MOV     #0,W4
165A:  CALL    12E6
165E:  BTSC.B  223.1
1660:  BRA     165E
1662:  MOV     #20,W4
1664:  MOV     W4,224
1666:  BTSC.B  223.1
1668:  BRA     1666
166A:  MOV     #A,W4
166C:  MOV     W4,224
....................   return a; 
166E:  PUSH    93E
1670:  POP     0
1672:  MOV     [--W15],W5
1674:  RETURN  
.................... } 
....................  
.................... float intsToFloat(unsigned char LSB, unsigned char hexadec) { 
*
25C0:  MOV     W5,[W15++]
25C2:  MOV     #C,W5
25C4:  REPEAT  #4
25C6:  MOV     [W5++],[W15++]
25C8:  MOV.B   92A,W0L
25CA:  CLR.B   1
25CC:  CALL    220A
25D0:  MOV     W0,W5
25D2:  MOV     W1,W6
25D4:  MOV.B   92B,W0L
25D6:  CLR.B   1
25D8:  CALL    220A
25DC:  MOV     W0,W7
25DE:  MOV     W1,W8
25E0:  MOV     W7,W0
25E2:  MOV     W8,W1
25E4:  MOV     #0,W2
25E6:  MOV     #4380,W3
25E8:  CALL    2244
25EC:  BCLR.B  43.0
25EE:  MOV     W0,W2
25F0:  MOV     W1,W3
25F2:  MOV     W5,W0
25F4:  MOV     W6,W1
25F6:  CALL    1788
25FA:  MOV     W0,92C
25FC:  MOV     W1,92E
....................   float flo = (float)LSB + ((float)hexadec) / 256; 
....................   printf("merged %d and %d into: %0.2f\n", LSB, hexadec, flo); 
25FE:  MOV     #0,W1
2600:  MOV     W1,W0
2602:  CLR.B   1
2604:  CALL    E24
2608:  INC     W1,W1
260A:  BTSC.B  223.1
260C:  BRA     260A
260E:  MOV     W0,224
2610:  MOV     #6,W0
2612:  CPSGT   W1,W0
2614:  BRA     2600
2616:  MOV.B   92A,W0L
2618:  SE      W0,W0
261A:  MOV     #0,W4
261C:  CALL    14EA
2620:  MOV     #9,W1
2622:  MOV     W1,W0
2624:  CLR.B   1
2626:  CALL    E24
262A:  INC     W1,W1
262C:  BTSC.B  223.1
262E:  BRA     262C
2630:  MOV     W0,224
2632:  MOV     #D,W0
2634:  CPSGT   W1,W0
2636:  BRA     2622
2638:  MOV.B   92B,W0L
263A:  SE      W0,W0
263C:  MOV     #0,W4
263E:  CALL    14EA
2642:  MOV     #10,W1
2644:  MOV     W1,W0
2646:  CLR.B   1
2648:  CALL    E24
264C:  INC     W1,W1
264E:  BTSC.B  223.1
2650:  BRA     264E
2652:  MOV     W0,224
2654:  MOV     #16,W0
2656:  CPSGT   W1,W0
2658:  BRA     2644
265A:  MOV     92E,W2
265C:  MOV     92C,W1
265E:  MOV     #0,W0
2660:  CALL    230E
2664:  MOV     #2,W9
2666:  MOV     #C009,W10
2668:  CALL    243E
266C:  BTSC.B  223.1
266E:  BRA     266C
2670:  MOV     #A,W4
2672:  MOV     W4,224
....................   return flo; 
2674:  MOV     92C,W0
2676:  MOV     92E,W1
2678:  MOV     #14,W5
267A:  REPEAT  #4
267C:  MOV     [--W15],[W5--]
267E:  MOV     [--W15],W5
2680:  RETURN  
.................... } 
.................... // 
....................  
.................... // COMMANDS// 
.................... void setHome() { 
*
13FA:  MOV     W5,[W15++]
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
13FC:  MOV     #E,W4
13FE:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
1400:  MOV     #E,W4
1402:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
1404:  MOV     #E,W4
1406:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
1408:  CLR     18C
....................   set_pwm_duty(2, 0); 
140A:  CLR     186
....................   set_pwm_duty(1, 0); 
140C:  CLR     180
....................   do { 
....................     Motor_z(-100,0); 
140E:  MOV     #FF9C,W4
1410:  MOV     W4,92E
1412:  CLR     930
1414:  CALL    1078
....................   } while (input(limitSw_z) == 1); 
1418:  BSET.B  2C0.4
141A:  BTSC.B  2C2.4
141C:  BRA     140E
....................   Motor_z(0,0); 
141E:  CLR     92E
1420:  CLR     930
1422:  CALL    1078
....................   do { 
....................     Motor_a(-100,0); 
1426:  MOV     #FF9C,W4
1428:  MOV     W4,934
142A:  CLR     936
142C:  CALL    1136
....................     Motor_b(-100,0); 
1430:  MOV     #FF9C,W4
1432:  MOV     W4,934
1434:  CLR     936
1436:  CALL    11EC
....................   } while (input(limitSw_y) == 1); 
143A:  BSET.B  2C0.2
143C:  BTSC.B  2C2.2
143E:  BRA     1426
....................   Motor_a(0,0); 
1440:  CLR     934
1442:  CLR     936
1444:  CALL    1136
....................   Motor_b(0,0); 
1448:  CLR     934
144A:  CLR     936
144C:  CALL    11EC
....................   do { 
....................     Motor_a(100,0); 
1450:  MOV     #64,W4
1452:  MOV     W4,934
1454:  CLR     936
1456:  CALL    1136
....................     Motor_b(-100,0); 
145A:  MOV     #FF9C,W4
145C:  MOV     W4,934
145E:  CLR     936
1460:  CALL    11EC
....................   } while (input(limitSw_x) == 1); 
1464:  BSET.B  2C9.0
1466:  BTSC.B  2CB.0
1468:  BRA     1450
....................   Motor_a(0,0); 
146A:  CLR     934
146C:  CLR     936
146E:  CALL    1136
....................   Motor_b(0,0); 
1472:  CLR     934
1474:  CLR     936
1476:  CALL    11EC
....................   printf("%d, %d, %d\n", count_a, count_b, count_z); 
147A:  MOV     8B0,W0
147C:  MOV     8B2,W1
147E:  MOV     #0,W4
1480:  CALL    12E6
1484:  BTSC.B  223.1
1486:  BRA     1484
1488:  MOV     #2C,W4
148A:  MOV     W4,224
148C:  BTSC.B  223.1
148E:  BRA     148C
1490:  MOV     #20,W4
1492:  MOV     W4,224
1494:  MOV     8B4,W0
1496:  MOV     8B6,W1
1498:  MOV     #0,W4
149A:  CALL    12E6
149E:  BTSC.B  223.1
14A0:  BRA     149E
14A2:  MOV     #2C,W4
14A4:  MOV     W4,224
14A6:  BTSC.B  223.1
14A8:  BRA     14A6
14AA:  MOV     #20,W4
14AC:  MOV     W4,224
14AE:  MOV     8B8,W0
14B0:  MOV     8BA,W1
14B2:  MOV     #0,W4
14B4:  CALL    12E6
14B8:  BTSC.B  223.1
14BA:  BRA     14B8
14BC:  MOV     #A,W4
14BE:  MOV     W4,224
....................   count_a = 0; 
14C0:  CLR     8B0
14C2:  CLR     8B2
....................   count_b = 0; 
14C4:  CLR     8B4
14C6:  CLR     8B6
....................   count_z = 0; 
14C8:  CLR     8B8
14CA:  CLR     8BA
....................   printf("done"); 
14CC:  MOV     #0,W1
14CE:  MOV     W1,W0
14D0:  CLR.B   1
14D2:  CALL    E4E
14D6:  INC     W1,W1
14D8:  BTSC.B  223.1
14DA:  BRA     14D8
14DC:  MOV     W0,224
14DE:  MOV     #3,W0
14E0:  CPSGT   W1,W0
14E2:  BRA     14CE
....................   getPackage = 0; 
14E4:  CLR     926
14E6:  MOV     [--W15],W5
14E8:  RETURN  
.................... } 
....................  
.................... void setPosAB() { 
*
19FE:  MOV     W5,[W15++]
1A00:  MOV     W6,[W15++]
1A02:  MOV.B   913,W0L
1A04:  MOV.B   W0L,W5L
1A06:  SE      W5,W5
1A08:  MOV.B   914,W0L
1A0A:  MOV.B   W0L,C
1A0C:  SE      W6,W6
1A0E:  MOV     W5,93A
1A10:  MOV     W6,93C
1A12:  CALL    15E0
1A16:  CLR     W1
1A18:  BTSC    W0.F
1A1A:  SETM    W1
1A1C:  MOV     W0,92A
1A1E:  MOV     W1,92C
1A20:  MOV.B   915,W0L
1A22:  MOV.B   W0L,W5L
1A24:  SE      W5,W5
1A26:  MOV.B   916,W0L
1A28:  MOV.B   W0L,C
1A2A:  SE      W6,W6
1A2C:  MOV     W5,93A
1A2E:  MOV     W6,93C
1A30:  CALL    15E0
1A34:  CLR     W1
1A36:  BTSC    W0.F
1A38:  SETM    W1
1A3A:  MOV     W0,92E
1A3C:  MOV     W1,930
....................   long r_a = mergeInts((int)array[3], (int)array[4]); 
....................   long r_b = mergeInts((int)array[5], (int)array[6]); 
....................   if ((int)array[7] == 1) { 
1A3E:  MOV.B   917,W0L
1A40:  MOV.B   W0L,W5L
1A42:  SE      W5,W5
1A44:  CP      W5,#1
1A46:  BRA     NZ,1A58
....................     r_a = 0 - r_a; 
1A48:  MOV     #0,W4
1A4A:  MOV     92A,W3
1A4C:  SUB     W4,W3,W0
1A4E:  MOV     W0,92A
1A50:  MOV     #0,W4
1A52:  MOV     92C,W3
1A54:  SUBB    W4,W3,W0
1A56:  MOV     W0,92C
....................   } 
....................   if ((int)array[8] == 1) { 
1A58:  MOV.B   918,W0L
1A5A:  MOV.B   W0L,A
1A5C:  SE      W5,W5
1A5E:  CP      W5,#1
1A60:  BRA     NZ,1A72
....................     r_b = 0 - r_b; 
1A62:  MOV     #0,W4
1A64:  MOV     92E,W3
1A66:  SUB     W4,W3,W0
1A68:  MOV     W0,92E
1A6A:  MOV     #0,W4
1A6C:  MOV     930,W3
1A6E:  SUBB    W4,W3,W0
1A70:  MOV     W0,930
....................   } 
....................   printf("r_a = %d\n", (int)r_a); 
1A72:  MOV     #0,W1
1A74:  MOV     W1,W0
1A76:  CLR.B   1
1A78:  CALL    E60
1A7C:  INC     W1,W1
1A7E:  BTSC.B  223.1
1A80:  BRA     1A7E
1A82:  MOV     W0,224
1A84:  MOV     #5,W0
1A86:  CPSGT   W1,W0
1A88:  BRA     1A74
1A8A:  MOV     92A,W0
1A8C:  MOV     #0,W4
1A8E:  CALL    14EA
1A92:  BTSC.B  223.1
1A94:  BRA     1A92
1A96:  MOV     #A,W4
1A98:  MOV     W4,224
....................   printf("r_b = %d\n", (int)r_b); 
1A9A:  MOV     #0,W1
1A9C:  MOV     W1,W0
1A9E:  CLR.B   1
1AA0:  CALL    E76
1AA4:  INC     W1,W1
1AA6:  BTSC.B  223.1
1AA8:  BRA     1AA6
1AAA:  MOV     W0,224
1AAC:  MOV     #5,W0
1AAE:  CPSGT   W1,W0
1AB0:  BRA     1A9C
1AB2:  MOV     92E,W0
1AB4:  MOV     #0,W4
1AB6:  CALL    14EA
1ABA:  BTSC.B  223.1
1ABC:  BRA     1ABA
1ABE:  MOV     #A,W4
1AC0:  MOV     W4,224
....................   while (abs(r_a - count_a) > tolerance_a || abs(r_b - count_b) > tolerance_b) { 
1AC2:  MOV     92A,W4
1AC4:  MOV     8B0,W3
1AC6:  SUB     W4,W3,W5
1AC8:  MOV     92C,W4
1ACA:  MOV     8B2,W3
1ACC:  SUBB    W4,W3,W6
1ACE:  MOV     W5,W0
1AD0:  MOV     W6,W1
1AD2:  BTSS    W1.F
1AD4:  BRA     1ADE
1AD6:  MOV     #0,W4
1AD8:  SUB     W4,W5,W0
1ADA:  MOV     #0,W4
1ADC:  SUBB    W4,W6,W1
1ADE:  MOV     W0,W5
1AE0:  MOV     W1,W6
1AE2:  MOV     8E0,W0
1AE4:  CLR     W1
1AE6:  BTSC    W0.F
1AE8:  SETM    W1
1AEA:  CP      W1,W6
1AEC:  BRA     LT,1B26
1AEE:  BRA     GT,1AF4
1AF0:  CP      W0,W5
1AF2:  BRA     NC,1B26
1AF4:  MOV     92E,W4
1AF6:  MOV     8B4,W3
1AF8:  SUB     W4,W3,W5
1AFA:  MOV     930,W4
1AFC:  MOV     8B6,W3
1AFE:  SUBB    W4,W3,W6
1B00:  MOV     W5,W0
1B02:  MOV     W6,W1
1B04:  BTSS    W1.F
1B06:  BRA     1B10
1B08:  MOV     #0,W4
1B0A:  SUB     W4,W5,W0
1B0C:  MOV     #0,W4
1B0E:  SUBB    W4,W6,W1
1B10:  MOV     W0,W5
1B12:  MOV     W1,W6
1B14:  MOV     8E2,W0
1B16:  CLR     W1
1B18:  BTSC    W0.F
1B1A:  SETM    W1
1B1C:  CP      W1,W6
1B1E:  BRA     GT,1BB8
1B20:  BRA     LT,1B26
1B22:  CP      W0,W5
1B24:  BRA     C,1BB8
....................     PID(r_a, count_a, a_s, a_p, a_u, K_Pa, K_Ia, K_Da); 
1B26:  PUSH    92A
1B28:  POP     934
1B2A:  PUSH    92C
1B2C:  POP     936
1B2E:  PUSH    8B0
1B30:  POP     938
1B32:  PUSH    8B2
1B34:  POP     93A
1B36:  PUSH    8CA
1B38:  POP     93C
1B3A:  CLR     93E
1B3C:  PUSH    8D6
1B3E:  POP     940
1B40:  CLR     942
1B42:  PUSH    8BE
1B44:  POP     944
1B46:  PUSH    8F2
1B48:  POP     946
1B4A:  PUSH    8F4
1B4C:  POP     948
1B4E:  PUSH    8F6
1B50:  POP     94A
1B52:  PUSH    8F8
1B54:  POP     94C
1B56:  PUSH    8FA
1B58:  POP     94E
1B5A:  PUSH    8FC
1B5C:  POP     950
1B5E:  CALL    195E
....................     PID(r_b, count_b, b_s, b_p, b_u, K_Pb, K_Ib, K_Db); 
1B62:  PUSH    92E
1B64:  POP     934
1B66:  PUSH    930
1B68:  POP     936
1B6A:  PUSH    8B4
1B6C:  POP     938
1B6E:  PUSH    8B6
1B70:  POP     93A
1B72:  PUSH    8CE
1B74:  POP     93C
1B76:  CLR     93E
1B78:  PUSH    8DA
1B7A:  POP     940
1B7C:  CLR     942
1B7E:  PUSH    8C2
1B80:  POP     944
1B82:  PUSH    8FE
1B84:  POP     946
1B86:  PUSH    900
1B88:  POP     948
1B8A:  PUSH    902
1B8C:  POP     94A
1B8E:  PUSH    904
1B90:  POP     94C
1B92:  PUSH    906
1B94:  POP     94E
1B96:  PUSH    908
1B98:  POP     950
1B9A:  CALL    195E
....................     Motor_a(u_a,1); 
1B9E:  PUSH    8BC
1BA0:  POP     934
1BA2:  MOV     #1,W4
1BA4:  MOV     W4,936
1BA6:  CALL    1136
....................     Motor_b(u_b,1); 
1BAA:  PUSH    8C0
1BAC:  POP     934
1BAE:  MOV     #1,W4
1BB0:  MOV     W4,936
1BB2:  CALL    11EC
1BB6:  BRA     1AC2
....................   } 
....................   Motor_a(0,0); 
1BB8:  CLR     934
1BBA:  CLR     936
1BBC:  CALL    1136
....................   Motor_b(0,0); 
1BC0:  CLR     934
1BC2:  CLR     936
1BC4:  CALL    11EC
....................   printf("position = %d, %d\n", count_a, count_b); 
1BC8:  MOV     #0,W1
1BCA:  MOV     W1,W0
1BCC:  CLR.B   1
1BCE:  CALL    E8C
1BD2:  INC     W1,W1
1BD4:  BTSC.B  223.1
1BD6:  BRA     1BD4
1BD8:  MOV     W0,224
1BDA:  MOV     #A,W0
1BDC:  CPSGT   W1,W0
1BDE:  BRA     1BCA
1BE0:  MOV     8B0,W0
1BE2:  MOV     8B2,W1
1BE4:  MOV     #0,W4
1BE6:  CALL    12E6
1BEA:  BTSC.B  223.1
1BEC:  BRA     1BEA
1BEE:  MOV     #2C,W4
1BF0:  MOV     W4,224
1BF2:  BTSC.B  223.1
1BF4:  BRA     1BF2
1BF6:  MOV     #20,W4
1BF8:  MOV     W4,224
1BFA:  MOV     8B4,W0
1BFC:  MOV     8B6,W1
1BFE:  MOV     #0,W4
1C00:  CALL    12E6
1C04:  BTSC.B  223.1
1C06:  BRA     1C04
1C08:  MOV     #A,W4
1C0A:  MOV     W4,224
....................   printf("done"); 
1C0C:  MOV     #0,W1
1C0E:  MOV     W1,W0
1C10:  CLR.B   1
1C12:  CALL    E4E
1C16:  INC     W1,W1
1C18:  BTSC.B  223.1
1C1A:  BRA     1C18
1C1C:  MOV     W0,224
1C1E:  MOV     #3,W0
1C20:  CPSGT   W1,W0
1C22:  BRA     1C0E
....................   getPackage = 0; 
1C24:  CLR     926
1C26:  MOV     [--W15],W6
1C28:  MOV     [--W15],W5
1C2A:  RETURN  
.................... } 
....................  
.................... void setPosZ() { 
1C2C:  MOV     W5,[W15++]
1C2E:  MOV     W6,[W15++]
1C30:  MOV.B   913,W0L
1C32:  MOV.B   W0L,W5L
1C34:  SE      W5,W5
1C36:  MOV.B   914,W0L
1C38:  MOV.B   W0L,C
1C3A:  SE      W6,W6
1C3C:  MOV     W5,93A
1C3E:  MOV     W6,93C
1C40:  CALL    15E0
1C44:  CLR     W1
1C46:  BTSC    W0.F
1C48:  SETM    W1
1C4A:  MOV     W0,92A
1C4C:  MOV     W1,92C
....................   long r_z = mergeInts((int)array[3], (int)array[4]); 
....................   printf("r_z = %d", (int)r_z); 
1C4E:  MOV     #0,W1
1C50:  MOV     W1,W0
1C52:  CLR.B   1
1C54:  CALL    EAC
1C58:  INC     W1,W1
1C5A:  BTSC.B  223.1
1C5C:  BRA     1C5A
1C5E:  MOV     W0,224
1C60:  MOV     #5,W0
1C62:  CPSGT   W1,W0
1C64:  BRA     1C50
1C66:  MOV     92A,W0
1C68:  MOV     #0,W4
1C6A:  CALL    14EA
....................   while (abs(r_z - count_z) > tolerance_z) { 
1C6E:  MOV     92A,W4
1C70:  MOV     8B8,W3
1C72:  SUB     W4,W3,W5
1C74:  MOV     92C,W4
1C76:  MOV     8BA,W3
1C78:  SUBB    W4,W3,W6
1C7A:  MOV     W5,W0
1C7C:  MOV     W6,W1
1C7E:  BTSS    W1.F
1C80:  BRA     1C8A
1C82:  MOV     #0,W4
1C84:  SUB     W4,W5,W0
1C86:  MOV     #0,W4
1C88:  SUBB    W4,W6,W1
1C8A:  MOV     W0,W5
1C8C:  MOV     W1,W6
1C8E:  MOV     8E4,W0
1C90:  CLR     W1
1C92:  BTSC    W0.F
1C94:  SETM    W1
1C96:  CP      W1,W6
1C98:  BRA     GT,1CEA
1C9A:  BRA     LT,1CA0
1C9C:  CP      W0,W5
1C9E:  BRA     C,1CEA
....................     PID(r_z, count_z, z_s, z_p, z_u, K_Pz, K_Iz, K_Dz); 
1CA0:  PUSH    92A
1CA2:  POP     934
1CA4:  PUSH    92C
1CA6:  POP     936
1CA8:  PUSH    8B8
1CAA:  POP     938
1CAC:  PUSH    8BA
1CAE:  POP     93A
1CB0:  PUSH    8D2
1CB2:  POP     93C
1CB4:  CLR     93E
1CB6:  PUSH    8DE
1CB8:  POP     940
1CBA:  CLR     942
1CBC:  PUSH    8C6
1CBE:  POP     944
1CC0:  PUSH    8E6
1CC2:  POP     946
1CC4:  PUSH    8E8
1CC6:  POP     948
1CC8:  PUSH    8EA
1CCA:  POP     94A
1CCC:  PUSH    8EC
1CCE:  POP     94C
1CD0:  PUSH    8EE
1CD2:  POP     94E
1CD4:  PUSH    8F0
1CD6:  POP     950
1CD8:  CALL    195E
....................     Motor_z(u_z,1); 
1CDC:  PUSH    8C4
1CDE:  POP     92E
1CE0:  MOV     #1,W4
1CE2:  MOV     W4,930
1CE4:  CALL    1078
1CE8:  BRA     1C6E
....................     // printf("count_z : %d\n",count_z); 
....................     // delay_ms(10); 
....................   } 
....................   Motor_z(0,0); 
1CEA:  CLR     92E
1CEC:  CLR     930
1CEE:  CALL    1078
....................   printf("position = %d\n", count_z); 
1CF2:  MOV     #0,W1
1CF4:  MOV     W1,W0
1CF6:  CLR.B   1
1CF8:  CALL    EC2
1CFC:  INC     W1,W1
1CFE:  BTSC.B  223.1
1D00:  BRA     1CFE
1D02:  MOV     W0,224
1D04:  MOV     #A,W0
1D06:  CPSGT   W1,W0
1D08:  BRA     1CF4
1D0A:  MOV     8B8,W0
1D0C:  MOV     8BA,W1
1D0E:  MOV     #0,W4
1D10:  CALL    12E6
1D14:  BTSC.B  223.1
1D16:  BRA     1D14
1D18:  MOV     #A,W4
1D1A:  MOV     W4,224
....................   printf("done"); 
1D1C:  MOV     #0,W1
1D1E:  MOV     W1,W0
1D20:  CLR.B   1
1D22:  CALL    E4E
1D26:  INC     W1,W1
1D28:  BTSC.B  223.1
1D2A:  BRA     1D28
1D2C:  MOV     W0,224
1D2E:  MOV     #3,W0
1D30:  CPSGT   W1,W0
1D32:  BRA     1D1E
....................   getPackage = 0; 
1D34:  CLR     926
1D36:  MOV     [--W15],W6
1D38:  MOV     [--W15],W5
1D3A:  RETURN  
.................... } 
....................  
.................... void gripClose() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1D3C:  MOV     #6,W4
1D3E:  MOV     W4,19C
....................   set_pwm_duty(5, 2600); 
1D40:  MOV     #A28,W4
1D42:  MOV     W4,198
....................   delay_ms(500); 
1D44:  MOV     #1F4,W0
1D46:  CALL    1068
....................   printf("done"); 
1D4A:  MOV     #0,W1
1D4C:  MOV     W1,W0
1D4E:  CLR.B   1
1D50:  CALL    E4E
1D54:  INC     W1,W1
1D56:  BTSC.B  223.1
1D58:  BRA     1D56
1D5A:  MOV     W0,224
1D5C:  MOV     #3,W0
1D5E:  CPSGT   W1,W0
1D60:  BRA     1D4C
....................   getPackage = 0; 
1D62:  CLR     926
1D64:  RETURN  
.................... } 
....................  
.................... void gripOpen() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1D66:  MOV     #6,W4
1D68:  MOV     W4,19C
....................   set_pwm_duty(5, 4200); 
1D6A:  MOV     #1068,W4
1D6C:  MOV     W4,198
....................   delay_ms(500); 
1D6E:  MOV     #1F4,W0
1D70:  CALL    1068
....................   printf("done"); 
1D74:  MOV     #0,W1
1D76:  MOV     W1,W0
1D78:  CLR.B   1
1D7A:  CALL    E4E
1D7E:  INC     W1,W1
1D80:  BTSC.B  223.1
1D82:  BRA     1D80
1D84:  MOV     W0,224
1D86:  MOV     #3,W0
1D88:  CPSGT   W1,W0
1D8A:  BRA     1D76
....................   getPackage = 0; 
1D8C:  CLR     926
1D8E:  RETURN  
.................... } 
....................  
.................... void gripRotate() { 
*
2148:  MOV     W5,[W15++]
214A:  MOV     W6,[W15++]
214C:  MOV     W7,[W15++]
214E:  MOV     W8,[W15++]
2150:  MOV.B   913,W0L
2152:  MOV.B   W0L,W5L
2154:  SE      W5,W5
2156:  MOV.B   914,W0L
2158:  MOV.B   W0L,C
215A:  SE      W6,W6
215C:  MOV     W5,93A
215E:  MOV     W6,93C
2160:  CALL    15E0
2164:  MOV     W0,92A
....................   int angle = mergeInts((int)array[3], (int)array[4]); 
....................   setup_compare(4, COMPARE_PWM | COMPARE_TIMER2); 
2166:  MOV     #6,W4
2168:  MOV     W4,196
....................   set_pwm_duty(4, (int)(((angle * 0.186) + 12) * 80)); 
216A:  MOV     92A,W0
216C:  CLR     W3
216E:  BTSC    W0.F
2170:  SETM    W3
2172:  MOV     W3,W1
2174:  MOV     W3,W2
2176:  CALL    1D90
217A:  MOV     #2B02,W4
217C:  MOV     #1687,W5
217E:  MOV     #CED9,W6
2180:  MOV     #3FC7,W7
2182:  CALL    1DF4
2186:  MOV     W0,W5
2188:  MOV     W1,W6
218A:  MOV     W2,W7
218C:  MOV     W3,W8
218E:  BCLR.B  43.0
2190:  MOV     W5,[W15++]
2192:  MOV     W6,[W15++]
2194:  MOV     W7,[W15++]
2196:  MOV     W5,W0
2198:  MOV     W6,W1
219A:  MOV     W7,W2
219C:  MOV     W8,W3
219E:  MOV     #0,W4
21A0:  MOV     #0,W5
21A2:  MOV     #0,W6
21A4:  MOV     #4028,W7
21A6:  CALL    1F04
21AA:  MOV     [--W15],W7
21AC:  MOV     [--W15],W6
21AE:  MOV     [--W15],W5
21B0:  MOV     W0,W5
21B2:  MOV     W1,W6
21B4:  MOV     W2,W7
21B6:  MOV     W3,W8
21B8:  MOV     W5,[W15++]
21BA:  MOV     W6,[W15++]
21BC:  MOV     W7,[W15++]
21BE:  MOV     W5,W0
21C0:  MOV     W6,W1
21C2:  MOV     W7,W2
21C4:  MOV     W8,W3
21C6:  MOV     #0,W4
21C8:  MOV     #0,W5
21CA:  MOV     #0,W6
21CC:  MOV     #4054,W7
21CE:  CALL    1DF4
21D2:  MOV     [--W15],W7
21D4:  MOV     [--W15],W6
21D6:  MOV     [--W15],W5
21D8:  CALL    20F2
21DC:  MOV     W0,W5
21DE:  MOV     W5,192
....................   delay_ms(500); 
21E0:  MOV     #1F4,W0
21E2:  CALL    1068
....................   printf("done"); 
21E6:  MOV     #0,W1
21E8:  MOV     W1,W0
21EA:  CLR.B   1
21EC:  CALL    E4E
21F0:  INC     W1,W1
21F2:  BTSC.B  223.1
21F4:  BRA     21F2
21F6:  MOV     W0,224
21F8:  MOV     #3,W0
21FA:  CPSGT   W1,W0
21FC:  BRA     21E8
....................   getPackage = 0; 
21FE:  CLR     926
2200:  MOV     [--W15],W8
2202:  MOV     [--W15],W7
2204:  MOV     [--W15],W6
2206:  MOV     [--W15],W5
2208:  RETURN  
.................... } 
....................  
.................... void setAGains() { 
....................   K_Pa = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
*
2682:  MOV.B   913,W0L
2684:  MOV.B   W0L,92A
2686:  MOV.B   914,W0L
2688:  MOV.B   W0L,92B
268A:  CALL    25C0
268E:  MOV     W0,8F2
2690:  MOV     W1,8F4
....................   K_Ia = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
2692:  MOV.B   915,W0L
2694:  MOV.B   W0L,92A
2696:  MOV.B   916,W0L
2698:  MOV.B   W0L,92B
269A:  CALL    25C0
269E:  MOV     W0,8F6
26A0:  MOV     W1,8F8
....................   K_Da = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
26A2:  MOV.B   917,W0L
26A4:  MOV.B   W0L,92A
26A6:  MOV.B   918,W0L
26A8:  MOV.B   W0L,92B
26AA:  CALL    25C0
26AE:  MOV     W0,8FA
26B0:  MOV     W1,8FC
....................   printf("done"); 
26B2:  MOV     #0,W1
26B4:  MOV     W1,W0
26B6:  CLR.B   1
26B8:  CALL    E4E
26BC:  INC     W1,W1
26BE:  BTSC.B  223.1
26C0:  BRA     26BE
26C2:  MOV     W0,224
26C4:  MOV     #3,W0
26C6:  CPSGT   W1,W0
26C8:  BRA     26B4
....................   getPackage = 0; 
26CA:  CLR     926
26CC:  RETURN  
.................... } 
....................  
.................... void setBGains() { 
....................   K_Pb = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
26CE:  MOV.B   913,W0L
26D0:  MOV.B   W0L,92A
26D2:  MOV.B   914,W0L
26D4:  MOV.B   W0L,92B
26D6:  CALL    25C0
26DA:  MOV     W0,8FE
26DC:  MOV     W1,900
....................   K_Ib = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
26DE:  MOV.B   915,W0L
26E0:  MOV.B   W0L,92A
26E2:  MOV.B   916,W0L
26E4:  MOV.B   W0L,92B
26E6:  CALL    25C0
26EA:  MOV     W0,902
26EC:  MOV     W1,904
....................   K_Db = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
26EE:  MOV.B   917,W0L
26F0:  MOV.B   W0L,92A
26F2:  MOV.B   918,W0L
26F4:  MOV.B   W0L,92B
26F6:  CALL    25C0
26FA:  MOV     W0,906
26FC:  MOV     W1,908
....................   printf("done"); 
26FE:  MOV     #0,W1
2700:  MOV     W1,W0
2702:  CLR.B   1
2704:  CALL    E4E
2708:  INC     W1,W1
270A:  BTSC.B  223.1
270C:  BRA     270A
270E:  MOV     W0,224
2710:  MOV     #3,W0
2712:  CPSGT   W1,W0
2714:  BRA     2700
....................   getPackage = 0; 
2716:  CLR     926
2718:  RETURN  
.................... } 
....................  
.................... void setZGains() { 
....................   K_Pz = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
271A:  MOV.B   913,W0L
271C:  MOV.B   W0L,92A
271E:  MOV.B   914,W0L
2720:  MOV.B   W0L,92B
2722:  CALL    25C0
2726:  MOV     W0,8E6
2728:  MOV     W1,8E8
....................   K_Iz = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
272A:  MOV.B   915,W0L
272C:  MOV.B   W0L,92A
272E:  MOV.B   916,W0L
2730:  MOV.B   W0L,92B
2732:  CALL    25C0
2736:  MOV     W0,8EA
2738:  MOV     W1,8EC
....................   K_Dz = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
273A:  MOV.B   917,W0L
273C:  MOV.B   W0L,92A
273E:  MOV.B   918,W0L
2740:  MOV.B   W0L,92B
2742:  CALL    25C0
2746:  MOV     W0,8EE
2748:  MOV     W1,8F0
....................   printf("done"); 
274A:  MOV     #0,W1
274C:  MOV     W1,W0
274E:  CLR.B   1
2750:  CALL    E4E
2754:  INC     W1,W1
2756:  BTSC.B  223.1
2758:  BRA     2756
275A:  MOV     W0,224
275C:  MOV     #3,W0
275E:  CPSGT   W1,W0
2760:  BRA     274C
....................   getPackage = 0; 
2762:  CLR     926
2764:  RETURN  
.................... } 
....................  
.................... void setTolerances(){ 
2766:  MOV     W5,[W15++]
2768:  MOV     W6,[W15++]
....................   tolerance_a = mergeInts((int)array[3], (int)array[4]); 
276A:  MOV.B   913,W0L
276C:  MOV.B   W0L,W5L
276E:  SE      W5,W5
2770:  MOV.B   914,W0L
2772:  MOV.B   W0L,C
2774:  SE      W6,W6
2776:  MOV     W5,93A
2778:  MOV     W6,93C
277A:  CALL    15E0
277E:  MOV     W0,8E0
....................   tolerance_b = mergeInts((int)array[5], (int)array[6]); 
2780:  MOV.B   915,W0L
2782:  MOV.B   W0L,W5L
2784:  SE      W5,W5
2786:  MOV.B   916,W0L
2788:  MOV.B   W0L,C
278A:  SE      W6,W6
278C:  MOV     W5,93A
278E:  MOV     W6,93C
2790:  CALL    15E0
2794:  MOV     W0,8E2
....................   tolerance_z = mergeInts((int)array[7], (int)array[8]); 
2796:  MOV.B   917,W0L
2798:  MOV.B   W0L,W5L
279A:  SE      W5,W5
279C:  MOV.B   918,W0L
279E:  MOV.B   W0L,C
27A0:  SE      W6,W6
27A2:  MOV     W5,93A
27A4:  MOV     W6,93C
27A6:  CALL    15E0
27AA:  MOV     W0,8E4
....................   printf("done"); 
27AC:  MOV     #0,W1
27AE:  MOV     W1,W0
27B0:  CLR.B   1
27B2:  CALL    E4E
27B6:  INC     W1,W1
27B8:  BTSC.B  223.1
27BA:  BRA     27B8
27BC:  MOV     W0,224
27BE:  MOV     #3,W0
27C0:  CPSGT   W1,W0
27C2:  BRA     27AE
....................   getPackage = 0; 
27C4:  CLR     926
27C6:  MOV     [--W15],W6
27C8:  MOV     [--W15],W5
27CA:  RETURN  
.................... } 
....................  
.................... int sumCheck() { 
*
1036:  CLR.B   92A
1038:  MOV.B   919,W0L
103A:  MOV.B   W0L,92B
....................   char sum = 0; 
....................   char checksum = array[9]; 
....................   for (int i = 0; i < 9; i++) { 
103C:  CLR     92C
103E:  MOV     92C,W4
1040:  CP      W4,#9
1042:  BRA     GE,1054
....................     sum = sum + (char)array[i]; 
1044:  MOV     #910,W4
1046:  MOV     92C,W3
1048:  ADD     W3,W4,W0
104A:  MOV     W0,W4
104C:  MOV.B   [W4],W0L
104E:  ADD.B   92A
1050:  INC     092C
1052:  BRA     103E
....................   } 
....................   sum = (char)sum; 
....................   if (sum == checksum) { 
1054:  MOV.B   92A,W0L
1056:  CP.B    92B
1058:  BRA     NZ,1062
....................     return 1; 
105A:  MOV     #1,W4
105C:  MOV     W4,0
105E:  BRA     1066
....................   } else { 
1060:  BRA     1066
....................     return 0; 
1062:  CLR     0
1064:  BRA     1066
....................   } 
1066:  RETURN  
.................... } 
.................... // 
....................  
.................... // 
.................... void main() { 
*
27CC:  MOV     #2780,W15
27CE:  MOV     #27FF,W0
27D0:  MOV     W0,20
27D2:  NOP     
27D4:  MOV     #4444,W0
27D6:  MOV     W0,A8
27D8:  BSET.B  81.7
27DA:  MOV     #46,W0
27DC:  MOV.B   W0L,742
27DE:  MOV     #57,W0
27E0:  MOV.B   W0L,742
27E2:  BCLR.B  742.6
27E4:  MOV     #63F,W0
27E6:  MOV     W0,680
27E8:  MOV     #3F05,W0
27EA:  MOV     W0,682
27EC:  MOV     #3F0C,W0
27EE:  MOV     W0,6A4
27F0:  MOV     #1615,W0
27F2:  MOV     W0,6C0
27F4:  MOV     #13,W0
27F6:  MOV     W0,6C4
27F8:  MOV     #12,W0
27FA:  MOV     W0,6CA
27FC:  MOV     #300,W0
27FE:  MOV     W0,6CC
2800:  MOV     #14,W0
2802:  MOV     W0,6CE
2804:  MOV     #46,W0
2806:  MOV.B   W0L,742
2808:  MOV     #57,W0
280A:  MOV.B   W0L,742
280C:  BSET.B  742.6
280E:  CLR     744
2810:  MOV     #8000,W4
2812:  MOV     W4,220
2814:  MOV     #400,W4
2816:  MOV     W4,222
2818:  BSET.B  220.3
281A:  MOV     #1A0,W4
281C:  MOV     W4,228
281E:  CLR     8B0
2820:  CLR     8B2
2822:  CLR     8B4
2824:  CLR     8B6
2826:  CLR     8B8
2828:  CLR     8BA
282A:  MOV     #8BC,W4
282C:  MOV     W4,8BE
282E:  MOV     #8C0,W4
2830:  MOV     W4,8C2
2832:  MOV     #8C4,W4
2834:  MOV     W4,8C6
2836:  CLR     8C8
2838:  MOV     #8C8,W4
283A:  MOV     W4,8CA
283C:  CLR     8CC
283E:  MOV     #8CC,W4
2840:  MOV     W4,8CE
2842:  CLR     8D0
2844:  MOV     #8D0,W4
2846:  MOV     W4,8D2
2848:  CLR     8D4
284A:  MOV     #8D4,W4
284C:  MOV     W4,8D6
284E:  CLR     8D8
2850:  MOV     #8D8,W4
2852:  MOV     W4,8DA
2854:  CLR     8DC
2856:  MOV     #8DC,W4
2858:  MOV     W4,8DE
285A:  MOV     #1E,W4
285C:  MOV     W4,8E0
285E:  MOV     #1E,W4
2860:  MOV     W4,8E2
2862:  MOV     #14,W4
2864:  MOV     W4,8E4
2866:  MOV     #999A,W4
2868:  MOV     W4,8E6
286A:  MOV     #3F19,W4
286C:  MOV     W4,8E8
286E:  MOV     #9BA6,W4
2870:  MOV     W4,8EA
2872:  MOV     #3AC4,W4
2874:  MOV     W4,8EC
2876:  CLR     8EE
2878:  CLR     8F0
287A:  CLR     8F2
287C:  MOV     #4000,W4
287E:  MOV     W4,8F4
2880:  MOV     #126F,W4
2882:  MOV     W4,8F6
2884:  MOV     #3A83,W4
2886:  MOV     W4,8F8
2888:  CLR     8FA
288A:  CLR     8FC
288C:  CLR     8FE
288E:  MOV     #4000,W4
2890:  MOV     W4,900
2892:  CLR     902
2894:  CLR     904
2896:  CLR     906
2898:  CLR     908
289A:  CLR     90A
289C:  CLR     90C
289E:  CLR     90E
28A0:  CLR.B   924
28A2:  CLR     926
28A4:  SETM    32C
28A6:  BRA     2940
28A8:  DATA    C0,06,08
28AA:  DATA    00,00,00
28AC:  DATA    4B,F0,3F
28AE:  DATA    5C,0A,58
28B0:  DATA    F6,3B,8F
28B2:  DATA    00,C0,3C
28B4:  DATA    8B,28,AC
28B6:  DATA    3C,BE,F6
28B8:  DATA    3F,D2,D5
28BA:  DATA    44,16,8C
28BC:  DATA    15,D7,BF
28BE:  DATA    69,00,5A
28C0:  DATA    2E,1B,87
28C2:  DATA    99,3F,9A
28C4:  DATA    5F,AD,4B
28C6:  DATA    91,E4,01
28C8:  DATA    C0,5D,11
28CA:  DATA    2F,92,E4
28CC:  DATA    81,FB,3F
28CE:  DATA    38,DA,91
28D0:  DATA    80,9D,C5
28D2:  DATA    E0,BF,6F
28D4:  DATA    12,C0,B4
28D6:  DATA    C3,09,AB
28D8:  DATA    3F,6B,C1
28DA:  DATA    03,4E,C1
28DC:  DATA    B5,45,BF
28DE:  DATA    F7,40,05
28E0:  DATA    FF,00,5A
28E2:  DATA    EF,3F,F3
28E4:  DATA    A3,E2,F7
28E6:  DATA    D7,FF,01
28E8:  DATA    40,C0,B4
28EA:  DATA    FF,05,3C
28EC:  DATA    58,FC,3F
28EE:  DATA    3B,D3,C0
28F0:  DATA    B5,BA,8C
28F2:  DATA    E2,3F,39
28F4:  DATA    D3,C7,3D
28F6:  DATA    41,79,B2
28F8:  DATA    3F,87,0D
28FA:  DATA    3C,50,D0
28FC:  DATA    AF,62,3F
28FE:  DATA    30,4B,8D
2900:  DATA    A2,82,AA
2902:  DATA    04,40,09
2904:  DATA    A0,40,4A
2906:  DATA    05,76,03
2908:  DATA    40,EC,9E
290A:  DATA    37,88,A6
290C:  DATA    44,F0,3F
290E:  DATA    8F,12,8D
2910:  DATA    29,9A,5B
2912:  DATA    C7,3F,0E
2914:  DATA    E0,80,7C
2916:  DATA    A1,D8,86
2918:  DATA    3F,29,4B
291A:  DATA    FB,95,C2
291C:  DATA    37,1A,3F
291E:  DATA    C0,14,09
2920:  DATA    10,00,00
2922:  DATA    00,00,00
2924:  INC     W2,W2
2926:  CP      W2,#1
2928:  BRA     NZ,2932
292A:  TBLRDL  [W1],W3
292C:  TBLRDH  [W1++],W4
292E:  MOV.B   6,W0L
2930:  RETURN  
2932:  CP      W2,#2
2934:  BRA     NZ,293A
2936:  MOV.B   7,W0L
2938:  RETURN  
293A:  MOV.B   8,W0L
293C:  CLR     W2
293E:  RETURN  
2940:  MOV     #0,W6
2942:  MOV     #0,W0
2944:  MOV     W0,32
2946:  MOV     #28A8,W0
2948:  MOV     W0,W1
294A:  CLR     W2
294C:  CALL    2924
2950:  MOV.B   W0L,B
2952:  CALL    2924
2956:  MOV.B   W0L,A
2958:  CP0     W5
295A:  BRA     Z,298E
295C:  BTSS    W5.F
295E:  BRA     296E
2960:  CALL    2924
2964:  MOV.B   W0L,D
2966:  CALL    2924
296A:  MOV.B   W0L,C
296C:  BCLR    W5.F
296E:  BTSS    W5.E
2970:  BRA     2982
2972:  BCLR    W5.E
2974:  DEC     W5,W5
2976:  CALL    2924
297A:  MOV.B   W0L,W7L
297C:  REPEAT  W5
297E:  MOV.B   W7L,[W6++]
2980:  BRA     294C
2982:  CALL    2924
2986:  MOV.B   W0L,[W6++]
2988:  DEC     W5,W5
298A:  BRA     NZ,2982
298C:  BRA     294C
....................   disable_interrupts(GLOBAL); 
298E:  BCLR.B  81.7
2990:  MOV     #E0,W4
2992:  MOV     W4,42
2994:  BSET.B  81.7
....................  
....................   clear_interrupt( 
....................       INT_RDA); // recommend style coding to confirm everything clear before use 
2996:  REPEAT  #3
2998:  MOV     226,W0
299A:  BCLR.B  85.3
....................  
....................   enable_interrupts(INT_RDA); 
299C:  BSET.B  95.3
....................   Init_Interrupts(); 
299E:  CALL    1028
....................   enable_interrupts(GLOBAL); 
29A2:  BCLR.B  81.7
29A4:  CLR     42
29A6:  BSET.B  81.7
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); 
29A8:  CLR     112
29AA:  MOV     #C8,W4
29AC:  MOV     W4,10E
29AE:  MOV     #8010,W4
29B0:  MOV     W4,112
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8, 8000); 
29B2:  CLR     110
29B4:  MOV     #1F40,W4
29B6:  MOV     W4,10C
29B8:  MOV     #8010,W4
29BA:  MOV     W4,110
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
29BC:  MOV     #E,W4
29BE:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
29C0:  MOV     #E,W4
29C2:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
29C4:  MOV     #E,W4
29C6:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
29C8:  CLR     18C
....................   set_pwm_duty(2, 0); 
29CA:  CLR     186
....................   set_pwm_duty(1, 0); 
29CC:  CLR     180
....................   count_a = 0; 
29CE:  CLR     8B0
29D0:  CLR     8B2
....................   count_b = 0; 
29D2:  CLR     8B4
29D4:  CLR     8B6
....................   count_z = 0; 
29D6:  CLR     8B8
29D8:  CLR     8BA
....................   // setPosAB(); 
....................   // gripOpen(); 
....................   // delay_ms(1000); 
....................   // gripClose(); 
....................   // delay_ms(1000); 
....................   // printf("System Ready!\r\n"); 
....................   while (TRUE) { 
....................     if (getPackage >= 1) { 
29DA:  MOV     926,W4
29DC:  CP      W4,#1
29DE:  BRA     LT,2A8C
....................       int received = sumCheck(); 
29E0:  CALL    1036
29E4:  MOV     W0,928
....................       if (!received) { 
29E6:  CP0     928
29E8:  BRA     NZ,2A06
....................         printf("resend"); 
29EA:  MOV     #0,W1
29EC:  MOV     W1,W0
29EE:  CLR.B   1
29F0:  CALL    EDE
29F4:  INC     W1,W1
29F6:  BTSC.B  223.1
29F8:  BRA     29F6
29FA:  MOV     W0,224
29FC:  MOV     #5,W0
29FE:  CPSGT   W1,W0
2A00:  BRA     29EC
....................         getPackage = 0; 
2A02:  CLR     926
....................       } else { 
2A04:  BRA     2A8C
....................         switch (array[2]) { 
2A06:  MOV.B   912,W0L
2A08:  CLR.B   1
2A0A:  XOR     #0,W0
2A0C:  BRA     Z,2A34
2A0E:  XOR     #1,W0
2A10:  BRA     Z,2A3A
2A12:  XOR     #3,W0
2A14:  BRA     Z,2A40
2A16:  XOR     #1,W0
2A18:  BRA     Z,2A46
2A1A:  XOR     #7,W0
2A1C:  BRA     Z,2A4C
2A1E:  XOR     #1,W0
2A20:  BRA     Z,2A52
2A22:  XOR     #3,W0
2A24:  BRA     Z,2A58
2A26:  XOR     #1,W0
2A28:  BRA     Z,2A5E
2A2A:  XOR     #F,W0
2A2C:  BRA     Z,2A64
2A2E:  XOR     #1,W0
2A30:  BRA     Z,2A6A
2A32:  BRA     2A70
....................         case 0: 
....................           setHome(); 
2A34:  CALL    13FA
....................           break; 
2A38:  BRA     2A8C
....................         case 1: 
....................           setPosAB(); 
2A3A:  CALL    19FE
....................           break; 
2A3E:  BRA     2A8C
....................         case 2: 
....................           setPosZ(); 
2A40:  CALL    1C2C
....................           break; 
2A44:  BRA     2A8C
....................         case 3: 
....................           gripClose(); 
2A46:  CALL    1D3C
....................           break; 
2A4A:  BRA     2A8C
....................         case 4: 
....................           gripOpen(); 
2A4C:  CALL    1D66
....................           break; 
2A50:  BRA     2A8C
....................         case 5: 
....................           gripRotate(); 
2A52:  CALL    2148
....................           break; 
2A56:  BRA     2A8C
....................         case 6: 
....................           setAGains(); 
2A58:  CALL    2682
....................           break; 
2A5C:  BRA     2A8C
....................         case 7: 
....................           setBGains(); 
2A5E:  CALL    26CE
....................           break; 
2A62:  BRA     2A8C
....................         case 8: 
....................           setZGains(); 
2A64:  CALL    271A
....................           break; 
2A68:  BRA     2A8C
....................         case 9: 
....................           setTolerances(); 
2A6A:  CALL    2766
....................           break; 
2A6E:  BRA     2A8C
....................         default: 
....................           printf("resend"); 
2A70:  MOV     #0,W1
2A72:  MOV     W1,W0
2A74:  CLR.B   1
2A76:  CALL    EDE
2A7A:  INC     W1,W1
2A7C:  BTSC.B  223.1
2A7E:  BRA     2A7C
2A80:  MOV     W0,224
2A82:  MOV     #5,W0
2A84:  CPSGT   W1,W0
2A86:  BRA     2A72
....................           getPackage = 0; 
2A88:  CLR     926
....................           break; 
2A8A:  BRA     2A8C
....................         } 
....................       } 
....................     } 
2A8C:  BRA     29DA
....................   } 
.................... } 
2A8E:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
