CCS PCD C Compiler, Version 5.015, 5967               24-Nov-18 19:16

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\SWT\project.lst

               ROM used:   7552 bytes (22%)
                           Largest free fragment is 23164
               RAM used:   424 (5%) at main() level
                           536 (7%) worst case
               Stack size: 128

*
0C00:  GOTO    26A8
*
0C24:  GOTO    EF2
*
0C50:  GOTO    FF6
*
0C74:  GOTO    F24
*
0C98:  GOTO    F56
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    6D,65,00
0E0A:  DATA    72,67,00
0E0C:  DATA    65,64,00
0E0E:  DATA    20,25,00
0E10:  DATA    64,20,00
0E12:  DATA    61,6E,00
0E14:  DATA    64,20,00
0E16:  DATA    25,64,00
0E18:  DATA    20,69,00
0E1A:  DATA    6E,74,00
0E1C:  DATA    6F,3A,00
0E1E:  DATA    20,25,00
0E20:  DATA    64,20,00
0E22:  DATA    0A,00,00
0E24:  CLR     32
0E26:  MOV     #E30,W3
0E28:  ADD     W3,W0,W0
0E2A:  TBLRDL.B[W0],W0L
0E2C:  CLR.B   1
0E2E:  RETURN  
0E30:  DATA    6D,65,00
0E32:  DATA    72,67,00
0E34:  DATA    65,64,00
0E36:  DATA    20,25,00
0E38:  DATA    64,20,00
0E3A:  DATA    61,6E,00
0E3C:  DATA    64,20,00
0E3E:  DATA    25,64,00
0E40:  DATA    20,69,00
0E42:  DATA    6E,74,00
0E44:  DATA    6F,3A,00
0E46:  DATA    20,25,00
0E48:  DATA    30,2E,00
0E4A:  DATA    32,66,00
0E4C:  DATA    0A,00,00
0E4E:  CLR     32
0E50:  MOV     #E5A,W3
0E52:  ADD     W3,W0,W0
0E54:  TBLRDL.B[W0],W0L
0E56:  CLR.B   1
0E58:  RETURN  
0E5A:  DATA    64,6F,00
0E5C:  DATA    6E,65,00
0E5E:  DATA    00,00,00
0E60:  CLR     32
0E62:  MOV     #E6C,W3
0E64:  ADD     W3,W0,W0
0E66:  TBLRDL.B[W0],W0L
0E68:  CLR.B   1
0E6A:  RETURN  
0E6C:  DATA    72,5F,00
0E6E:  DATA    61,20,00
0E70:  DATA    3D,20,00
0E72:  DATA    25,64,00
0E74:  DATA    0A,00,00
0E76:  CLR     32
0E78:  MOV     #E82,W3
0E7A:  ADD     W3,W0,W0
0E7C:  TBLRDL.B[W0],W0L
0E7E:  CLR.B   1
0E80:  RETURN  
0E82:  DATA    72,5F,00
0E84:  DATA    62,20,00
0E86:  DATA    3D,20,00
0E88:  DATA    25,64,00
0E8A:  DATA    0A,00,00
0E8C:  CLR     32
0E8E:  MOV     #E98,W3
0E90:  ADD     W3,W0,W0
0E92:  TBLRDL.B[W0],W0L
0E94:  CLR.B   1
0E96:  RETURN  
0E98:  DATA    70,6F,00
0E9A:  DATA    73,69,00
0E9C:  DATA    74,69,00
0E9E:  DATA    6F,6E,00
0EA0:  DATA    20,3D,00
0EA2:  DATA    20,25,00
0EA4:  DATA    64,2C,00
0EA6:  DATA    20,25,00
0EA8:  DATA    64,0A,00
0EAA:  DATA    00,00,00
0EAC:  CLR     32
0EAE:  MOV     #EB8,W3
0EB0:  ADD     W3,W0,W0
0EB2:  TBLRDL.B[W0],W0L
0EB4:  CLR.B   1
0EB6:  RETURN  
0EB8:  DATA    72,5F,00
0EBA:  DATA    7A,20,00
0EBC:  DATA    3D,20,00
0EBE:  DATA    25,64,00
0EC0:  DATA    00,00,00
0EC2:  CLR     32
0EC4:  MOV     #ECE,W3
0EC6:  ADD     W3,W0,W0
0EC8:  TBLRDL.B[W0],W0L
0ECA:  CLR.B   1
0ECC:  RETURN  
0ECE:  DATA    70,6F,00
0ED0:  DATA    73,69,00
0ED2:  DATA    74,69,00
0ED4:  DATA    6F,6E,00
0ED6:  DATA    20,3D,00
0ED8:  DATA    20,25,00
0EDA:  DATA    64,0A,00
0EDC:  DATA    00,00,00
0EDE:  CLR     32
0EE0:  MOV     #EEA,W3
0EE2:  ADD     W3,W0,W0
0EE4:  TBLRDL.B[W0],W0L
0EE6:  CLR.B   1
0EE8:  RETURN  
0EEA:  DATA    72,65,00
0EEC:  DATA    73,65,00
0EEE:  DATA    6E,64,00
0EF0:  DATA    00,00,00
*
119A:  MOV     W6,[W15++]
119C:  MOV     W7,[W15++]
119E:  MOV     W8,[W15++]
11A0:  MOV     W9,[W15++]
11A2:  CLR     W4
11A4:  CLR     W5
11A6:  CLR     W6
11A8:  CLR     W7
11AA:  XOR     W2,W3,W8
11AC:  BRA     Z,11D0
11AE:  MOV     #20,W8
11B0:  BCLR.B  42.0
11B2:  RLC     W0,W0
11B4:  RLC     W1,W1
11B6:  RLC     W4,W4
11B8:  RLC     W5,W5
11BA:  CP      W5,W3
11BC:  BRA     NZ,11C0
11BE:  CPB     W4,W2
11C0:  BRA     NC,11C8
11C2:  SUB     W4,W2,W4
11C4:  SUBB    W5,W3,W5
11C6:  BSET.B  42.0
11C8:  RLC     W6,W6
11CA:  RLC     W7,W7
11CC:  DEC     W8,W8
11CE:  BRA     NZ,11B0
11D0:  MOV     W7,W1
11D2:  MOV     W6,W0
11D4:  MOV     [--W15],W9
11D6:  MOV     [--W15],W8
11D8:  MOV     [--W15],W7
11DA:  MOV     [--W15],W6
11DC:  RETURN  
11DE:  MOV     W5,[W15++]
11E0:  MOV     #C,W5
11E2:  REPEAT  #7
11E4:  MOV     [W5++],[W15++]
11E6:  BTSS    W1.F
11E8:  BRA     11F8
11EA:  NEG     W0,W0
11EC:  BRA     Z,11F0
11EE:  BRA     NZ,11F4
11F0:  NEG     W1,W1
11F2:  BRA     11F6
11F4:  COM     W1,W1
11F6:  BSET    W4.8
11F8:  CLR     W5
11FA:  MOV     W0,W6
11FC:  MOV     W1,W7
11FE:  MOV     W4,W12
1200:  BCLR    W4.F
1202:  CP0.B   W4L
1204:  BRA     NZ,1208
1206:  BRA     1238
1208:  SUB.B   W4L,#B,W5L
120A:  BRA     NC,1238
120C:  SUB.B   W4L,W5L,W4L
120E:  BTSS    W12.F
1210:  BRA     1228
1212:  BTSS    W4.8
1214:  BRA     1224
1216:  MOV     #2D,W0
1218:  BTSC.B  223.1
121A:  BRA     1218
121C:  MOV     W0,224
121E:  BCLR    W4.8
1220:  DEC     W5,W5
1222:  BRA     N,1238
1224:  MOV     #30,W0
1226:  BRA     122A
1228:  MOV     #20,W0
122A:  BTSC.B  223.1
122C:  BRA     122A
122E:  MOV     W0,224
1230:  DEC     W5,W5
1232:  BRA     NN,122A
1234:  BTSC    W4.8
1236:  DEC.B   W4L,W4L
1238:  MOV     #E,W8
123A:  MOV     #0,W9
123C:  LNK     #10
123E:  MOV     W12,[W14+W8]
1240:  DEC2    W8,W8
1242:  BRA     NN,123E
1244:  MOV     W4,W5
1246:  MOV     #A,W4
1248:  BTSC    W5.8
124A:  INC     W4,W4
124C:  BSET    W5.E
124E:  BTSC    W12.F
1250:  BSET    W5.F
1252:  CP0.B   W5L
1254:  BRA     Z,1258
1256:  DEC.B   W5L,W5L
1258:  MOV     W4,[W14]
125A:  MOV     W5,[W14+#2]
125C:  MOV     W6,W0
125E:  MOV     W7,W1
1260:  MOV     #CA00,W2
1262:  MOV     #3B9A,W3
1264:  MOV     #2710,W8
1266:  BCLR    W13.F
1268:  BCLR.B  43.0
126A:  CALL    119A
126E:  BTG     W13.F
1270:  BTSC    W13.F
1272:  BRA     1282
1274:  MOV     W0,[W14+#8]
1276:  MOV     W1,[W14+#A]
1278:  MOV     W0,W2
127A:  MOV     W1,W3
127C:  MOV     [W14+#4],W0
127E:  MOV     [W14+#6],W1
1280:  BRA     1268
1282:  MOV     W2,[W14+#8]
1284:  MOV     W3,[W14+#A]
1286:  MOV     W4,[W14+#4]
1288:  MOV     W5,[W14+#6]
128A:  MOV     [W14],W4
128C:  MOV     [W14+#2],W5
128E:  MOV     #30,W6
1290:  CP0     W0
1292:  BRA     NZ,12B6
1294:  BTSS    W5.E
1296:  BRA     12BA
1298:  DEC     W4,W4
129A:  MOV     W4,[W14]
129C:  CP0     W4
129E:  BRA     Z,12BA
12A0:  CP.B    W4L,W5L
12A2:  BRA     Z,12A8
12A4:  BTSC.B  42.0
12A6:  BRA     12D8
12A8:  BTSS    W5.F
12AA:  BRA     12B2
12AC:  BTSS    W5.8
12AE:  BRA     12D0
12B0:  BRA     12C0
12B2:  MOV     #20,W6
12B4:  BRA     12D0
12B6:  BCLR    W5.E
12B8:  MOV     W5,[W14+#2]
12BA:  MOV     [W14+#2],W5
12BC:  BTSS    W5.8
12BE:  BRA     12D0
12C0:  BCLR    W5.8
12C2:  MOV     W5,[W14+#2]
12C4:  MOV     W0,W10
12C6:  MOV     #2D,W0
12C8:  BTSC.B  223.1
12CA:  BRA     12C8
12CC:  MOV     W0,224
12CE:  MOV     W10,W0
12D0:  ADD.B   W6L,W0L,W0L
12D2:  BTSC.B  223.1
12D4:  BRA     12D2
12D6:  MOV     W0,224
12D8:  MOV     [W14+#8],W0
12DA:  MOV     [W14+#A],W1
12DC:  MOV     #A,W2
12DE:  CLR     W3
12E0:  CP      W0,#1
12E2:  BRA     Z,12E6
12E4:  BRA     1268
12E6:  ULNK    
12E8:  MOV     #1A,W5
12EA:  REPEAT  #7
12EC:  MOV     [--W15],[W5--]
12EE:  MOV     [--W15],W5
12F0:  RETURN  
*
13C8:  MOV     W5,[W15++]
13CA:  MOV     #C,W5
13CC:  REPEAT  #3
13CE:  MOV     [W5++],[W15++]
13D0:  BTSS    W0.F
13D2:  BRA     13EC
13D4:  NEG     W0,W0
13D6:  BSET    W4.8
13D8:  BTSS    W4.F
13DA:  BRA     13EC
13DC:  MOV     W0,[W15++]
13DE:  MOV     #2D,W0
13E0:  BTSC.B  223.1
13E2:  BRA     13E0
13E4:  MOV     W0,224
13E6:  MOV     [--W15],W0
13E8:  BCLR    W4.8
13EA:  DEC.B   0008
13EC:  CLR     W5
13EE:  MOV     W0,W7
13F0:  MOV     W4,W9
13F2:  BCLR    W4.F
13F4:  CP0.B   W4L
13F6:  BRA     NZ,1404
13F8:  BTSC    W9.F
13FA:  BRA     1400
13FC:  MOV     #0,W5
13FE:  BRA     141E
1400:  MOV     #0,W5
1402:  BRA     141E
1404:  SUB.B   W4L,#6,W5L
1406:  BRA     NC,141C
1408:  MOV     #30,W0
140A:  BTSS    W9.F
140C:  MOV     #20,W0
140E:  BTSC.B  223.1
1410:  BRA     140E
1412:  MOV     W0,224
1414:  DEC     W5,W5
1416:  BRA     NN,140E
1418:  MOV     #5,W5
141A:  BRA     141E
141C:  MOV     W4,W5
141E:  MOV     #6,W4
1420:  BTSC    W5.8
1422:  INC     W4,W4
1424:  BSET    W5.E
1426:  BTSC    W9.F
1428:  BSET    W5.F
142A:  MOV     #2710,W8
142C:  REPEAT  #11
142E:  DIV.U   W7,W8
1430:  CALL    1474
1434:  MOV     W1,W7
1436:  MOV     #3E8,W8
1438:  REPEAT  #11
143A:  DIV.U   W7,W8
143C:  CALL    1474
1440:  MOV     W1,W7
1442:  MOV     #64,W8
1444:  REPEAT  #11
1446:  DIV.U   W7,W8
1448:  CALL    1474
144C:  MOV     W1,W7
144E:  MOV     #A,W8
1450:  REPEAT  #11
1452:  DIV.U   W7,W8
1454:  CALL    1474
1458:  BTSS    W9.8
145A:  BRA     1466
145C:  MOV     #2D,W0
145E:  BTSC.B  223.1
1460:  BRA     145E
1462:  MOV     W0,224
1464:  BCLR    W9.8
1466:  MOV     #30,W0
1468:  ADD.B   W1L,W0L,W0L
146A:  MOV     W0,2A
146C:  BTSC.B  223.1
146E:  BRA     146C
1470:  MOV     W0,224
1472:  BRA     14B4
1474:  MOV     #30,W6
1476:  CP0     W0
1478:  BRA     NZ,1496
147A:  BTSS    W5.E
147C:  BRA     14AA
147E:  DEC     W4,W4
1480:  CP.B    W4L,W5L
1482:  BRA     Z,1488
1484:  BTSC.B  42.0
1486:  RETURN  
1488:  CP0     W0
148A:  BRA     NZ,1496
148C:  BTSS    W5.E
148E:  BRA     14AA
1490:  BTSS    W5.F
1492:  MOV     #20,W6
1494:  BRA     14AA
1496:  BCLR    W5.E
1498:  BTSS    W9.8
149A:  BRA     14AA
149C:  MOV     W0,W10
149E:  MOV     #2D,W0
14A0:  BTSC.B  223.1
14A2:  BRA     14A0
14A4:  MOV     W0,224
14A6:  BCLR    W9.8
14A8:  MOV     W10,W0
14AA:  ADD.B   W6L,W0L,W0L
14AC:  BTSC.B  223.1
14AE:  BRA     14AC
14B0:  MOV     W0,224
14B2:  RETURN  
14B4:  MOV     #12,W5
14B6:  REPEAT  #3
14B8:  MOV     [--W15],[W5--]
14BA:  MOV     [--W15],W5
14BC:  RETURN  
*
1554:  MOV     W5,[W15++]
1556:  MOV     W6,[W15++]
1558:  MOV     W0,W4
155A:  MOV     W1,W5
155C:  CLR     W0
155E:  CLR     W1
1560:  BCLR    W6.0
1562:  BTSS    W5.F
1564:  BRA     1572
1566:  BSET    W6.0
1568:  NEG     W4,W4
156A:  BRA     Z,1570
156C:  COM     W5,W5
156E:  BRA     1572
1570:  NEG     W5,W5
1572:  IOR      W4,  W5,W3
1574:  BRA     Z,159C
1576:  CLR     W2
1578:  MOV     #B6,W1
157A:  BTSC    W2.7
157C:  BRA     158C
157E:  BCLR.B  42.0
1580:  RLC     W4,W4
1582:  RLC     W5,W5
1584:  RLC     W0,W0
1586:  RLC     W2,W2
1588:  DEC     W1,W1
158A:  BRA     NZ,157A
158C:  SWAP    W1
158E:  BCLR.B  42.0
1590:  RRC     W1,W1
1592:  BCLR    W1.F
1594:  BCLR    W2.7
1596:  XOR.B   W2L,W1L,W1L
1598:  BTSC    W6.0
159A:  BSET    W1.F
159C:  MOV     [--W15],W6
159E:  MOV     [--W15],W5
15A0:  RETURN  
15A2:  MOV     W5,[W15++]
15A4:  MOV     #C,W5
15A6:  REPEAT  #4
15A8:  MOV     [W5++],[W15++]
15AA:  MOV     W0,W4
15AC:  MOV     W1,W5
15AE:  MOV     W3,W7
15B0:  MOV     W2,W6
15B2:  BCLR.B  42.0
15B4:  BCLR.B  42.1
15B6:  RLC     W1,W1
15B8:  SWAP    W1
15BA:  AND     #FF,W1
15BC:  CP0     W1
15BE:  BRA     Z,1656
15C0:  BCLR.B  42.0
15C2:  BCLR.B  42.1
15C4:  RLC     W3,W3
15C6:  SWAP    W3
15C8:  AND     #FF,W3
15CA:  CP0     W3
15CC:  BRA     Z,1656
15CE:  ZE      W0,W0
15D0:  ADD.B   W3L,W1L,W0L
15D2:  BRA     C,15DC
15D4:  SUB     #7F,W0
15D6:  BRA     Z,1656
15D8:  BRA     NC,1656
15DA:  BRA     15E0
15DC:  ADD.B   #81,W0L
15DE:  BRA     C,1656
15E0:  XOR     W5,W7,W10
15E2:  BCLR.B  42.0
15E4:  BCLR.B  42.1
15E6:  AND     #FF,W5
15E8:  BSET    W5.7
15EA:  BCLR.B  42.0
15EC:  AND     #FF,W7
15EE:  BSET    W7.7
15F0:  MUL.UU  W4,W6,W2
15F2:  MUL.UU  W5,W6,W8
15F4:  ADDC    W8,W3,W3
15F6:  MOV     W9,W1
15F8:  BTSC.B  42.0
15FA:  INC     W1,W1
15FC:  BCLR.B  42.0
15FE:  MUL.UU  W7,W4,W8
1600:  ADDC    W8,W3,W3
1602:  ADDC    W9,W1,W1
1604:  MUL.UU  W5,W7,W8
1606:  ADDC    W8,W1,W1
1608:  INC     W0,W0
160A:  CP0     W1
160C:  BTSC.B  42.1
160E:  BRA     1612
1610:  BRA     1618
1612:  CP0     W3
1614:  BTSC.B  42.1
1616:  BRA     1622
1618:  BTSC    W1.F
161A:  BRA     1622
161C:  RLC     W3,W3
161E:  RLC     W1,W1
1620:  DEC     W0,W0
1622:  MOV     W1,W2
1624:  BCLR.B  42.0
1626:  BTSS    W3.7
1628:  BRA     163C
162A:  MOV     #FF00,W7
162C:  AND     W3,W7,W3
162E:  ADD     #100,W3
1630:  ADDC    W2,#0,W2
1632:  CP0     W2
1634:  BRA     NZ,163C
1636:  CP0     W3
1638:  BRA     NZ,163C
163A:  INC     W0,W0
163C:  SWAP    W0
163E:  BCLR.B  42.0
1640:  BCLR.B  42.1
1642:  RRC     W0,W1
1644:  BTSC    W10.F
1646:  BSET    W1.F
1648:  BCLR    W2.F
164A:  SWAP    W2
164C:  XOR.B   W2L,W1L,W1L
164E:  SWAP    W3
1650:  MOV.B   W3L,W2L
1652:  MOV     W2,W0
1654:  BRA     165C
1656:  MOV     #0,W0
1658:  MOV     #0,W1
165A:  BRA     165C
165C:  MOV     #14,W5
165E:  REPEAT  #4
1660:  MOV     [--W15],[W5--]
1662:  MOV     [--W15],W5
1664:  RETURN  
1666:  MOV     W5,[W15++]
1668:  MOV     #C,W5
166A:  REPEAT  #3
166C:  MOV     [W5++],[W15++]
166E:  CLR     W9
1670:  MOV     #8000,W8
1672:  BTSC.B  43.0
1674:  XOR     W8,W3,W3
1676:  CP0     W0
1678:  BRA     NZ,1680
167A:  MOV     #7FFF,W10
167C:  AND     W1,W10,W10
167E:  BTSS.B  42.1
1680:  MOV     W1,W10
1682:  XOR     W3,W10,W11
1684:  MOV     W1,W6
1686:  MOV     W3,W7
1688:  MOV     W3,W12
168A:  BCLR.B  42.1
168C:  BCLR.B  42.0
168E:  RLC     W6,W6
1690:  SWAP    W6
1692:  AND     #FF,W6
1694:  CP0     W6
1696:  BRA     Z,17DA
1698:  BCLR.B  42.1
169A:  BCLR.B  42.0
169C:  RLC     W7,W7
169E:  SWAP    W7
16A0:  AND     #FF,W7
16A2:  CP0     W7
16A4:  BRA     Z,17E4
16A6:  BCLR.B  42.1
16A8:  BCLR.B  42.0
16AA:  CP      W7,W6
16AC:  BRA     Z,17E6
16AE:  BRA     N,17F6
16B0:  BCLR    W9.0
16B2:  BSET    W9.1
16B4:  SUB     W7,W6,W8
16B6:  MOV     W7,W6
16B8:  AND     #FF,W1
16BA:  BSET    W1.7
16BC:  AND     #FF,W3
16BE:  BSET    W3.7
16C0:  MOV     #28,W7
16C2:  CP      W7,W8
16C4:  BRA     N,16E8
16C6:  BCLR.B  42.1
16C8:  BCLR.B  42.0
16CA:  RRC     W1,W1
16CC:  RRC     W0,W0
16CE:  DEC     W8,W8
16D0:  BRA     NZ,16C6
16D2:  BRA     16EE
16D4:  MOV     #28,W7
16D6:  CP      W7,W8
16D8:  BRA     N,16EC
16DA:  BCLR.B  42.1
16DC:  BCLR.B  42.0
16DE:  RRC     W3,W3
16E0:  RRC     W2,W2
16E2:  DEC     W8,W8
16E4:  BRA     NZ,16DA
16E6:  BRA     1706
16E8:  MOV     W2,W0
16EA:  MOV     W3,W1
16EC:  BRA     1774
16EE:  BTSS    W11.F
16F0:  BRA     1714
16F2:  BTSC    W9.4
16F4:  MOV     W12,W11
16F6:  NEG     W0,W0
16F8:  BRA     Z,16FE
16FA:  COM.B   W1L,W1L
16FC:  BRA     1700
16FE:  NEG     W1,W1
1700:  BTSC    W9.4
1702:  BRA     175A
1704:  BRA     1714
1706:  BTSS    W11.F
1708:  BRA     1714
170A:  NEG     W2,W2
170C:  BRA     Z,1712
170E:  COM.B   W3L,W3L
1710:  BRA     1714
1712:  NEG     W3,W3
1714:  AND     #FF,W5
1716:  BCLR.B  42.1
1718:  BCLR.B  42.0
171A:  ADD     W0,W2,W0
171C:  ADDC.B  W1L,W3L,W1L
171E:  BTSC.B  42.0
1720:  BSET    W9.3
1722:  BTSC    W9.0
1724:  BRA     1738
1726:  BTSC    W9.1
1728:  BRA     172C
172A:  BRA     1742
172C:  BTSC    W11.F
172E:  BRA     175A
1730:  BTSC    W9.3
1732:  BRA     1786
1734:  BSET    W9.6
1736:  BRA     1774
1738:  BTSC    W11.F
173A:  BRA     175A
173C:  BTSC    W9.3
173E:  BRA     1786
1740:  BRA     1774
1742:  BCLR    W9.2
1744:  BTSC    W11.F
1746:  BRA     1750
1748:  MOV     W10,W11
174A:  BTSC    W9.3
174C:  BRA     1786
174E:  BRA     17BC
1750:  BSET    W9.4
1752:  XOR.B   #80,W1L
1754:  BTSC    W1.7
1756:  BRA     16F2
1758:  MOV     W10,W11
175A:  AND     #FF,W1
175C:  IOR      W0,  W1,W7
175E:  BRA     Z,1774
1760:  BTSC    W1.7
1762:  BRA     1774
1764:  BCLR.B  42.1
1766:  BCLR.B  42.0
1768:  RLC     W0,W0
176A:  RLC     W1,W1
176C:  DEC     W6,W6
176E:  BTSC.B  42.1
1770:  BRA     17D4
1772:  BRA     1760
1774:  BTSC    W9.0
1776:  MOV     W10,W11
1778:  BTSC    W9.1
177A:  MOV     W12,W11
177C:  BTSS    W9.5
177E:  BRA     17B4
1780:  BTSC    W10.F
1782:  BSET    W0.8
1784:  BRA     17BC
1786:  BSET.B  42.0
1788:  RRC.B   W1L,W1L
178A:  RRC     W0,W0
178C:  BTSC.B  42.0
178E:  BSET    W9.5
1790:  INC     W6,W6
1792:  BRA     Z,17D4
1794:  BTSS    W9.5
1796:  BRA     17A8
1798:  INC     W0,W0
179A:  BRA     NZ,17A8
179C:  INC.B   W1L,W1L
179E:  BRA     NZ,17A8
17A0:  RRC.B   W1L,W1L
17A2:  RRC     W0,W0
17A4:  INC     W6,W6
17A6:  BRA     Z,17D4
17A8:  BTSC    W9.0
17AA:  MOV     W10,W11
17AC:  BTSC    W9.1
17AE:  MOV     W12,W11
17B0:  BTSC.B  42.1
17B2:  BRA     17D4
17B4:  BTSC    W9.6
17B6:  MOV     W10,W11
17B8:  BTSC    W9.7
17BA:  MOV     W12,W11
17BC:  IOR      W0,  W1,W2
17BE:  BRA     Z,1806
17C0:  BCLR    W1.7
17C2:  SWAP    W6
17C4:  BCLR.B  42.1
17C6:  BCLR.B  42.0
17C8:  RRC     W6,W6
17CA:  XOR     W6,W1,W1
17CC:  BSET    W1.F
17CE:  BTSS    W11.F
17D0:  BCLR    W1.F
17D2:  BRA     1806
17D4:  MOV     #0,W0
17D6:  MOV     #0,W1
17D8:  BRA     1806
17DA:  BTSC    W10.F
17DC:  XOR     W8,W3,W3
17DE:  MOV     W2,W0
17E0:  MOV     W3,W1
17E2:  BRA     1806
17E4:  BRA     1806
17E6:  AND     #FF,W3
17E8:  BSET    W3.7
17EA:  AND     #FF,W1
17EC:  BSET    W1.7
17EE:  BTSC    W11.F
17F0:  BCLR    W3.7
17F2:  BSET    W9.2
17F4:  BRA     1706
17F6:  SUB     W6,W7,W8
17F8:  AND     #FF,W1
17FA:  BSET    W1.7
17FC:  AND     #FF,W3
17FE:  BSET    W3.7
1800:  BCLR    W9.1
1802:  BSET    W9.0
1804:  BRA     16D4
1806:  MOV     #12,W5
1808:  REPEAT  #3
180A:  MOV     [--W15],[W5--]
180C:  MOV     [--W15],W5
180E:  RETURN  
1810:  MOV     W0,W2
1812:  MOV     W1,W3
1814:  MOV.B   W1L,W0L
1816:  SWAP    W0
1818:  BSET    W0.F
181A:  RLC     W1,W1
181C:  SWAP    W1
181E:  ZE      W1,W1
1820:  MOV     #8E,W4
1822:  SUB.B   W4L,W1L,W1L
1824:  BRA     Z,1832
1826:  CP0     W0
1828:  BRA     Z,1832
182A:  BCLR.B  42.0
182C:  RRC     W0,W0
182E:  DEC     W1,W1
1830:  BRA     NZ,1826
1832:  BTSS    W3.F
1834:  BRA     183A
1836:  NEG     W0,W0
1838:  BRA     183A
183A:  RETURN  
*
1C6C:  MOV     W5,[W15++]
1C6E:  MOV     #C,W5
1C70:  REPEAT  #3
1C72:  MOV     [W5++],[W15++]
1C74:  MOV     W0,W4
1C76:  MOV     W1,W5
1C78:  MOV     W2,W6
1C7A:  MOV     W3,W7
1C7C:  CLR     W0
1C7E:  CLR     W1
1C80:  CLR     W2
1C82:  CLR     W3
1C84:  BCLR    W8.0
1C86:  BTSS    W7.F
1C88:  BRA     1C94
1C8A:  BSET    W8.0
1C8C:  NEG     W4,W4
1C8E:  COM     W5,W5
1C90:  COM     W6,W6
1C92:  COM     W7,W7
1C94:  IOR      W4,  W5,W9
1C96:  BRA     NZ,1C9C
1C98:  IOR      W6,  W7,W9
1C9A:  BRA     Z,1CC6
1C9C:  MOV     #473,W9
1C9E:  BTSC    W3.4
1CA0:  BRA     1CB8
1CA2:  BCLR.B  42.0
1CA4:  RLC     W4,W4
1CA6:  RLC     W5,W5
1CA8:  RLC     W6,W6
1CAA:  RLC     W7,W7
1CAC:  RLC     W0,W0
1CAE:  RLC     W1,W1
1CB0:  RLC     W2,W2
1CB2:  RLC     W3,W3
1CB4:  DEC     W9,W9
1CB6:  BRA     NZ,1C9E
1CB8:  SL      W9,#4,W9
1CBA:  BCLR.B  42.0
1CBC:  BCLR    W9.F
1CBE:  BCLR    W3.4
1CC0:  XOR     W9,W3,W3
1CC2:  BTSC    W8.0
1CC4:  BSET    W3.F
1CC6:  MOV     #12,W5
1CC8:  REPEAT  #3
1CCA:  MOV     [--W15],[W5--]
1CCC:  MOV     [--W15],W5
1CCE:  RETURN  
1CD0:  MOV     W8,[W15++]
1CD2:  MOV     #12,W8
1CD4:  REPEAT  #4
1CD6:  MOV     [W8++],[W15++]
1CD8:  CLR     W11
1CDA:  MUL.UU  W12,#0,W12
1CDC:  MOV     W3,W8
1CDE:  MOV     W7,W9
1CE0:  MOV     #7FF,W10
1CE2:  BCLR.B  42.0
1CE4:  BCLR.B  42.1
1CE6:  ASR     W8,#4,W8
1CE8:  AND     W10,W8,W8
1CEA:  CP0     W8
1CEC:  BRA     Z,1DD0
1CEE:  BCLR.B  42.0
1CF0:  BCLR.B  42.1
1CF2:  ASR     W9,#4,W9
1CF4:  AND     W10,W9,W9
1CF6:  CP0     W9
1CF8:  BRA     Z,1DD0
1CFA:  ADD     W9,W8,W8
1CFC:  BTSC    W9.B
1CFE:  BRA     1D08
1D00:  SUB     #3FF,W8
1D02:  BRA     Z,1DD0
1D04:  BRA     NC,1DD0
1D06:  BRA     1D0E
1D08:  MOV     #401,W10
1D0A:  ADD.B   W10L,W5L,W5L
1D0C:  BRA     C,1DD0
1D0E:  XOR     W3,W7,W13
1D10:  BCLR.B  42.0
1D12:  BCLR.B  42.1
1D14:  AND     #F,W3
1D16:  BSET    W3.4
1D18:  AND     #F,W7
1D1A:  BSET    W7.4
1D1C:  MOV     W8,[W15++]
1D1E:  MUL.UU  W4,W1,W8
1D20:  MUL.UU  W5,W0,W10
1D22:  ADD     W8,W10,W10
1D24:  ADDC    W9,W11,W11
1D26:  ADDC    #0,W12
1D28:  MUL.UU  W4,W2,W8
1D2A:  ADD     W8,W11,W11
1D2C:  ADDC    W9,W12,W12
1D2E:  MUL.UU  W5,W1,W8
1D30:  CLR     W10
1D32:  ADD     W8,W11,W11
1D34:  ADDC    W9,W12,W12
1D36:  ADDC    #0,W10
1D38:  MUL.UU  W6,W0,W8
1D3A:  ADD     W8,W11,W11
1D3C:  ADDC    W9,W12,W12
1D3E:  ADDC    #0,W10
1D40:  CLR     W11
1D42:  MUL.UU  W4,W3,W8
1D44:  ADD     W8,W12,W12
1D46:  ADDC    W9,W10,W10
1D48:  ADDC    #0,W11
1D4A:  MUL.UU  W5,W2,W8
1D4C:  ADD     W8,W12,W12
1D4E:  ADDC    W9,W10,W10
1D50:  ADDC    #0,W11
1D52:  MUL.UU  W6,W1,W8
1D54:  ADD     W8,W12,W12
1D56:  ADDC    W9,W10,W10
1D58:  ADDC    #0,W11
1D5A:  MUL.UU  W7,W0,W8
1D5C:  ADD     W8,W12,W12
1D5E:  ADDC    W9,W10,W10
1D60:  ADDC    #0,W11
1D62:  MOV     W12,W0
1D64:  CLR     W12
1D66:  MUL.UU  W5,W3,W8
1D68:  ADD     W8,W10,W10
1D6A:  ADDC    W9,W11,W11
1D6C:  ADDC    #0,W12
1D6E:  MUL.UU  W6,W2,W8
1D70:  ADD     W8,W10,W10
1D72:  ADDC    W9,W11,W11
1D74:  ADDC    #0,W12
1D76:  MUL.UU  W6,W3,W8
1D78:  ADD     W8,W11,W11
1D7A:  ADDC    W9,W12,W12
1D7C:  MUL.UU  W7,W1,W8
1D7E:  ADD     W8,W10,W10
1D80:  ADDC    W9,W11,W11
1D82:  ADDC    #0,W12
1D84:  MUL.UU  W7,W2,W8
1D86:  ADD     W8,W11,W11
1D88:  ADDC    W9,W12,W12
1D8A:  MUL.UU  W7,W3,W8
1D8C:  ADD     W8,W12,W12
1D8E:  MOV     W10,W1
1D90:  MOV     W11,W2
1D92:  MOV     W12,W3
1D94:  MOV     #5,W4
1D96:  BCLR.B  42.0
1D98:  RRC     W3,W3
1D9A:  RRC     W2,W2
1D9C:  RRC     W1,W1
1D9E:  RRC     W0,W0
1DA0:  DEC     W4,W4
1DA2:  BRA     NZ,1D96
1DA4:  MOV     [--W15],W8
1DA6:  INC     W8,W8
1DA8:  IOR      W0,  W1,W6
1DAA:  BRA     Z,1DAE
1DAC:  BRA     1DB2
1DAE:  IOR      W2,  W3,W6
1DB0:  BRA     Z,1DC2
1DB2:  BTSC    W3.4
1DB4:  BRA     1DC2
1DB6:  BCLR.B  42.0
1DB8:  RLC     W0,W0
1DBA:  RLC     W1,W1
1DBC:  RLC     W2,W2
1DBE:  RLC     W3,W3
1DC0:  DEC     W8,W8
1DC2:  SL      W8,#4,W8
1DC4:  BCLR    W3.F
1DC6:  BTSC    W13.F
1DC8:  BSET    W3.F
1DCA:  BCLR    W3.4
1DCC:  XOR     W8,W3,W3
1DCE:  BRA     1DD6
1DD0:  MUL.UU  W0,#0,W0
1DD2:  MUL.UU  W0,#0,W2
1DD4:  BRA     1DD6
1DD6:  MOV     #1A,W8
1DD8:  REPEAT  #4
1DDA:  MOV     [--W15],[W8--]
1DDC:  MOV     [--W15],W8
1DDE:  RETURN  
1DE0:  MOV     W8,[W15++]
1DE2:  MOV     #12,W8
1DE4:  REPEAT  #4
1DE6:  MOV     [W8++],[W15++]
1DE8:  MOV     #8000,W8
1DEA:  BTSC.B  43.0
1DEC:  XOR     W8,W7,W7
1DEE:  CP0     W0
1DF0:  BRA     NZ,1E00
1DF2:  CP0     W1
1DF4:  BRA     NZ,1E00
1DF6:  CP0     W2
1DF8:  BRA     NZ,1E00
1DFA:  MOV     #7FFF,W10
1DFC:  AND     W3,W10,W10
1DFE:  BTSS.B  42.1
1E00:  MOV     W3,W10
1E02:  XOR     W7,W10,W11
1E04:  MOV     W3,W8
1E06:  MOV     W7,W9
1E08:  MOV     W7,W12
1E0A:  MOV     #7FF,W13
1E0C:  BCLR.B  42.1
1E0E:  BCLR.B  42.0
1E10:  ASR     W8,#4,W8
1E12:  AND     W13,W8,W8
1E14:  CP0     W8
1E16:  BRA     Z,1F90
1E18:  BCLR.B  42.1
1E1A:  BCLR.B  42.0
1E1C:  ASR     W9,#4,W9
1E1E:  AND     W13,W9,W9
1E20:  CP0     W9
1E22:  BRA     Z,1FA0
1E24:  CLR     W13
1E26:  BCLR.B  42.1
1E28:  BCLR.B  42.0
1E2A:  CP      W9,W8
1E2C:  BRA     Z,1FA2
1E2E:  BRA     N,1FB2
1E30:  BCLR    W13.0
1E32:  BSET    W13.1
1E34:  SUB     W9,W8,W8
1E36:  AND     #F,W3
1E38:  BSET    W3.4
1E3A:  AND     #F,W7
1E3C:  BSET    W7.4
1E3E:  SUB     #34,W8
1E40:  BRA     NN,1E6E
1E42:  ADD     #34,W8
1E44:  BCLR.B  42.1
1E46:  BCLR.B  42.0
1E48:  RRC     W3,W3
1E4A:  RRC     W2,W2
1E4C:  RRC     W1,W1
1E4E:  RRC     W0,W0
1E50:  DEC     W8,W8
1E52:  BRA     NZ,1E44
1E54:  BRA     1E7E
1E56:  SUB     #34,W8
1E58:  BRA     NN,1E78
1E5A:  ADD     #34,W8
1E5C:  BCLR.B  42.1
1E5E:  BCLR.B  42.0
1E60:  RRC     W7,W7
1E62:  RRC     W6,W6
1E64:  RRC     W5,W5
1E66:  RRC     W4,W4
1E68:  DEC     W8,W8
1E6A:  BRA     NZ,1E5C
1E6C:  BRA     1EA4
1E6E:  MOV     W4,W0
1E70:  MOV     W5,W1
1E72:  MOV     W6,W2
1E74:  MOV     W7,W3
1E76:  XOR     W11,W12,W12
1E78:  BTSC    W12.F
1E7A:  BTG     W11.F
1E7C:  BRA     1F70
1E7E:  BTSS    W11.F
1E80:  BRA     1EC0
1E82:  BTSC    W13.4
1E84:  MOV     W12,W11
1E86:  COM     W0,W0
1E88:  COM     W1,W1
1E8A:  COM     W2,W2
1E8C:  COM.B   W3L,W3L
1E8E:  AND.B   #1F,W3L
1E90:  INC     W0,W0
1E92:  BRA     NZ,1E9E
1E94:  INC     W1,W1
1E96:  BRA     NZ,1E9E
1E98:  INC     W2,W2
1E9A:  BRA     NZ,1E9E
1E9C:  INC.B   W3L,W3L
1E9E:  BTSC    W13.4
1EA0:  BRA     1F06
1EA2:  BRA     1EC0
1EA4:  BTSS    W11.F
1EA6:  BRA     1EC0
1EA8:  COM     W4,W4
1EAA:  COM     W5,W5
1EAC:  COM     W6,W6
1EAE:  COM.B   W7L,W7L
1EB0:  AND.B   #1F,W7L
1EB2:  INC     W4,W4
1EB4:  BRA     NZ,1EC0
1EB6:  INC     W5,W5
1EB8:  BRA     NZ,1EC0
1EBA:  INC     W6,W6
1EBC:  BRA     NZ,1EC0
1EBE:  INC.B   W7L,W7L
1EC0:  BCLR.B  42.1
1EC2:  BCLR.B  42.0
1EC4:  ADD     W0,W4,W0
1EC6:  ADDC    W1,W5,W1
1EC8:  ADDC    W2,W6,W2
1ECA:  ADDC.B  W3L,W7L,W3L
1ECC:  BTSC    W3.5
1ECE:  BSET    W13.3
1ED0:  BTSC    W13.0
1ED2:  BRA     1EE6
1ED4:  BTSC    W13.1
1ED6:  BRA     1EDA
1ED8:  BRA     1EF0
1EDA:  BTSC    W11.F
1EDC:  BRA     1F06
1EDE:  BTSC    W13.3
1EE0:  BRA     1F34
1EE2:  BSET    W13.6
1EE4:  BRA     1F28
1EE6:  BTSC    W11.F
1EE8:  BRA     1F06
1EEA:  BTSC    W13.3
1EEC:  BRA     1F34
1EEE:  BRA     1F28
1EF0:  BTSC    W11.F
1EF2:  BRA     1EFC
1EF4:  MOV     W10,W11
1EF6:  BTSC    W13.3
1EF8:  BRA     1F34
1EFA:  BRA     1F70
1EFC:  BSET    W13.4
1EFE:  XOR.B   #10,W3L
1F00:  BTSC    W3.4
1F02:  BRA     1E82
1F04:  MOV     W10,W11
1F06:  AND     #1F,W3
1F08:  IOR      W3,  W2,W8
1F0A:  BRA     NZ,1F10
1F0C:  IOR      W1,  W0,W8
1F0E:  BRA     Z,1F28
1F10:  BTSC    W3.4
1F12:  BRA     1F28
1F14:  BCLR.B  42.1
1F16:  BCLR.B  42.0
1F18:  RLC     W0,W0
1F1A:  RLC     W1,W1
1F1C:  RLC     W2,W2
1F1E:  RLC     W3,W3
1F20:  DEC     W9,W9
1F22:  BTSC.B  42.1
1F24:  BRA     1F8A
1F26:  BRA     1F10
1F28:  BTSC    W13.0
1F2A:  MOV     W10,W11
1F2C:  BTSC    W13.1
1F2E:  MOV     W12,W11
1F30:  BTSS    W13.5
1F32:  BRA     1F70
1F34:  BCLR.B  42.0
1F36:  RRC.B   W3L,W3L
1F38:  RRC     W2,W2
1F3A:  RRC     W1,W1
1F3C:  RRC     W0,W0
1F3E:  BTSC.B  42.0
1F40:  BSET    W13.5
1F42:  INC     W9,W9
1F44:  BTSC.B  42.1
1F46:  BRA     1F8A
1F48:  BTSS    W13.5
1F4A:  BRA     1F68
1F4C:  INC     W0,W0
1F4E:  BRA     NZ,1F68
1F50:  INC     W1,W1
1F52:  BRA     NZ,1F68
1F54:  INC     W2,W2
1F56:  BRA     NZ,1F68
1F58:  INC     W3,W3
1F5A:  BRA     NZ,1F68
1F5C:  RRC.B   W3L,W3L
1F5E:  RRC     W2,W2
1F60:  RRC     W1,W1
1F62:  RRC     W0,W0
1F64:  INC     W9,W9
1F66:  BRA     Z,1F8A
1F68:  BTSC    W13.0
1F6A:  MOV     W10,W11
1F6C:  BTSC    W13.1
1F6E:  MOV     W12,W11
1F70:  IOR      W0,  W1,W4
1F72:  BRA     NZ,1F78
1F74:  IOR      W2,  W3,W4
1F76:  BRA     Z,1FC4
1F78:  BCLR    W3.4
1F7A:  BCLR.B  42.1
1F7C:  BCLR.B  42.0
1F7E:  SL      W9,#4,W9
1F80:  XOR     W9,W3,W3
1F82:  BSET    W3.F
1F84:  BTSS    W11.F
1F86:  BCLR    W3.F
1F88:  BRA     1FC4
1F8A:  MUL.UU  W0,#0,W0
1F8C:  MUL.UU  W2,#0,W2
1F8E:  BRA     1FC4
1F90:  MOV     #8000,W8
1F92:  BTSC    W10.F
1F94:  XOR     W8,W7,W7
1F96:  MOV     W5,W1
1F98:  MOV     W4,W0
1F9A:  MOV     W6,W2
1F9C:  MOV     W7,W3
1F9E:  BRA     1FC4
1FA0:  BRA     1FC4
1FA2:  AND     #F,W7
1FA4:  BSET    W7.4
1FA6:  AND     #F,W3
1FA8:  BSET    W3.4
1FAA:  BTSC    W11.F
1FAC:  BCLR    W7.4
1FAE:  BSET    W13.2
1FB0:  BRA     1EA4
1FB2:  AND     #F,W3
1FB4:  BSET    W3.4
1FB6:  AND     #F,W7
1FB8:  BSET    W7.4
1FBA:  SUB     W8,W9,W8
1FBC:  ADD     W8,W9,W9
1FBE:  BCLR    W13.1
1FC0:  BSET    W13.0
1FC2:  BRA     1E56
1FC4:  MOV     #1A,W8
1FC6:  REPEAT  #4
1FC8:  MOV     [--W15],[W8--]
1FCA:  MOV     [--W15],W8
1FCC:  RETURN  
1FCE:  MOV     W5,[W15++]
1FD0:  MOV     #C,W5
1FD2:  REPEAT  #5
1FD4:  MOV     [W5++],[W15++]
1FD6:  MOV     W3,W8
1FD8:  MOV     W2,W7
1FDA:  MOV     W1,W6
1FDC:  MOV     W0,W5
1FDE:  MOV     W3,W9
1FE0:  MOV     #473,W11
1FE2:  ASR     W3,#4,W3
1FE4:  MOV     #7FF,W10
1FE6:  AND     W10,W3,W3
1FE8:  SUB     W11,W3,W11
1FEA:  AND     #1F,W8
1FEC:  BSET    W8.4
1FEE:  CLR     W0
1FF0:  CLR     W1
1FF2:  CLR     W2
1FF4:  CLR     W3
1FF6:  BCLR.B  42.0
1FF8:  RRC     W8,W8
1FFA:  RRC     W7,W7
1FFC:  RRC     W6,W6
1FFE:  RRC     W5,W5
2000:  RRC     W3,W3
2002:  RRC     W2,W2
2004:  RRC     W1,W1
2006:  RRC     W0,W0
2008:  DEC     W11,W11
200A:  BRA     NZ,1FF6
200C:  BTSS    W9.F
200E:  BRA     201A
2010:  NEG     W0,W0
2012:  COM     W1,W1
2014:  COM     W2,W2
2016:  COM     W3,W3
2018:  BRA     201A
201A:  MOV     #16,W5
201C:  REPEAT  #5
201E:  MOV     [--W15],[W5--]
2020:  MOV     [--W15],W5
2022:  RETURN  
*
20E6:  MOV     W5,[W15++]
20E8:  MOV     W6,[W15++]
20EA:  MOV     #8E,W1
20EC:  CP0     W0
20EE:  BRA     Z,2114
20F0:  BTSC    W0.F
20F2:  BRA     20FC
20F4:  BCLR.B  42.0
20F6:  RLC     W0,W0
20F8:  DEC     W1,W1
20FA:  BRA     20F0
20FC:  SWAP    W1
20FE:  BCLR.B  42.0
2100:  RRC     W1,W1
2102:  BCLR    W0.F
2104:  SWAP    W0
2106:  XOR.B   W0L,W1L,W1L
2108:  AND.B   #0,W0L
210A:  BRA     211A
210C:  MOV.B   W1L,W0L
210E:  BSET    W1.7
2110:  AND.B   #0,W1L
2112:  BRA     211A
2114:  CLR     W0
2116:  CLR     W1
2118:  BRA     211A
211A:  MOV     [--W15],W6
211C:  MOV     [--W15],W5
211E:  RETURN  
2120:  MOV     W5,[W15++]
2122:  MOV     #C,W5
2124:  REPEAT  #4
2126:  MOV     [W5++],[W15++]
2128:  CLR     W9
212A:  XOR     W1,W3,W9
212C:  MOV     W1,W6
212E:  MOV     W0,W5
2130:  MOV     W3,W8
2132:  MOV     W2,W7
2134:  RLC     W1,W1
2136:  SWAP    W1
2138:  ZE      W1,W1
213A:  CP0     W1
213C:  BRA     Z,21DA
213E:  RLC     W3,W3
2140:  SWAP    W3
2142:  ZE      W3,W3
2144:  CP0     W3
2146:  BRA     Z,21DA
2148:  CLR     W0
214A:  SUB.B   W1L,W3L,W0L
214C:  BRA     NC,2154
214E:  ADD.B   #7F,W0L
2150:  BRA     C,21DA
2152:  BRA     215A
2154:  SUB.B   #81,W0L
2156:  BRA     NC,21DA
2158:  BRA     Z,21DA
215A:  MOV     W5,W1
215C:  MOV     W6,W2
215E:  BSET    W2.7
2160:  AND     #FF,W2
2162:  AND     #FF,W8
2164:  BSET    W8.7
2166:  MOV     #19,W10
2168:  CLR     W3
216A:  CLR     W4
216C:  SUB     W1,W7,W1
216E:  SUBB    W2,W8,W2
2170:  BRA     N,2176
2172:  BRA     C,217C
2174:  BRA     NZ,217E
2176:  ADD     W1,W7,W1
2178:  ADDC    W2,W8,W2
217A:  BRA     217E
217C:  BSET    W4.0
217E:  DEC     W10,W10
2180:  BRA     Z,2190
2182:  BCLR.B  42.0
2184:  RLC     W1,W1
2186:  RLC     W2,W2
2188:  BCLR.B  42.0
218A:  RLC     W4,W4
218C:  RLC     W3,W3
218E:  BRA     216C
2190:  CLR     W10
2192:  BTSC    W3.8
2194:  BRA     2198
2196:  BRA     21A4
2198:  BCLR.B  42.0
219A:  RRC     W3,W3
219C:  BCLR    W3.7
219E:  RRC     W4,W4
21A0:  RLC     W10,W10
21A2:  BRA     21A8
21A4:  DEC     W0,W0
21A6:  BRA     Z,21DA
21A8:  BTSC    W10.F
21AA:  BRA     NC,21B6
21AC:  RLC     W1,W1
21AE:  RLC     W2,W2
21B0:  SUB     W1,W7,W1
21B2:  SUBB    W2,W8,W2
21B4:  BRA     NC,21C8
21B6:  INC     W4,W4
21B8:  BRA     NZ,21C8
21BA:  INC     W3,W3
21BC:  BRA     NZ,21C8
21BE:  INC     W0,W0
21C0:  BRA     Z,21DA
21C2:  BRA     21C8
21C4:  DEC     W0,W0
21C6:  BRA     Z,21DA
21C8:  SWAP    W0
21CA:  RRC     W0,W1
21CC:  BSET    W1.F
21CE:  BTSS    W9.F
21D0:  BCLR    W1.F
21D2:  BCLR    W3.7
21D4:  XOR.B   W3L,W1L,W1L
21D6:  MOV     W4,W0
21D8:  BRA     21E0
21DA:  MOV     #0,W0
21DC:  MOV     #0,W1
21DE:  BRA     21E0
21E0:  MOV     #14,W5
21E2:  REPEAT  #4
21E4:  MOV     [--W15],[W5--]
21E6:  MOV     [--W15],W5
21E8:  RETURN  
21EA:  MOV     W5,[W15++]
21EC:  MOV     W2,W3
21EE:  MOV     W2,W5
21F0:  BCLR.B  42.0
21F2:  RLC     W3,W3
21F4:  SWAP    W3
21F6:  AND     #FF,W3
21F8:  BRA     NZ,2200
21FA:  MUL.UU  W0,#0,W0
21FC:  MUL.UU  W2,#0,W2
21FE:  BRA     222C
2200:  ADD     #380,W3
2202:  AND     #7F,W2
2204:  MOV     #3,W6
2206:  CLR     W4
2208:  BCLR.B  42.0
220A:  RRC     W2,W2
220C:  RRC     W1,W1
220E:  RRC     W0,W0
2210:  BTSC.B  42.0
2212:  INC     W4,W4
2214:  DEC     W6,W6
2216:  BRA     NZ,2208
2218:  BCLR    W2.7
221A:  SL      W3,#4,W3
221C:  BCLR    W3.F
221E:  BTSC    W5.F
2220:  BSET    W3.F
2222:  XOR     W2,W3,W3
2224:  MOV     W1,W2
2226:  MOV     W0,W1
2228:  ADD     W4,W1,W1
222A:  CLR     W0
222C:  MOV     [--W15],W5
222E:  RETURN  
2230:  MOV     W5,[W15++]
2232:  MOV     #C,W5
2234:  REPEAT  #5
2236:  MOV     [W5++],[W15++]
2238:  MOV     W3,W8
223A:  MOV     W2,W7
223C:  MOV     W1,W6
223E:  MOV     W0,W5
2240:  MOV     W3,W9
2242:  MOV     #473,W11
2244:  ASR     W3,#4,W3
2246:  MOV     #7FF,W10
2248:  AND     W10,W3,W3
224A:  SUB     W11,W3,W11
224C:  AND     #1F,W8
224E:  BSET    W8.4
2250:  CLR     W0
2252:  CLR     W1
2254:  CLR     W2
2256:  CLR     W3
2258:  BCLR.B  42.0
225A:  RRC     W8,W8
225C:  RRC     W7,W7
225E:  RRC     W6,W6
2260:  RRC     W5,W5
2262:  RRC     W3,W3
2264:  RRC     W2,W2
2266:  RRC     W1,W1
2268:  RRC     W0,W0
226A:  DEC     W11,W11
226C:  BRA     NZ,2258
226E:  BTSS    W9.F
2270:  BRA     227C
2272:  NEG     W0,W0
2274:  COM     W1,W1
2276:  COM     W2,W2
2278:  COM     W3,W3
227A:  BRA     227C
227C:  MOV     #16,W5
227E:  REPEAT  #5
2280:  MOV     [--W15],[W5--]
2282:  MOV     [--W15],W5
2284:  RETURN  
2286:  MOV     W12,[W15++]
2288:  MOV     W13,[W15++]
228A:  CLR     W8
228C:  CLR     W9
228E:  CLR     W10
2290:  CLR     W11
2292:  CLR     W12
2294:  CLR     W13
2296:  MOV     #E,W8
2298:  MOV     #0,W9
229A:  LNK     #10
229C:  MOV     W12,[W14+W8]
229E:  DEC2    W8,W8
22A0:  BRA     NN,229C
22A2:  XOR     W4,W5,W8
22A4:  BRA     NZ,22AA
22A6:  XOR     W6,W7,W8
22A8:  BRA     Z,2308
22AA:  CLR     W8
22AC:  MOV     #40,W13
22AE:  MOV     #40,W13
22B0:  BCLR.B  42.0
22B2:  RLC     W0,W0
22B4:  RLC     W1,W1
22B6:  RLC     W2,W2
22B8:  RLC     W3,W3
22BA:  RLC     W8,W8
22BC:  RLC     W9,W9
22BE:  RLC     W10,W10
22C0:  RLC     W11,W11
22C2:  CP      W11,W7
22C4:  BRA     NZ,22D0
22C6:  CPB     W10,W6
22C8:  BRA     NZ,22D0
22CA:  CPB     W9,W5
22CC:  BRA     NZ,22D0
22CE:  CPB     W8,W4
22D0:  BRA     NC,22DC
22D2:  SUB     W8,W4,W8
22D4:  SUBB    W9,W5,W9
22D6:  SUBB    W10,W6,W10
22D8:  SUBB    W11,W7,W11
22DA:  BSET.B  42.0
22DC:  MOV     W8,[W14]
22DE:  MOV     W9,[W14+#2]
22E0:  MOV     W10,[W14+#4]
22E2:  MOV     W11,[W14+#6]
22E4:  MOV     [W14+#8],W8
22E6:  MOV     [W14+#A],W9
22E8:  MOV     [W14+#C],W10
22EA:  MOV     [W14+#E],W11
22EC:  RLC     W8,W8
22EE:  RLC     W9,W9
22F0:  RLC     W10,W10
22F2:  RLC     W11,W11
22F4:  MOV     W8,[W14+#8]
22F6:  MOV     W9,[W14+#A]
22F8:  MOV     W10,[W14+#C]
22FA:  MOV     W11,[W14+#E]
22FC:  MOV     [W14],W8
22FE:  MOV     [W14+#2],W9
2300:  MOV     [W14+#4],W10
2302:  MOV     [W14+#6],W11
2304:  DEC     W13,W13
2306:  BRA     NZ,22B0
2308:  MOV     [W14+#8],W0
230A:  MOV     [W14+#A],W1
230C:  MOV     [W14+#C],W2
230E:  MOV     [W14+#E],W3
2310:  ULNK    
2312:  BRA     2314
2314:  MOV     [--W15],W13
2316:  MOV     [--W15],W12
2318:  RETURN  
231A:  MOV     W5,[W15++]
231C:  MOV     #C,W5
231E:  REPEAT  #7
2320:  MOV     [W5++],[W15++]
2322:  LNK     #2A
2324:  MOV     #28,W8
2326:  CLR     W12
2328:  MOV     W12,[W14+W8]
232A:  DEC2    W8,W8
232C:  BRA     NN,2328
232E:  CP0     W9
2330:  BRA     Z,234E
2332:  MOV     W9,[W14+#26]
2334:  MOV     W10,[W14+#28]
2336:  MOV     #4024,W7
2338:  CLR     W6
233A:  MUL.UU  W4,#0,W4
233C:  MOV     W9,[W14+#24]
233E:  MOV     #4024,W7
2340:  CLR     W6
2342:  MUL.UU  W4,#0,W4
2344:  CALL    1CD0
2348:  MOV     [W14+#24],W9
234A:  DEC     W9,W9
234C:  BRA     NZ,233C
234E:  MOV     [W14+#26],W9
2350:  MOV     #14,W8
2352:  MOV     W8,[W14+#24]
2354:  MOV     #41CD,W7
2356:  MOV     #CD65,W6
2358:  MUL.UU  W4,#0,W4
235A:  MOV     W0,[W14+#10]
235C:  MOV     W1,[W14+#12]
235E:  MOV     W2,[W14+#14]
2360:  MOV     W3,[W14+#16]
2362:  MOV     #14,W8
2364:  MOV     W8,[W14+#20]
2366:  MOV     #0,W4
2368:  MOV     #89E8,W5
236A:  MOV     #2304,W6
236C:  MOV     #8AC7,W7
236E:  MOV     W4,[W14+#18]
2370:  MOV     W5,[W14+#1A]
2372:  MOV     W6,[W14+#1C]
2374:  MOV     W7,[W14+#1E]
2376:  BTSS    W3.F
2378:  BRA     2382
237A:  MOV     [W14+#28],W8
237C:  DEC     W8,W8
237E:  BSET    W8.D
2380:  MOV     W8,[W14+#28]
2382:  BCLR    W3.F
2384:  CALL    2230
2388:  MOV     [W14+#28],W8
238A:  MOV     [W14+#26],W9
238C:  CP0     W9
238E:  BTSC.B  42.1
2390:  INC.B   W8L,W8L
2392:  MOV     W8,[W14+#28]
2394:  MOV     [W14+#22],W9
2396:  CLR     W9
2398:  MOV     W9,[W14+#22]
239A:  MOV     [W14+#18],W4
239C:  MOV     [W14+#1A],W5
239E:  MOV     [W14+#1C],W6
23A0:  MOV     [W14+#1E],W7
23A2:  CALL    2286
23A6:  MOV     [W14+#22],W13
23A8:  BTSC    W13.0
23AA:  BRA     2470
23AC:  MOV     W8,[W14+#10]
23AE:  MOV     W9,[W14+#12]
23B0:  MOV     W10,[W14+#14]
23B2:  MOV     W11,[W14+#16]
23B4:  MOV     [W14+#22],W13
23B6:  BTG     W13.0
23B8:  MOV     W13,[W14+#22]
23BA:  CP0     W0
23BC:  BRA     NZ,23E2
23BE:  MOV     [W14+#26],W9
23C0:  INC     W9,W9
23C2:  MOV     [W14+#24],W10
23C4:  SUB     W10,W9,W8
23C6:  BRA     Z,23E2
23C8:  MOV     [W14+#28],W11
23CA:  CP0     W11
23CC:  BRA     Z,23EA
23CE:  AND     W11,#1F,W8
23D0:  SUB     W10,W8,W8
23D2:  BRA     Z,23D6
23D4:  BRA     C,2458
23D6:  BTSC    W11.F
23D8:  BRA     2458
23DA:  BTSC    W11.E
23DC:  BRA     23EA
23DE:  MOV     #20,W0
23E0:  BRA     2450
23E2:  MOV     [W14+#28],W11
23E4:  MOV     #2000,W12
23E6:  AND     W12,W11,W11
23E8:  MOV     W11,[W14+#28]
23EA:  MOV     [W14+#28],W11
23EC:  BTSS    W11.D
23EE:  BRA     240E
23F0:  BCLR    W11.D
23F2:  MOV     [W14+#26],W9
23F4:  CP0     W9
23F6:  BTSS.B  42.1
23F8:  DEC     W11,W11
23FA:  CLR     W11
23FC:  MOV     W11,[W14+#28]
23FE:  MOV     W0,W10
2400:  BTSC.B  223.1
2402:  BRA     2400
2404:  MOV     #2D,W4
2406:  MOV     W4,224
2408:  MOV     W10,W0
240A:  CLR     W11
240C:  MOV     W11,[W14+#28]
240E:  MOV     [W14+#26],W9
2410:  MOV     [W14+#24],W10
2412:  SUB     W10,W9,W8
2414:  BRA     NZ,242E
2416:  CLR     W11
2418:  MOV     W11,[W14+#28]
241A:  MOV     W0,W10
241C:  BTSC.B  223.1
241E:  BRA     241C
2420:  MOV     #2E,W4
2422:  MOV     W4,224
2424:  MOV     [W14+#28],W11
2426:  MOV     #2000,W12
2428:  AND     W12,W11,W11
242A:  MOV     W11,[W14+#28]
242C:  MOV     W10,W0
242E:  MOV     #30,W1
2430:  MOV     [W14+#28],W11
2432:  BTSS    W11.D
2434:  BRA     2450
2436:  BCLR    W11.D
2438:  MOV     [W14+#26],W9
243A:  CP0     W9
243C:  BTSS.B  42.1
243E:  DEC     W11,W11
2440:  CLR     W11
2442:  MOV     W11,[W14+#28]
2444:  BTSC.B  223.1
2446:  BRA     2444
2448:  MOV     #2D,W4
244A:  MOV     W4,224
244C:  CLR     W0
244E:  MOV     #30,W1
2450:  ADD     W1,W0,W0
2452:  BTSC.B  223.1
2454:  BRA     2452
2456:  MOV     W0,224
2458:  MOV     [W14+#24],W13
245A:  DEC     W13,W13
245C:  BRA     Z,2490
245E:  MOV     W13,[W14+#24]
2460:  MOV     [W14+#18],W0
2462:  MOV     [W14+#1A],W1
2464:  MOV     [W14+#1C],W2
2466:  MOV     [W14+#1E],W3
2468:  MOV     #A,W4
246A:  CLR     W5
246C:  MUL.UU  W6,#0,W6
246E:  BRA     23A2
2470:  MOV     W0,[W14+#18]
2472:  MOV     W1,[W14+#1A]
2474:  MOV     W2,[W14+#1C]
2476:  MOV     W3,[W14+#1E]
2478:  MOV     W0,W4
247A:  MOV     W1,W5
247C:  MOV     W2,W6
247E:  MOV     W3,W7
2480:  MOV     [W14+#10],W0
2482:  MOV     [W14+#12],W1
2484:  MOV     [W14+#14],W2
2486:  MOV     [W14+#16],W3
2488:  MOV     [W14+#22],W13
248A:  BTG     W13.0
248C:  MOV     W13,[W14+#22]
248E:  BRA     23A2
2490:  ULNK    
2492:  MOV     #1A,W5
2494:  REPEAT  #7
2496:  MOV     [--W15],[W5--]
2498:  MOV     [--W15],W5
249A:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
*
1C08:  CP0     W0
1C0A:  BTSC.B  42.1
1C0C:  BRA     1C16
1C0E:  REPEAT  #3E7B
1C10:  NOP     
1C12:  DEC     W0,W0
1C14:  BRA     NZ,1C0E
1C16:  RETURN  
....................  
.................... #PIN_SELECT U1RX = PIN_B12 // PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 // PIN_B15 // 
.................... #use rs232(UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define DEVICE_ID 2 
.................... #define limitSw_x PIN_B8 // 
.................... #define limitSw_y PIN_A2 // 
.................... #define limitSw_z PIN_A4 // 
.................... #define Motor_Bp PIN_B10 // Pin output is connected to DXI0  (PWM) 
.................... #define Motor_Br PIN_B2  // Pin output is connected to DX02 
.................... #define Motor_Bl PIN_B3  // Pin output is connected to DX03 
.................... #define Motor_Ap PIN_B4  // Pin output is connected to DX03 
.................... #define Motor_Ar PIN_A1  // Pin output is connected to DX03 
.................... #define Motor_Al PIN_A0  // Pin output is connected to DX03 
.................... #define Motor_Zp PIN_B14 // Pin output is connected to DX03 
.................... #define Motor_Zr PIN_B15 // Pin output is connected to DX03 
.................... #define Motor_Zl PIN_B9  // Pin output is connected to DX03 
.................... #define Encode_A PIN_B7  // Pin output is connected to DX03 
.................... #define Encode_B PIN_B6  // Pin output is connected to DX03 
.................... #define Encode_Z PIN_B5  // Pin output is connected to DX03 
.................... #define servo_r PIN_B0   // servo 270 
.................... #define servo_l PIN_B1   // servo 180 
....................  
.................... #PIN_SELECT OC1 = Motor_Bp 
.................... #PIN_SELECT OC2 = Motor_Ap 
.................... #PIN_SELECT OC3 = Motor_Zp 
.................... #PIN_SELECT OC4 = servo_r 
.................... #PIN_SELECT OC5 = servo_l 
.................... #PIN_SELECT INT1 = Encode_B 
.................... #PIN_SELECT INT2 = Encode_Z 
....................  
.................... // long count = 0; 
.................... long count_a = 0; 
.................... long count_b = 0; 
.................... long count_z = 0; 
.................... // long posi = 0; 
.................... int u_a; 
.................... int *a_u = &u_a; 
.................... int u_b; 
.................... int *b_u = &u_b; 
.................... int u_z; 
.................... int *z_u = &u_z; 
....................  
.................... int s_a = 0; 
.................... int *a_s = &s_a; 
.................... int s_b = 0; 
.................... int *b_s = &s_b; 
.................... int s_z = 0; 
.................... int *z_s = &s_z; 
.................... int p_a = 0; 
.................... int *a_p = &p_a; 
.................... int p_b = 0; 
.................... int *b_p = &p_b; 
.................... int p_z = 0; 
.................... int *z_p = &p_z; 
....................  
.................... int tolerance_a = 30; 
.................... int tolerance_b = 30; 
.................... int tolerance_z = 20; 
....................  
.................... float K_Pz = 0.6; 
.................... float K_Iz = 0.0015; 
.................... float K_Dz = 0.002; 
.................... float K_Pa = 0.6; 
.................... float K_Ia = 0.001; 
.................... float K_Da = 0.0025; 
.................... float K_Pb = 0.6; 
.................... float K_Ib = 0.001; 
.................... float K_Db = 0.0025; 
....................  
.................... int direction_z = 0; 
.................... int direction_a = 0; 
.................... int direction_b = 0; 
.................... char array[20] = {}; 
.................... char SM_id = 0; 
.................... int getPackage = 0; 
.................... char command_ID; 
.................... // char* print_float(float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     char stringFloat[20]; 
.................... //     sprintf(stringFloat, "%d.%d", intDist, dotDist); 
.................... //     return stringFloat; 
.................... // } 
.................... // void print_float(char* stringResult, float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     sprintf(stringResult, "%d.%d", intDist, dotDist); 
.................... // } 
....................  
.................... // Encoder Interrupts 
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0(void) { 
*
0EF2:  PUSH    42
0EF4:  PUSH    36
0EF6:  PUSH    32
0EF8:  MOV     W0,[W15++]
0EFA:  MOV     #2,W0
0EFC:  REPEAT  #C
0EFE:  MOV     [W0++],[W15++]
....................   if (direction_a == 0) { 
0F00:  CP0     90C
0F02:  BRA     NZ,F0C
....................     count_a++; 
0F04:  INC     08B0
0F06:  BTSC.B  42.1
0F08:  INC     08B2
....................   } else { 
0F0A:  BRA     F12
....................     count_a--; 
0F0C:  DEC     08B0
0F0E:  BTSS.B  42.0
0F10:  DEC     08B2
....................   } 
.................... } 
....................  
0F12:  BCLR.B  84.0
0F14:  MOV     #1A,W0
0F16:  REPEAT  #C
0F18:  MOV     [--W15],[W0--]
0F1A:  MOV     [--W15],W0
0F1C:  POP     32
0F1E:  POP     36
0F20:  POP     42
0F22:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
0F24:  PUSH    42
0F26:  PUSH    36
0F28:  PUSH    32
0F2A:  MOV     W0,[W15++]
0F2C:  MOV     #2,W0
0F2E:  REPEAT  #C
0F30:  MOV     [W0++],[W15++]
....................   if (direction_b == 0) { 
0F32:  CP0     90E
0F34:  BRA     NZ,F3E
....................     count_b++; 
0F36:  INC     08B4
0F38:  BTSC.B  42.1
0F3A:  INC     08B6
....................   } else { 
0F3C:  BRA     F44
....................     count_b--; 
0F3E:  DEC     08B4
0F40:  BTSS.B  42.0
0F42:  DEC     08B6
....................   } 
.................... } 
....................  
0F44:  BCLR.B  86.4
0F46:  MOV     #1A,W0
0F48:  REPEAT  #C
0F4A:  MOV     [--W15],[W0--]
0F4C:  MOV     [--W15],W0
0F4E:  POP     32
0F50:  POP     36
0F52:  POP     42
0F54:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2(void) { 
0F56:  PUSH    42
0F58:  PUSH    36
0F5A:  PUSH    32
0F5C:  MOV     W0,[W15++]
0F5E:  MOV     #2,W0
0F60:  REPEAT  #C
0F62:  MOV     [W0++],[W15++]
....................   if (direction_z == 0) { 
0F64:  CP0     90A
0F66:  BRA     NZ,F70
....................     count_z++; 
0F68:  INC     08B8
0F6A:  BTSC.B  42.1
0F6C:  INC     08BA
....................   } else { 
0F6E:  BRA     F76
....................     count_z--; 
0F70:  DEC     08B8
0F72:  BTSS.B  42.0
0F74:  DEC     08BA
....................   } 
0F76:  BCLR.B  87.5
0F78:  MOV     #1A,W0
0F7A:  REPEAT  #C
0F7C:  MOV     [--W15],[W0--]
0F7E:  MOV     [--W15],W0
0F80:  POP     32
0F82:  POP     36
0F84:  POP     42
0F86:  RETFIE  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT0); 
*
1028:  BSET.B  94.0
....................   ext_int_edge(0, L_TO_H); // Rising Edge 
102A:  BCLR.B  82.0
....................   enable_interrupts(INT_EXT1); 
102C:  BSET.B  96.4
....................   ext_int_edge(1, L_TO_H); // Rising Edge 
102E:  BCLR.B  82.1
....................   enable_interrupts(INT_EXT2); 
1030:  BSET.B  97.5
....................   ext_int_edge(2, L_TO_H); // Rising Edge 
1032:  BCLR.B  82.2
1034:  RETURN  
.................... } 
....................  
.................... // 
....................  
.................... // Communication Routines 
....................  
.................... void SM_RxD(int c) { 
*
0F88:  MOV     W5,[W15++]
....................   if (getPackage == 0) { 
0F8A:  CP0     926
0F8C:  BRA     NZ,FF2
....................     if (SM_id < 2) { 
0F8E:  MOV.B   924,W0L
0F90:  SE      W0,W0
0F92:  CP      W0,#2
0F94:  BRA     GE,FB0
....................       if (c == 255) { 
0F96:  MOV     996,W4
0F98:  XOR     #FF,W4
0F9A:  BRA     NZ,FAC
....................         array[SM_id] = c; 
0F9C:  MOV.B   924,W0L
0F9E:  SE      W0,W0
0FA0:  MOV     #910,W4
0FA2:  ADD     W0,W4,W5
0FA4:  MOV     996,W0
0FA6:  MOV.B   W0L,[W5+#0]
....................         SM_id++; 
0FA8:  INC.B   0924
....................       } else { 
0FAA:  BRA     FAE
....................         SM_id = 0; 
0FAC:  CLR.B   924
....................       } 
....................     } else if (SM_id == 2) { 
0FAE:  BRA     FF2
0FB0:  MOV.B   924,W0L
0FB2:  SE      W0,W0
0FB4:  CP      W0,#2
0FB6:  BRA     NZ,FCC
....................       array[SM_id] = c; 
0FB8:  MOV.B   924,W0L
0FBA:  SE      W0,W0
0FBC:  MOV     #910,W4
0FBE:  ADD     W0,W4,W5
0FC0:  MOV     996,W0
0FC2:  MOV.B   W0L,[W5+#0]
....................       command_ID = c; 
0FC4:  MOV.B   996,W0L
0FC6:  MOV.B   W0L,925
....................       SM_id++; 
0FC8:  INC.B   0924
....................     } else if (SM_id > 2) { 
0FCA:  BRA     FF2
0FCC:  MOV.B   924,W0L
0FCE:  SE      W0,W0
0FD0:  CP      W0,#2
0FD2:  BRA     LE,FF2
....................       array[SM_id] = c; 
0FD4:  MOV.B   924,W0L
0FD6:  SE      W0,W0
0FD8:  MOV     #910,W4
0FDA:  ADD     W0,W4,W5
0FDC:  MOV     996,W0
0FDE:  MOV.B   W0L,[W5+#0]
....................       if (SM_id >= 9) { 
0FE0:  MOV.B   924,W0L
0FE2:  SE      W0,W0
0FE4:  CP      W0,#9
0FE6:  BRA     LT,FF0
....................         getPackage = 1; 
0FE8:  MOV     #1,W4
0FEA:  MOV     W4,926
....................         SM_id = 0; 
0FEC:  CLR.B   924
....................       } else { 
0FEE:  BRA     FF2
....................         SM_id++; 
0FF0:  INC.B   0924
....................       } 
....................     } 
....................   } 
0FF2:  MOV     [--W15],W5
0FF4:  RETURN  
.................... } 
....................  
.................... #INT_RDA 
.................... void UART1_Isr() { 
0FF6:  PUSH    42
0FF8:  PUSH    36
0FFA:  PUSH    32
0FFC:  MOV     W0,[W15++]
0FFE:  MOV     #2,W0
1000:  REPEAT  #C
1002:  MOV     [W0++],[W15++]
1004:  BTSS.B  222.0
1006:  BRA     1004
1008:  MOV     226,W0
100A:  MOV.B   W0L,992
100C:  CLR.B   993
....................   int c = getc(); 
....................   // putc(c); 
....................   SM_RxD(c); 
100E:  PUSH    992
1010:  POP     996
1012:  CALL    F88
1016:  BCLR.B  85.3
1018:  MOV     #1A,W0
101A:  REPEAT  #C
101C:  MOV     [--W15],[W0--]
101E:  MOV     [--W15],W0
1020:  POP     32
1022:  POP     36
1024:  POP     42
1026:  RETFIE  
.................... } 
.................... // 
....................  
.................... // Motor 
.................... void Motor_z(int u) { 
*
1068:  MOV     W5,[W15++]
....................   if (u > 100) 
106A:  MOV     92E,W4
106C:  MOV     #64,W3
106E:  CP      W3,W4
1070:  BRA     GE,1076
....................     u = 100; 
1072:  MOV     #64,W4
1074:  MOV     W4,92E
....................   if (u < -100) 
1076:  MOV     92E,W4
1078:  MOV     #FF9C,W3
107A:  CP      W3,W4
107C:  BRA     LE,1082
....................     u = -100; 
107E:  MOV     #FF9C,W4
1080:  MOV     W4,92E
....................   if (u > 0) { 
1082:  MOV     92E,W4
1084:  CP      W4,#0
1086:  BRA     LE,109C
....................     output_bit(Motor_Zr, 0); 
1088:  BCLR.B  2CD.7
108A:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
108C:  BSET.B  2CD.1
108E:  BCLR.B  2C9.1
....................     direction_z = 0; 
1090:  CLR     90A
....................     set_pwm_duty(3, (int)(2 * u)); 
1092:  MOV     92E,W4
1094:  MUL.UU  W4,#2,W0
1096:  MOV     W0,W5
1098:  MOV     W5,18C
....................   } else if (u < 0) { 
109A:  BRA     10CA
109C:  MOV     92E,W4
109E:  CP      W4,#0
10A0:  BRA     GE,10BE
....................     output_bit(Motor_Zr, 1); 
10A2:  BSET.B  2CD.7
10A4:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 0); 
10A6:  BCLR.B  2CD.1
10A8:  BCLR.B  2C9.1
....................     direction_z = 1; 
10AA:  MOV     #1,W4
10AC:  MOV     W4,90A
....................     set_pwm_duty(3, (int)(2 * -u)); 
10AE:  MOV     #0,W4
10B0:  MOV     92E,W3
10B2:  SUB     W4,W3,W0
10B4:  MOV     W0,W4
10B6:  MUL.UU  W4,#2,W0
10B8:  MOV     W0,W5
10BA:  MOV     W5,18C
....................   } else { 
10BC:  BRA     10CA
....................     output_bit(Motor_Zr, 1); 
10BE:  BSET.B  2CD.7
10C0:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
10C2:  BSET.B  2CD.1
10C4:  BCLR.B  2C9.1
....................     set_pwm_duty(3, (int)(100)); 
10C6:  MOV     #64,W4
10C8:  MOV     W4,18C
....................   } 
10CA:  MOV     [--W15],W5
10CC:  RETURN  
.................... } 
....................  
.................... void Motor_a(int u) { 
10CE:  MOV     W5,[W15++]
....................   if (u > 100) 
10D0:  MOV     934,W4
10D2:  MOV     #64,W3
10D4:  CP      W3,W4
10D6:  BRA     GE,10DC
....................     u = 100; 
10D8:  MOV     #64,W4
10DA:  MOV     W4,934
....................   if (u < -100) 
10DC:  MOV     934,W4
10DE:  MOV     #FF9C,W3
10E0:  CP      W3,W4
10E2:  BRA     LE,10E8
....................     u = -100; 
10E4:  MOV     #FF9C,W4
10E6:  MOV     W4,934
....................   if (u > 0) { 
10E8:  MOV     934,W4
10EA:  CP      W4,#0
10EC:  BRA     LE,1102
....................     output_bit(Motor_Ar, 1); 
10EE:  BSET.B  2C4.1
10F0:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 0); 
10F2:  BCLR.B  2C4.0
10F4:  BCLR.B  2C0.0
....................     direction_a = 0; 
10F6:  CLR     90C
....................     set_pwm_duty(2, (int)(2 * u)); 
10F8:  MOV     934,W4
10FA:  MUL.UU  W4,#2,W0
10FC:  MOV     W0,W5
10FE:  MOV     W5,186
....................   } else if (u < 0) { 
1100:  BRA     1130
1102:  MOV     934,W4
1104:  CP      W4,#0
1106:  BRA     GE,1124
....................     output_bit(Motor_Ar, 0); 
1108:  BCLR.B  2C4.1
110A:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 1); 
110C:  BSET.B  2C4.0
110E:  BCLR.B  2C0.0
....................     direction_a = 1; 
1110:  MOV     #1,W4
1112:  MOV     W4,90C
....................     set_pwm_duty(2, (int)(2 * -u)); 
1114:  MOV     #0,W4
1116:  MOV     934,W3
1118:  SUB     W4,W3,W0
111A:  MOV     W0,W4
111C:  MUL.UU  W4,#2,W0
111E:  MOV     W0,W5
1120:  MOV     W5,186
....................   } else { 
1122:  BRA     1130
....................     output_bit(Motor_Ar, 1); 
1124:  BSET.B  2C4.1
1126:  BCLR.B  2C0.1
....................     output_bit(Motor_Al, 1); 
1128:  BSET.B  2C4.0
112A:  BCLR.B  2C0.0
....................     set_pwm_duty(2, (int)(100)); 
112C:  MOV     #64,W4
112E:  MOV     W4,186
....................   } 
1130:  MOV     [--W15],W5
1132:  RETURN  
.................... } 
....................  
.................... void Motor_b(int u) { 
1134:  MOV     W5,[W15++]
....................   if (u > 100) 
1136:  MOV     934,W4
1138:  MOV     #64,W3
113A:  CP      W3,W4
113C:  BRA     GE,1142
....................     u = 100; 
113E:  MOV     #64,W4
1140:  MOV     W4,934
....................   if (u < -100) 
1142:  MOV     934,W4
1144:  MOV     #FF9C,W3
1146:  CP      W3,W4
1148:  BRA     LE,114E
....................     u = -100; 
114A:  MOV     #FF9C,W4
114C:  MOV     W4,934
....................   if (u > 0) { 
114E:  MOV     934,W4
1150:  CP      W4,#0
1152:  BRA     LE,1168
....................     output_bit(Motor_Br, 1); 
1154:  BSET.B  2CC.2
1156:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 0); 
1158:  BCLR.B  2CC.3
115A:  BCLR.B  2C8.3
....................     direction_b = 0; 
115C:  CLR     90E
....................     set_pwm_duty(1, (int)(2 * u)); 
115E:  MOV     934,W4
1160:  MUL.UU  W4,#2,W0
1162:  MOV     W0,W5
1164:  MOV     W5,180
....................   } else if (u < 0) { 
1166:  BRA     1196
1168:  MOV     934,W4
116A:  CP      W4,#0
116C:  BRA     GE,118A
....................     output_bit(Motor_Br, 0); 
116E:  BCLR.B  2CC.2
1170:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
1172:  BSET.B  2CC.3
1174:  BCLR.B  2C8.3
....................     direction_b = 1; 
1176:  MOV     #1,W4
1178:  MOV     W4,90E
....................     set_pwm_duty(1, (int)(2 * -u)); 
117A:  MOV     #0,W4
117C:  MOV     934,W3
117E:  SUB     W4,W3,W0
1180:  MOV     W0,W4
1182:  MUL.UU  W4,#2,W0
1184:  MOV     W0,W5
1186:  MOV     W5,180
....................   } else { 
1188:  BRA     1196
....................     output_bit(Motor_Br, 1); 
118A:  BSET.B  2CC.2
118C:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
118E:  BSET.B  2CC.3
1190:  BCLR.B  2C8.3
....................     set_pwm_duty(1, (int)(100)); 
1192:  MOV     #64,W4
1194:  MOV     W4,180
....................   } 
1196:  MOV     [--W15],W5
1198:  RETURN  
.................... } 
....................  
.................... void PID(long r, long count, long s, long p, int *u, float K_P, float K_I, 
....................          float K_D) { 
*
183C:  MOV     W5,[W15++]
183E:  MOV     W6,[W15++]
1840:  MOV     W7,[W15++]
1842:  MOV     934,W4
1844:  MOV     938,W3
1846:  SUB     W4,W3,W0
1848:  MOV     W0,952
184A:  MOV     936,W4
184C:  MOV     93A,W3
184E:  SUBB    W4,W3,W0
1850:  MOV     W0,954
....................   long e = r - count; 
....................   s = s + e; 
1852:  MOV     93C,W0
1854:  ADD     952,W0
1856:  MOV     W0,93C
1858:  MOV     954,W4
185A:  MOV     93E,W3
185C:  ADDC    W3,W4,W0
185E:  MOV     W0,93E
....................   *u = (K_P * e) + (K_I * s) + (K_D * (e - p)); 
1860:  MOV     944,W5
1862:  MOV     952,W0
1864:  MOV     954,W1
1866:  CALL    1554
186A:  MOV     W0,W2
186C:  MOV     W1,W3
186E:  MOV     946,W0
1870:  MOV     948,W1
1872:  CALL    15A2
1876:  MOV.D   W0,W6
1878:  MOV     93C,W0
187A:  MOV     93E,W1
187C:  CALL    1554
1880:  MOV     W0,W2
1882:  MOV     W1,W3
1884:  MOV     94A,W0
1886:  MOV     94C,W1
1888:  CALL    15A2
188C:  BCLR.B  43.0
188E:  MOV     W0,W2
1890:  MOV     W1,W3
1892:  MOV     W6,W0
1894:  MOV     W7,W1
1896:  CALL    1666
189A:  MOV.D   W0,W6
189C:  MOV     952,W4
189E:  MOV     940,W3
18A0:  SUB     W4,W3,W0
18A2:  MOV     954,W4
18A4:  MOV     942,W3
18A6:  SUBB    W4,W3,W1
18A8:  CALL    1554
18AC:  MOV     W0,W2
18AE:  MOV     W1,W3
18B0:  MOV     94E,W0
18B2:  MOV     950,W1
18B4:  CALL    15A2
18B8:  BCLR.B  43.0
18BA:  MOV     W0,W2
18BC:  MOV     W1,W3
18BE:  MOV     W6,W0
18C0:  MOV     W7,W1
18C2:  CALL    1666
18C6:  CALL    1810
18CA:  MOV     W0,[W5]
....................   p = e; 
18CC:  PUSH    952
18CE:  POP     940
18D0:  PUSH    954
18D2:  POP     942
18D4:  MOV     [--W15],W7
18D6:  MOV     [--W15],W6
18D8:  MOV     [--W15],W5
18DA:  RETURN  
.................... } 
.................... // 
....................  
.................... // Utilities 
.................... int mergeInts(int MSB, int LSB) { 
*
14BE:  MOV     W5,[W15++]
14C0:  MOV.B   93A,W0L
14C2:  CLR.B   1
14C4:  MOV     #100,W4
14C6:  MUL.SS  W4,W0,W0
14C8:  MOV     W0,W5
14CA:  MOV     93C,W4
14CC:  CLR.B   9
14CE:  ADD     W5,W4,W0
14D0:  CLR     W1
14D2:  BTSC    W0.F
14D4:  SETM    W1
14D6:  MOV     W0,93E
14D8:  MOV     W1,940
....................   long a = (256 * (int)(unsigned char)MSB) + (unsigned char)LSB; 
....................   printf("merged %d and %d into: %d \n", MSB, LSB, a); 
14DA:  MOV     #0,W1
14DC:  MOV     W1,W0
14DE:  CLR.B   1
14E0:  CALL    DFC
14E4:  INC     W1,W1
14E6:  BTSC.B  223.1
14E8:  BRA     14E6
14EA:  MOV     W0,224
14EC:  MOV     #6,W0
14EE:  CPSGT   W1,W0
14F0:  BRA     14DC
14F2:  MOV     93A,W0
14F4:  MOV     #0,W4
14F6:  CALL    13C8
14FA:  MOV     #9,W1
14FC:  MOV     W1,W0
14FE:  CLR.B   1
1500:  CALL    DFC
1504:  INC     W1,W1
1506:  BTSC.B  223.1
1508:  BRA     1506
150A:  MOV     W0,224
150C:  MOV     #D,W0
150E:  CPSGT   W1,W0
1510:  BRA     14FC
1512:  MOV     93C,W0
1514:  MOV     #0,W4
1516:  CALL    13C8
151A:  MOV     #10,W1
151C:  MOV     W1,W0
151E:  CLR.B   1
1520:  CALL    DFC
1524:  INC     W1,W1
1526:  BTSC.B  223.1
1528:  BRA     1526
152A:  MOV     W0,224
152C:  MOV     #16,W0
152E:  CPSGT   W1,W0
1530:  BRA     151C
1532:  MOV     93E,W0
1534:  MOV     940,W1
1536:  MOV     #0,W4
1538:  CALL    11DE
153C:  BTSC.B  223.1
153E:  BRA     153C
1540:  MOV     #20,W4
1542:  MOV     W4,224
1544:  BTSC.B  223.1
1546:  BRA     1544
1548:  MOV     #A,W4
154A:  MOV     W4,224
....................   return a; 
154C:  PUSH    93E
154E:  POP     0
1550:  MOV     [--W15],W5
1552:  RETURN  
.................... } 
....................  
.................... float intsToFloat(unsigned char LSB, unsigned char hexadec) { 
*
249C:  MOV     W5,[W15++]
249E:  MOV     #C,W5
24A0:  REPEAT  #4
24A2:  MOV     [W5++],[W15++]
24A4:  MOV.B   92A,W0L
24A6:  CLR.B   1
24A8:  CALL    20E6
24AC:  MOV     W0,W5
24AE:  MOV     W1,W6
24B0:  MOV.B   92B,W0L
24B2:  CLR.B   1
24B4:  CALL    20E6
24B8:  MOV     W0,W7
24BA:  MOV     W1,W8
24BC:  MOV     W7,W0
24BE:  MOV     W8,W1
24C0:  MOV     #0,W2
24C2:  MOV     #4380,W3
24C4:  CALL    2120
24C8:  BCLR.B  43.0
24CA:  MOV     W0,W2
24CC:  MOV     W1,W3
24CE:  MOV     W5,W0
24D0:  MOV     W6,W1
24D2:  CALL    1666
24D6:  MOV     W0,92C
24D8:  MOV     W1,92E
....................   float flo = (float)LSB + ((float)hexadec) / 256; 
....................   printf("merged %d and %d into: %0.2f\n", LSB, hexadec, flo); 
24DA:  MOV     #0,W1
24DC:  MOV     W1,W0
24DE:  CLR.B   1
24E0:  CALL    E24
24E4:  INC     W1,W1
24E6:  BTSC.B  223.1
24E8:  BRA     24E6
24EA:  MOV     W0,224
24EC:  MOV     #6,W0
24EE:  CPSGT   W1,W0
24F0:  BRA     24DC
24F2:  MOV.B   92A,W0L
24F4:  SE      W0,W0
24F6:  MOV     #0,W4
24F8:  CALL    13C8
24FC:  MOV     #9,W1
24FE:  MOV     W1,W0
2500:  CLR.B   1
2502:  CALL    E24
2506:  INC     W1,W1
2508:  BTSC.B  223.1
250A:  BRA     2508
250C:  MOV     W0,224
250E:  MOV     #D,W0
2510:  CPSGT   W1,W0
2512:  BRA     24FE
2514:  MOV.B   92B,W0L
2516:  SE      W0,W0
2518:  MOV     #0,W4
251A:  CALL    13C8
251E:  MOV     #10,W1
2520:  MOV     W1,W0
2522:  CLR.B   1
2524:  CALL    E24
2528:  INC     W1,W1
252A:  BTSC.B  223.1
252C:  BRA     252A
252E:  MOV     W0,224
2530:  MOV     #16,W0
2532:  CPSGT   W1,W0
2534:  BRA     2520
2536:  MOV     92E,W2
2538:  MOV     92C,W1
253A:  MOV     #0,W0
253C:  CALL    21EA
2540:  MOV     #2,W9
2542:  MOV     #C009,W10
2544:  CALL    231A
2548:  BTSC.B  223.1
254A:  BRA     2548
254C:  MOV     #A,W4
254E:  MOV     W4,224
....................   return flo; 
2550:  MOV     92C,W0
2552:  MOV     92E,W1
2554:  MOV     #14,W5
2556:  REPEAT  #4
2558:  MOV     [--W15],[W5--]
255A:  MOV     [--W15],W5
255C:  RETURN  
.................... } 
.................... // 
....................  
.................... // COMMANDS// 
.................... void setHome() { 
*
12F2:  MOV     W5,[W15++]
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
12F4:  MOV     #E,W4
12F6:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
12F8:  MOV     #E,W4
12FA:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
12FC:  MOV     #E,W4
12FE:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
1300:  CLR     18C
....................   set_pwm_duty(2, 0); 
1302:  CLR     186
....................   set_pwm_duty(1, 0); 
1304:  CLR     180
.................... while (input(limitSw_z) == 1){ 
1306:  BSET.B  2C0.4
1308:  BTSS.B  2C2.4
130A:  BRA     1316
....................     Motor_z(-100); 
130C:  MOV     #FF9C,W4
130E:  MOV     W4,92E
1310:  CALL    1068
1314:  BRA     1306
....................   } 
....................   Motor_z(0); 
1316:  CLR     92E
1318:  CALL    1068
....................    while (input(limitSw_y) == 1){ 
131C:  BSET.B  2C0.2
131E:  BTSS.B  2C2.2
1320:  BRA     1334
....................     Motor_a(-100); 
1322:  MOV     #FF9C,W4
1324:  MOV     W4,934
1326:  CALL    10CE
....................     Motor_b(-100); 
132A:  MOV     #FF9C,W4
132C:  MOV     W4,934
132E:  CALL    1134
1332:  BRA     131C
....................   } 
....................   // Motor_a(0); 
....................   // Motor_b(0); 
....................   while (input(limitSw_x) == 1){ 
1334:  BSET.B  2C9.0
1336:  BTSS.B  2CB.0
1338:  BRA     134C
....................     Motor_a(100); 
133A:  MOV     #64,W4
133C:  MOV     W4,934
133E:  CALL    10CE
....................     Motor_b(-100); 
1342:  MOV     #FF9C,W4
1344:  MOV     W4,934
1346:  CALL    1134
134A:  BRA     1334
....................   } 
....................   Motor_b(0); 
134C:  CLR     934
134E:  CALL    1134
....................   Motor_a(0); 
1352:  CLR     934
1354:  CALL    10CE
....................   printf("%d, %d, %d\n", count_a, count_b, count_z); 
1358:  MOV     8B0,W0
135A:  MOV     8B2,W1
135C:  MOV     #0,W4
135E:  CALL    11DE
1362:  BTSC.B  223.1
1364:  BRA     1362
1366:  MOV     #2C,W4
1368:  MOV     W4,224
136A:  BTSC.B  223.1
136C:  BRA     136A
136E:  MOV     #20,W4
1370:  MOV     W4,224
1372:  MOV     8B4,W0
1374:  MOV     8B6,W1
1376:  MOV     #0,W4
1378:  CALL    11DE
137C:  BTSC.B  223.1
137E:  BRA     137C
1380:  MOV     #2C,W4
1382:  MOV     W4,224
1384:  BTSC.B  223.1
1386:  BRA     1384
1388:  MOV     #20,W4
138A:  MOV     W4,224
138C:  MOV     8B8,W0
138E:  MOV     8BA,W1
1390:  MOV     #0,W4
1392:  CALL    11DE
1396:  BTSC.B  223.1
1398:  BRA     1396
139A:  MOV     #A,W4
139C:  MOV     W4,224
....................   count_a = 0; 
139E:  CLR     8B0
13A0:  CLR     8B2
....................   count_b = 0; 
13A2:  CLR     8B4
13A4:  CLR     8B6
....................   count_z = 0; 
13A6:  CLR     8B8
13A8:  CLR     8BA
....................   printf("done"); 
13AA:  MOV     #0,W1
13AC:  MOV     W1,W0
13AE:  CLR.B   1
13B0:  CALL    E4E
13B4:  INC     W1,W1
13B6:  BTSC.B  223.1
13B8:  BRA     13B6
13BA:  MOV     W0,224
13BC:  MOV     #3,W0
13BE:  CPSGT   W1,W0
13C0:  BRA     13AC
....................   getPackage = 0; 
13C2:  CLR     926
13C4:  MOV     [--W15],W5
13C6:  RETURN  
.................... } 
....................  
.................... void setPosAB() { 
*
18DC:  MOV     W5,[W15++]
18DE:  MOV     W6,[W15++]
18E0:  MOV.B   913,W0L
18E2:  MOV.B   W0L,W5L
18E4:  SE      W5,W5
18E6:  MOV.B   914,W0L
18E8:  MOV.B   W0L,C
18EA:  SE      W6,W6
18EC:  MOV     W5,93A
18EE:  MOV     W6,93C
18F0:  CALL    14BE
18F4:  CLR     W1
18F6:  BTSC    W0.F
18F8:  SETM    W1
18FA:  MOV     W0,92A
18FC:  MOV     W1,92C
18FE:  MOV.B   915,W0L
1900:  MOV.B   W0L,W5L
1902:  SE      W5,W5
1904:  MOV.B   916,W0L
1906:  MOV.B   W0L,C
1908:  SE      W6,W6
190A:  MOV     W5,93A
190C:  MOV     W6,93C
190E:  CALL    14BE
1912:  CLR     W1
1914:  BTSC    W0.F
1916:  SETM    W1
1918:  MOV     W0,92E
191A:  MOV     W1,930
....................   long r_a = mergeInts((int)array[3], (int)array[4]); 
....................   long r_b = mergeInts((int)array[5], (int)array[6]); 
....................   if ((int)array[7] == 1) { 
191C:  MOV.B   917,W0L
191E:  MOV.B   W0L,W5L
1920:  SE      W5,W5
1922:  CP      W5,#1
1924:  BRA     NZ,1936
....................     r_a = 0 - r_a; 
1926:  MOV     #0,W4
1928:  MOV     92A,W3
192A:  SUB     W4,W3,W0
192C:  MOV     W0,92A
192E:  MOV     #0,W4
1930:  MOV     92C,W3
1932:  SUBB    W4,W3,W0
1934:  MOV     W0,92C
....................   } 
....................   if ((int)array[8] == 1) { 
1936:  MOV.B   918,W0L
1938:  MOV.B   W0L,A
193A:  SE      W5,W5
193C:  CP      W5,#1
193E:  BRA     NZ,1950
....................     r_b = 0 - r_b; 
1940:  MOV     #0,W4
1942:  MOV     92E,W3
1944:  SUB     W4,W3,W0
1946:  MOV     W0,92E
1948:  MOV     #0,W4
194A:  MOV     930,W3
194C:  SUBB    W4,W3,W0
194E:  MOV     W0,930
....................   } 
....................   printf("r_a = %d\n", (int)r_a); 
1950:  MOV     #0,W1
1952:  MOV     W1,W0
1954:  CLR.B   1
1956:  CALL    E60
195A:  INC     W1,W1
195C:  BTSC.B  223.1
195E:  BRA     195C
1960:  MOV     W0,224
1962:  MOV     #5,W0
1964:  CPSGT   W1,W0
1966:  BRA     1952
1968:  MOV     92A,W0
196A:  MOV     #0,W4
196C:  CALL    13C8
1970:  BTSC.B  223.1
1972:  BRA     1970
1974:  MOV     #A,W4
1976:  MOV     W4,224
....................   printf("r_b = %d\n", (int)r_b); 
1978:  MOV     #0,W1
197A:  MOV     W1,W0
197C:  CLR.B   1
197E:  CALL    E76
1982:  INC     W1,W1
1984:  BTSC.B  223.1
1986:  BRA     1984
1988:  MOV     W0,224
198A:  MOV     #5,W0
198C:  CPSGT   W1,W0
198E:  BRA     197A
1990:  MOV     92E,W0
1992:  MOV     #0,W4
1994:  CALL    13C8
1998:  BTSC.B  223.1
199A:  BRA     1998
199C:  MOV     #A,W4
199E:  MOV     W4,224
....................   while (abs(r_a - count_a) > tolerance_a || abs(r_b - count_b) > tolerance_b) { 
19A0:  MOV     92A,W4
19A2:  MOV     8B0,W3
19A4:  SUB     W4,W3,W5
19A6:  MOV     92C,W4
19A8:  MOV     8B2,W3
19AA:  SUBB    W4,W3,W6
19AC:  MOV     W5,W0
19AE:  MOV     W6,W1
19B0:  BTSS    W1.F
19B2:  BRA     19BC
19B4:  MOV     #0,W4
19B6:  SUB     W4,W5,W0
19B8:  MOV     #0,W4
19BA:  SUBB    W4,W6,W1
19BC:  MOV     W0,W5
19BE:  MOV     W1,W6
19C0:  MOV     8E0,W0
19C2:  CLR     W1
19C4:  BTSC    W0.F
19C6:  SETM    W1
19C8:  CP      W1,W6
19CA:  BRA     LT,1A04
19CC:  BRA     GT,19D2
19CE:  CP      W0,W5
19D0:  BRA     NC,1A04
19D2:  MOV     92E,W4
19D4:  MOV     8B4,W3
19D6:  SUB     W4,W3,W5
19D8:  MOV     930,W4
19DA:  MOV     8B6,W3
19DC:  SUBB    W4,W3,W6
19DE:  MOV     W5,W0
19E0:  MOV     W6,W1
19E2:  BTSS    W1.F
19E4:  BRA     19EE
19E6:  MOV     #0,W4
19E8:  SUB     W4,W5,W0
19EA:  MOV     #0,W4
19EC:  SUBB    W4,W6,W1
19EE:  MOV     W0,W5
19F0:  MOV     W1,W6
19F2:  MOV     8E2,W0
19F4:  CLR     W1
19F6:  BTSC    W0.F
19F8:  SETM    W1
19FA:  CP      W1,W6
19FC:  BRA     GT,1A8E
19FE:  BRA     LT,1A04
1A00:  CP      W0,W5
1A02:  BRA     C,1A8E
....................     PID(r_a, count_a, a_s, a_p, a_u, K_Pa, K_Ia, K_Da); 
1A04:  PUSH    92A
1A06:  POP     934
1A08:  PUSH    92C
1A0A:  POP     936
1A0C:  PUSH    8B0
1A0E:  POP     938
1A10:  PUSH    8B2
1A12:  POP     93A
1A14:  PUSH    8CA
1A16:  POP     93C
1A18:  CLR     93E
1A1A:  PUSH    8D6
1A1C:  POP     940
1A1E:  CLR     942
1A20:  PUSH    8BE
1A22:  POP     944
1A24:  PUSH    8F2
1A26:  POP     946
1A28:  PUSH    8F4
1A2A:  POP     948
1A2C:  PUSH    8F6
1A2E:  POP     94A
1A30:  PUSH    8F8
1A32:  POP     94C
1A34:  PUSH    8FA
1A36:  POP     94E
1A38:  PUSH    8FC
1A3A:  POP     950
1A3C:  CALL    183C
....................     PID(r_b, count_b, b_s, b_p, b_u, K_Pb, K_Ib, K_Db); 
1A40:  PUSH    92E
1A42:  POP     934
1A44:  PUSH    930
1A46:  POP     936
1A48:  PUSH    8B4
1A4A:  POP     938
1A4C:  PUSH    8B6
1A4E:  POP     93A
1A50:  PUSH    8CE
1A52:  POP     93C
1A54:  CLR     93E
1A56:  PUSH    8DA
1A58:  POP     940
1A5A:  CLR     942
1A5C:  PUSH    8C2
1A5E:  POP     944
1A60:  PUSH    8FE
1A62:  POP     946
1A64:  PUSH    900
1A66:  POP     948
1A68:  PUSH    902
1A6A:  POP     94A
1A6C:  PUSH    904
1A6E:  POP     94C
1A70:  PUSH    906
1A72:  POP     94E
1A74:  PUSH    908
1A76:  POP     950
1A78:  CALL    183C
....................     Motor_a(u_a); 
1A7C:  PUSH    8BC
1A7E:  POP     934
1A80:  CALL    10CE
....................     Motor_b(u_b); 
1A84:  PUSH    8C0
1A86:  POP     934
1A88:  CALL    1134
1A8C:  BRA     19A0
....................   } 
....................   Motor_a(0); 
1A8E:  CLR     934
1A90:  CALL    10CE
....................   Motor_b(0); 
1A94:  CLR     934
1A96:  CALL    1134
....................   printf("position = %d, %d\n", count_a, count_b); 
1A9A:  MOV     #0,W1
1A9C:  MOV     W1,W0
1A9E:  CLR.B   1
1AA0:  CALL    E8C
1AA4:  INC     W1,W1
1AA6:  BTSC.B  223.1
1AA8:  BRA     1AA6
1AAA:  MOV     W0,224
1AAC:  MOV     #A,W0
1AAE:  CPSGT   W1,W0
1AB0:  BRA     1A9C
1AB2:  MOV     8B0,W0
1AB4:  MOV     8B2,W1
1AB6:  MOV     #0,W4
1AB8:  CALL    11DE
1ABC:  BTSC.B  223.1
1ABE:  BRA     1ABC
1AC0:  MOV     #2C,W4
1AC2:  MOV     W4,224
1AC4:  BTSC.B  223.1
1AC6:  BRA     1AC4
1AC8:  MOV     #20,W4
1ACA:  MOV     W4,224
1ACC:  MOV     8B4,W0
1ACE:  MOV     8B6,W1
1AD0:  MOV     #0,W4
1AD2:  CALL    11DE
1AD6:  BTSC.B  223.1
1AD8:  BRA     1AD6
1ADA:  MOV     #A,W4
1ADC:  MOV     W4,224
....................   printf("done"); 
1ADE:  MOV     #0,W1
1AE0:  MOV     W1,W0
1AE2:  CLR.B   1
1AE4:  CALL    E4E
1AE8:  INC     W1,W1
1AEA:  BTSC.B  223.1
1AEC:  BRA     1AEA
1AEE:  MOV     W0,224
1AF0:  MOV     #3,W0
1AF2:  CPSGT   W1,W0
1AF4:  BRA     1AE0
....................   getPackage = 0; 
1AF6:  CLR     926
1AF8:  MOV     [--W15],W6
1AFA:  MOV     [--W15],W5
1AFC:  RETURN  
.................... } 
....................  
.................... void setPosZ() { 
1AFE:  MOV     W5,[W15++]
1B00:  MOV     W6,[W15++]
1B02:  MOV.B   913,W0L
1B04:  MOV.B   W0L,W5L
1B06:  SE      W5,W5
1B08:  MOV.B   914,W0L
1B0A:  MOV.B   W0L,C
1B0C:  SE      W6,W6
1B0E:  MOV     W5,93A
1B10:  MOV     W6,93C
1B12:  CALL    14BE
1B16:  CLR     W1
1B18:  BTSC    W0.F
1B1A:  SETM    W1
1B1C:  MOV     W0,92A
1B1E:  MOV     W1,92C
....................   long r_z = mergeInts((int)array[3], (int)array[4]); 
....................   printf("r_z = %d", (int)r_z); 
1B20:  MOV     #0,W1
1B22:  MOV     W1,W0
1B24:  CLR.B   1
1B26:  CALL    EAC
1B2A:  INC     W1,W1
1B2C:  BTSC.B  223.1
1B2E:  BRA     1B2C
1B30:  MOV     W0,224
1B32:  MOV     #5,W0
1B34:  CPSGT   W1,W0
1B36:  BRA     1B22
1B38:  MOV     92A,W0
1B3A:  MOV     #0,W4
1B3C:  CALL    13C8
....................   while (abs(r_z - count_z) > tolerance_z) { 
1B40:  MOV     92A,W4
1B42:  MOV     8B8,W3
1B44:  SUB     W4,W3,W5
1B46:  MOV     92C,W4
1B48:  MOV     8BA,W3
1B4A:  SUBB    W4,W3,W6
1B4C:  MOV     W5,W0
1B4E:  MOV     W6,W1
1B50:  BTSS    W1.F
1B52:  BRA     1B5C
1B54:  MOV     #0,W4
1B56:  SUB     W4,W5,W0
1B58:  MOV     #0,W4
1B5A:  SUBB    W4,W6,W1
1B5C:  MOV     W0,W5
1B5E:  MOV     W1,W6
1B60:  MOV     8E4,W0
1B62:  CLR     W1
1B64:  BTSC    W0.F
1B66:  SETM    W1
1B68:  CP      W1,W6
1B6A:  BRA     GT,1BB8
1B6C:  BRA     LT,1B72
1B6E:  CP      W0,W5
1B70:  BRA     C,1BB8
....................     PID(r_z, count_z, z_s, z_p, z_u, K_Pz, K_Iz, K_Dz); 
1B72:  PUSH    92A
1B74:  POP     934
1B76:  PUSH    92C
1B78:  POP     936
1B7A:  PUSH    8B8
1B7C:  POP     938
1B7E:  PUSH    8BA
1B80:  POP     93A
1B82:  PUSH    8D2
1B84:  POP     93C
1B86:  CLR     93E
1B88:  PUSH    8DE
1B8A:  POP     940
1B8C:  CLR     942
1B8E:  PUSH    8C6
1B90:  POP     944
1B92:  PUSH    8E6
1B94:  POP     946
1B96:  PUSH    8E8
1B98:  POP     948
1B9A:  PUSH    8EA
1B9C:  POP     94A
1B9E:  PUSH    8EC
1BA0:  POP     94C
1BA2:  PUSH    8EE
1BA4:  POP     94E
1BA6:  PUSH    8F0
1BA8:  POP     950
1BAA:  CALL    183C
....................     Motor_z(u_z); 
1BAE:  PUSH    8C4
1BB0:  POP     92E
1BB2:  CALL    1068
1BB6:  BRA     1B40
....................     // printf("count_z : %d\n",count_z); 
....................     // delay_ms(10); 
....................   } 
....................   Motor_z(0); 
1BB8:  CLR     92E
1BBA:  CALL    1068
....................   printf("position = %d\n", count_z); 
1BBE:  MOV     #0,W1
1BC0:  MOV     W1,W0
1BC2:  CLR.B   1
1BC4:  CALL    EC2
1BC8:  INC     W1,W1
1BCA:  BTSC.B  223.1
1BCC:  BRA     1BCA
1BCE:  MOV     W0,224
1BD0:  MOV     #A,W0
1BD2:  CPSGT   W1,W0
1BD4:  BRA     1BC0
1BD6:  MOV     8B8,W0
1BD8:  MOV     8BA,W1
1BDA:  MOV     #0,W4
1BDC:  CALL    11DE
1BE0:  BTSC.B  223.1
1BE2:  BRA     1BE0
1BE4:  MOV     #A,W4
1BE6:  MOV     W4,224
....................   printf("done"); 
1BE8:  MOV     #0,W1
1BEA:  MOV     W1,W0
1BEC:  CLR.B   1
1BEE:  CALL    E4E
1BF2:  INC     W1,W1
1BF4:  BTSC.B  223.1
1BF6:  BRA     1BF4
1BF8:  MOV     W0,224
1BFA:  MOV     #3,W0
1BFC:  CPSGT   W1,W0
1BFE:  BRA     1BEA
....................   getPackage = 0; 
1C00:  CLR     926
1C02:  MOV     [--W15],W6
1C04:  MOV     [--W15],W5
1C06:  RETURN  
.................... } 
....................  
.................... void gripClose() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
*
1C18:  MOV     #6,W4
1C1A:  MOV     W4,19C
....................   set_pwm_duty(5, 2600); 
1C1C:  MOV     #A28,W4
1C1E:  MOV     W4,198
....................   delay_ms(500); 
1C20:  MOV     #1F4,W0
1C22:  CALL    1C08
....................   printf("done"); 
1C26:  MOV     #0,W1
1C28:  MOV     W1,W0
1C2A:  CLR.B   1
1C2C:  CALL    E4E
1C30:  INC     W1,W1
1C32:  BTSC.B  223.1
1C34:  BRA     1C32
1C36:  MOV     W0,224
1C38:  MOV     #3,W0
1C3A:  CPSGT   W1,W0
1C3C:  BRA     1C28
....................   getPackage = 0; 
1C3E:  CLR     926
1C40:  RETURN  
.................... } 
....................  
.................... void gripOpen() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
1C42:  MOV     #6,W4
1C44:  MOV     W4,19C
....................   set_pwm_duty(5, 4200); 
1C46:  MOV     #1068,W4
1C48:  MOV     W4,198
....................   delay_ms(500); 
1C4A:  MOV     #1F4,W0
1C4C:  CALL    1C08
....................   printf("done"); 
1C50:  MOV     #0,W1
1C52:  MOV     W1,W0
1C54:  CLR.B   1
1C56:  CALL    E4E
1C5A:  INC     W1,W1
1C5C:  BTSC.B  223.1
1C5E:  BRA     1C5C
1C60:  MOV     W0,224
1C62:  MOV     #3,W0
1C64:  CPSGT   W1,W0
1C66:  BRA     1C52
....................   getPackage = 0; 
1C68:  CLR     926
1C6A:  RETURN  
.................... } 
....................  
.................... void gripRotate() { 
*
2024:  MOV     W5,[W15++]
2026:  MOV     W6,[W15++]
2028:  MOV     W7,[W15++]
202A:  MOV     W8,[W15++]
202C:  MOV.B   913,W0L
202E:  MOV.B   W0L,W5L
2030:  SE      W5,W5
2032:  MOV.B   914,W0L
2034:  MOV.B   W0L,C
2036:  SE      W6,W6
2038:  MOV     W5,93A
203A:  MOV     W6,93C
203C:  CALL    14BE
2040:  MOV     W0,92A
....................   int angle = mergeInts((int)array[3], (int)array[4]); 
....................   setup_compare(4, COMPARE_PWM | COMPARE_TIMER2); 
2042:  MOV     #6,W4
2044:  MOV     W4,196
....................   set_pwm_duty(4, (int)(((angle * 0.186) + 12) * 80)); 
2046:  MOV     92A,W0
2048:  CLR     W3
204A:  BTSC    W0.F
204C:  SETM    W3
204E:  MOV     W3,W1
2050:  MOV     W3,W2
2052:  CALL    1C6C
2056:  MOV     #2B02,W4
2058:  MOV     #1687,W5
205A:  MOV     #CED9,W6
205C:  MOV     #3FC7,W7
205E:  CALL    1CD0
2062:  MOV     W0,W5
2064:  MOV     W1,W6
2066:  MOV     W2,W7
2068:  MOV     W3,W8
206A:  BCLR.B  43.0
206C:  MOV     W5,[W15++]
206E:  MOV     W6,[W15++]
2070:  MOV     W7,[W15++]
2072:  MOV     W5,W0
2074:  MOV     W6,W1
2076:  MOV     W7,W2
2078:  MOV     W8,W3
207A:  MOV     #0,W4
207C:  MOV     #0,W5
207E:  MOV     #0,W6
2080:  MOV     #4028,W7
2082:  CALL    1DE0
2086:  MOV     [--W15],W7
2088:  MOV     [--W15],W6
208A:  MOV     [--W15],W5
208C:  MOV     W0,W5
208E:  MOV     W1,W6
2090:  MOV     W2,W7
2092:  MOV     W3,W8
2094:  MOV     W5,[W15++]
2096:  MOV     W6,[W15++]
2098:  MOV     W7,[W15++]
209A:  MOV     W5,W0
209C:  MOV     W6,W1
209E:  MOV     W7,W2
20A0:  MOV     W8,W3
20A2:  MOV     #0,W4
20A4:  MOV     #0,W5
20A6:  MOV     #0,W6
20A8:  MOV     #4054,W7
20AA:  CALL    1CD0
20AE:  MOV     [--W15],W7
20B0:  MOV     [--W15],W6
20B2:  MOV     [--W15],W5
20B4:  CALL    1FCE
20B8:  MOV     W0,W5
20BA:  MOV     W5,192
....................   delay_ms(500); 
20BC:  MOV     #1F4,W0
20BE:  CALL    1C08
....................   printf("done"); 
20C2:  MOV     #0,W1
20C4:  MOV     W1,W0
20C6:  CLR.B   1
20C8:  CALL    E4E
20CC:  INC     W1,W1
20CE:  BTSC.B  223.1
20D0:  BRA     20CE
20D2:  MOV     W0,224
20D4:  MOV     #3,W0
20D6:  CPSGT   W1,W0
20D8:  BRA     20C4
....................   getPackage = 0; 
20DA:  CLR     926
20DC:  MOV     [--W15],W8
20DE:  MOV     [--W15],W7
20E0:  MOV     [--W15],W6
20E2:  MOV     [--W15],W5
20E4:  RETURN  
.................... } 
....................  
.................... void setAGains() { 
....................   K_Pa = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
*
255E:  MOV.B   913,W0L
2560:  MOV.B   W0L,92A
2562:  MOV.B   914,W0L
2564:  MOV.B   W0L,92B
2566:  CALL    249C
256A:  MOV     W0,8F2
256C:  MOV     W1,8F4
....................   K_Ia = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
256E:  MOV.B   915,W0L
2570:  MOV.B   W0L,92A
2572:  MOV.B   916,W0L
2574:  MOV.B   W0L,92B
2576:  CALL    249C
257A:  MOV     W0,8F6
257C:  MOV     W1,8F8
....................   K_Da = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
257E:  MOV.B   917,W0L
2580:  MOV.B   W0L,92A
2582:  MOV.B   918,W0L
2584:  MOV.B   W0L,92B
2586:  CALL    249C
258A:  MOV     W0,8FA
258C:  MOV     W1,8FC
....................   printf("done"); 
258E:  MOV     #0,W1
2590:  MOV     W1,W0
2592:  CLR.B   1
2594:  CALL    E4E
2598:  INC     W1,W1
259A:  BTSC.B  223.1
259C:  BRA     259A
259E:  MOV     W0,224
25A0:  MOV     #3,W0
25A2:  CPSGT   W1,W0
25A4:  BRA     2590
....................   getPackage = 0; 
25A6:  CLR     926
25A8:  RETURN  
.................... } 
....................  
.................... void setBGains() { 
....................   K_Pb = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
25AA:  MOV.B   913,W0L
25AC:  MOV.B   W0L,92A
25AE:  MOV.B   914,W0L
25B0:  MOV.B   W0L,92B
25B2:  CALL    249C
25B6:  MOV     W0,8FE
25B8:  MOV     W1,900
....................   K_Ib = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
25BA:  MOV.B   915,W0L
25BC:  MOV.B   W0L,92A
25BE:  MOV.B   916,W0L
25C0:  MOV.B   W0L,92B
25C2:  CALL    249C
25C6:  MOV     W0,902
25C8:  MOV     W1,904
....................   K_Db = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
25CA:  MOV.B   917,W0L
25CC:  MOV.B   W0L,92A
25CE:  MOV.B   918,W0L
25D0:  MOV.B   W0L,92B
25D2:  CALL    249C
25D6:  MOV     W0,906
25D8:  MOV     W1,908
....................   printf("done"); 
25DA:  MOV     #0,W1
25DC:  MOV     W1,W0
25DE:  CLR.B   1
25E0:  CALL    E4E
25E4:  INC     W1,W1
25E6:  BTSC.B  223.1
25E8:  BRA     25E6
25EA:  MOV     W0,224
25EC:  MOV     #3,W0
25EE:  CPSGT   W1,W0
25F0:  BRA     25DC
....................   getPackage = 0; 
25F2:  CLR     926
25F4:  RETURN  
.................... } 
....................  
.................... void setZGains() { 
....................   K_Pz = intsToFloat((unsigned char)array[3], (unsigned char)array[4]); 
25F6:  MOV.B   913,W0L
25F8:  MOV.B   W0L,92A
25FA:  MOV.B   914,W0L
25FC:  MOV.B   W0L,92B
25FE:  CALL    249C
2602:  MOV     W0,8E6
2604:  MOV     W1,8E8
....................   K_Iz = intsToFloat((unsigned char)array[5], (unsigned char)array[6]); 
2606:  MOV.B   915,W0L
2608:  MOV.B   W0L,92A
260A:  MOV.B   916,W0L
260C:  MOV.B   W0L,92B
260E:  CALL    249C
2612:  MOV     W0,8EA
2614:  MOV     W1,8EC
....................   K_Dz = intsToFloat((unsigned char)array[7], (unsigned char)array[8]); 
2616:  MOV.B   917,W0L
2618:  MOV.B   W0L,92A
261A:  MOV.B   918,W0L
261C:  MOV.B   W0L,92B
261E:  CALL    249C
2622:  MOV     W0,8EE
2624:  MOV     W1,8F0
....................   printf("done"); 
2626:  MOV     #0,W1
2628:  MOV     W1,W0
262A:  CLR.B   1
262C:  CALL    E4E
2630:  INC     W1,W1
2632:  BTSC.B  223.1
2634:  BRA     2632
2636:  MOV     W0,224
2638:  MOV     #3,W0
263A:  CPSGT   W1,W0
263C:  BRA     2628
....................   getPackage = 0; 
263E:  CLR     926
2640:  RETURN  
.................... } 
....................  
.................... void setTolerances(){ 
2642:  MOV     W5,[W15++]
2644:  MOV     W6,[W15++]
....................   tolerance_a = mergeInts((int)array[3], (int)array[4]); 
2646:  MOV.B   913,W0L
2648:  MOV.B   W0L,W5L
264A:  SE      W5,W5
264C:  MOV.B   914,W0L
264E:  MOV.B   W0L,C
2650:  SE      W6,W6
2652:  MOV     W5,93A
2654:  MOV     W6,93C
2656:  CALL    14BE
265A:  MOV     W0,8E0
....................   tolerance_b = mergeInts((int)array[5], (int)array[6]); 
265C:  MOV.B   915,W0L
265E:  MOV.B   W0L,W5L
2660:  SE      W5,W5
2662:  MOV.B   916,W0L
2664:  MOV.B   W0L,C
2666:  SE      W6,W6
2668:  MOV     W5,93A
266A:  MOV     W6,93C
266C:  CALL    14BE
2670:  MOV     W0,8E2
....................   tolerance_z = mergeInts((int)array[7], (int)array[8]); 
2672:  MOV.B   917,W0L
2674:  MOV.B   W0L,W5L
2676:  SE      W5,W5
2678:  MOV.B   918,W0L
267A:  MOV.B   W0L,C
267C:  SE      W6,W6
267E:  MOV     W5,93A
2680:  MOV     W6,93C
2682:  CALL    14BE
2686:  MOV     W0,8E4
....................   printf("done"); 
2688:  MOV     #0,W1
268A:  MOV     W1,W0
268C:  CLR.B   1
268E:  CALL    E4E
2692:  INC     W1,W1
2694:  BTSC.B  223.1
2696:  BRA     2694
2698:  MOV     W0,224
269A:  MOV     #3,W0
269C:  CPSGT   W1,W0
269E:  BRA     268A
....................   getPackage = 0; 
26A0:  CLR     926
26A2:  MOV     [--W15],W6
26A4:  MOV     [--W15],W5
26A6:  RETURN  
.................... } 
....................  
.................... int sumCheck() { 
*
1036:  CLR.B   92A
1038:  MOV.B   919,W0L
103A:  MOV.B   W0L,92B
....................   char sum = 0; 
....................   char checksum = array[9]; 
....................   for (int i = 0; i < 9; i++) { 
103C:  CLR     92C
103E:  MOV     92C,W4
1040:  CP      W4,#9
1042:  BRA     GE,1054
....................     sum = sum + (char)array[i]; 
1044:  MOV     #910,W4
1046:  MOV     92C,W3
1048:  ADD     W3,W4,W0
104A:  MOV     W0,W4
104C:  MOV.B   [W4],W0L
104E:  ADD.B   92A
1050:  INC     092C
1052:  BRA     103E
....................   } 
....................   sum = (char)sum; 
....................   if (sum == checksum) { 
1054:  MOV.B   92A,W0L
1056:  CP.B    92B
1058:  BRA     NZ,1062
....................     return 1; 
105A:  MOV     #1,W4
105C:  MOV     W4,0
105E:  BRA     1066
....................   } else { 
1060:  BRA     1066
....................     return 0; 
1062:  CLR     0
1064:  BRA     1066
....................   } 
1066:  RETURN  
.................... } 
.................... // 
....................  
.................... // 
.................... void main() { 
*
26A8:  MOV     #2780,W15
26AA:  MOV     #27FF,W0
26AC:  MOV     W0,20
26AE:  NOP     
26B0:  MOV     #4444,W0
26B2:  MOV     W0,A8
26B4:  BSET.B  81.7
26B6:  MOV     #46,W0
26B8:  MOV.B   W0L,742
26BA:  MOV     #57,W0
26BC:  MOV.B   W0L,742
26BE:  BCLR.B  742.6
26C0:  MOV     #63F,W0
26C2:  MOV     W0,680
26C4:  MOV     #3F05,W0
26C6:  MOV     W0,682
26C8:  MOV     #3F0C,W0
26CA:  MOV     W0,6A4
26CC:  MOV     #1615,W0
26CE:  MOV     W0,6C0
26D0:  MOV     #13,W0
26D2:  MOV     W0,6C4
26D4:  MOV     #12,W0
26D6:  MOV     W0,6CA
26D8:  MOV     #300,W0
26DA:  MOV     W0,6CC
26DC:  MOV     #14,W0
26DE:  MOV     W0,6CE
26E0:  MOV     #46,W0
26E2:  MOV.B   W0L,742
26E4:  MOV     #57,W0
26E6:  MOV.B   W0L,742
26E8:  BSET.B  742.6
26EA:  CLR     744
26EC:  MOV     #8000,W4
26EE:  MOV     W4,220
26F0:  MOV     #400,W4
26F2:  MOV     W4,222
26F4:  BSET.B  220.3
26F6:  MOV     #1A0,W4
26F8:  MOV     W4,228
26FA:  CLR     8B0
26FC:  CLR     8B2
26FE:  CLR     8B4
2700:  CLR     8B6
2702:  CLR     8B8
2704:  CLR     8BA
2706:  MOV     #8BC,W4
2708:  MOV     W4,8BE
270A:  MOV     #8C0,W4
270C:  MOV     W4,8C2
270E:  MOV     #8C4,W4
2710:  MOV     W4,8C6
2712:  CLR     8C8
2714:  MOV     #8C8,W4
2716:  MOV     W4,8CA
2718:  CLR     8CC
271A:  MOV     #8CC,W4
271C:  MOV     W4,8CE
271E:  CLR     8D0
2720:  MOV     #8D0,W4
2722:  MOV     W4,8D2
2724:  CLR     8D4
2726:  MOV     #8D4,W4
2728:  MOV     W4,8D6
272A:  CLR     8D8
272C:  MOV     #8D8,W4
272E:  MOV     W4,8DA
2730:  CLR     8DC
2732:  MOV     #8DC,W4
2734:  MOV     W4,8DE
2736:  MOV     #1E,W4
2738:  MOV     W4,8E0
273A:  MOV     #1E,W4
273C:  MOV     W4,8E2
273E:  MOV     #14,W4
2740:  MOV     W4,8E4
2742:  MOV     #999A,W4
2744:  MOV     W4,8E6
2746:  MOV     #3F19,W4
2748:  MOV     W4,8E8
274A:  MOV     #9BA6,W4
274C:  MOV     W4,8EA
274E:  MOV     #3AC4,W4
2750:  MOV     W4,8EC
2752:  MOV     #126F,W4
2754:  MOV     W4,8EE
2756:  MOV     #3B03,W4
2758:  MOV     W4,8F0
275A:  MOV     #999A,W4
275C:  MOV     W4,8F2
275E:  MOV     #3F19,W4
2760:  MOV     W4,8F4
2762:  MOV     #126F,W4
2764:  MOV     W4,8F6
2766:  MOV     #3A83,W4
2768:  MOV     W4,8F8
276A:  MOV     #D70A,W4
276C:  MOV     W4,8FA
276E:  MOV     #3B23,W4
2770:  MOV     W4,8FC
2772:  MOV     #999A,W4
2774:  MOV     W4,8FE
2776:  MOV     #3F19,W4
2778:  MOV     W4,900
277A:  MOV     #126F,W4
277C:  MOV     W4,902
277E:  MOV     #3A83,W4
2780:  MOV     W4,904
2782:  MOV     #D70A,W4
2784:  MOV     W4,906
2786:  MOV     #3B23,W4
2788:  MOV     W4,908
278A:  CLR     90A
278C:  CLR     90C
278E:  CLR     90E
2790:  CLR.B   924
2792:  CLR     926
2794:  SETM    32C
2796:  BRA     2830
2798:  DATA    C0,06,08
279A:  DATA    00,00,00
279C:  DATA    4B,F0,3F
279E:  DATA    5C,0A,58
27A0:  DATA    F6,3B,8F
27A2:  DATA    00,C0,3C
27A4:  DATA    8B,28,AC
27A6:  DATA    3C,BE,F6
27A8:  DATA    3F,D2,D5
27AA:  DATA    44,16,8C
27AC:  DATA    15,D7,BF
27AE:  DATA    69,00,5A
27B0:  DATA    2E,1B,87
27B2:  DATA    99,3F,9A
27B4:  DATA    5F,AD,4B
27B6:  DATA    91,E4,01
27B8:  DATA    C0,5D,11
27BA:  DATA    2F,92,E4
27BC:  DATA    81,FB,3F
27BE:  DATA    38,DA,91
27C0:  DATA    80,9D,C5
27C2:  DATA    E0,BF,6F
27C4:  DATA    12,C0,B4
27C6:  DATA    C3,09,AB
27C8:  DATA    3F,6B,C1
27CA:  DATA    03,4E,C1
27CC:  DATA    B5,45,BF
27CE:  DATA    F7,40,05
27D0:  DATA    FF,00,5A
27D2:  DATA    EF,3F,F3
27D4:  DATA    A3,E2,F7
27D6:  DATA    D7,FF,01
27D8:  DATA    40,C0,B4
27DA:  DATA    FF,05,3C
27DC:  DATA    58,FC,3F
27DE:  DATA    3B,D3,C0
27E0:  DATA    B5,BA,8C
27E2:  DATA    E2,3F,39
27E4:  DATA    D3,C7,3D
27E6:  DATA    41,79,B2
27E8:  DATA    3F,87,0D
27EA:  DATA    3C,50,D0
27EC:  DATA    AF,62,3F
27EE:  DATA    30,4B,8D
27F0:  DATA    A2,82,AA
27F2:  DATA    04,40,09
27F4:  DATA    A0,40,4A
27F6:  DATA    05,76,03
27F8:  DATA    40,EC,9E
27FA:  DATA    37,88,A6
27FC:  DATA    44,F0,3F
27FE:  DATA    8F,12,8D
2800:  DATA    29,9A,5B
2802:  DATA    C7,3F,0E
2804:  DATA    E0,80,7C
2806:  DATA    A1,D8,86
2808:  DATA    3F,29,4B
280A:  DATA    FB,95,C2
280C:  DATA    37,1A,3F
280E:  DATA    C0,14,09
2810:  DATA    10,00,00
2812:  DATA    00,00,00
2814:  INC     W2,W2
2816:  CP      W2,#1
2818:  BRA     NZ,2822
281A:  TBLRDL  [W1],W3
281C:  TBLRDH  [W1++],W4
281E:  MOV.B   6,W0L
2820:  RETURN  
2822:  CP      W2,#2
2824:  BRA     NZ,282A
2826:  MOV.B   7,W0L
2828:  RETURN  
282A:  MOV.B   8,W0L
282C:  CLR     W2
282E:  RETURN  
2830:  MOV     #0,W6
2832:  MOV     #0,W0
2834:  MOV     W0,32
2836:  MOV     #2798,W0
2838:  MOV     W0,W1
283A:  CLR     W2
283C:  CALL    2814
2840:  MOV.B   W0L,B
2842:  CALL    2814
2846:  MOV.B   W0L,A
2848:  CP0     W5
284A:  BRA     Z,287E
284C:  BTSS    W5.F
284E:  BRA     285E
2850:  CALL    2814
2854:  MOV.B   W0L,D
2856:  CALL    2814
285A:  MOV.B   W0L,C
285C:  BCLR    W5.F
285E:  BTSS    W5.E
2860:  BRA     2872
2862:  BCLR    W5.E
2864:  DEC     W5,W5
2866:  CALL    2814
286A:  MOV.B   W0L,W7L
286C:  REPEAT  W5
286E:  MOV.B   W7L,[W6++]
2870:  BRA     283C
2872:  CALL    2814
2876:  MOV.B   W0L,[W6++]
2878:  DEC     W5,W5
287A:  BRA     NZ,2872
287C:  BRA     283C
....................   disable_interrupts(GLOBAL); 
287E:  BCLR.B  81.7
2880:  MOV     #E0,W4
2882:  MOV     W4,42
2884:  BSET.B  81.7
....................  
....................   clear_interrupt( 
....................       INT_RDA); // recommend style coding to confirm everything clear before use 
2886:  REPEAT  #3
2888:  MOV     226,W0
288A:  BCLR.B  85.3
....................  
....................   enable_interrupts(INT_RDA); 
288C:  BSET.B  95.3
....................   Init_Interrupts(); 
288E:  CALL    1028
....................   enable_interrupts(GLOBAL); 
2892:  BCLR.B  81.7
2894:  CLR     42
2896:  BSET.B  81.7
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); 
2898:  CLR     112
289A:  MOV     #C8,W4
289C:  MOV     W4,10E
289E:  MOV     #8010,W4
28A0:  MOV     W4,112
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8, 8000); 
28A2:  CLR     110
28A4:  MOV     #1F40,W4
28A6:  MOV     W4,10C
28A8:  MOV     #8010,W4
28AA:  MOV     W4,110
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
28AC:  MOV     #E,W4
28AE:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
28B0:  MOV     #E,W4
28B2:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
28B4:  MOV     #E,W4
28B6:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
28B8:  CLR     18C
....................   set_pwm_duty(2, 0); 
28BA:  CLR     186
....................   set_pwm_duty(1, 0); 
28BC:  CLR     180
....................   count_a = 0; 
28BE:  CLR     8B0
28C0:  CLR     8B2
....................   count_b = 0; 
28C2:  CLR     8B4
28C4:  CLR     8B6
....................   count_z = 0; 
28C6:  CLR     8B8
28C8:  CLR     8BA
....................   // setPosAB(); 
....................   // gripOpen(); 
....................   // delay_ms(1000); 
....................   // gripClose(); 
....................   // delay_ms(1000); 
....................   // printf("System Ready!\r\n"); 
....................   while (TRUE) { 
....................     if (getPackage >= 1) { 
28CA:  MOV     926,W4
28CC:  CP      W4,#1
28CE:  BRA     LT,297C
....................       int received = sumCheck(); 
28D0:  CALL    1036
28D4:  MOV     W0,928
....................       if (!received) { 
28D6:  CP0     928
28D8:  BRA     NZ,28F6
....................         printf("resend"); 
28DA:  MOV     #0,W1
28DC:  MOV     W1,W0
28DE:  CLR.B   1
28E0:  CALL    EDE
28E4:  INC     W1,W1
28E6:  BTSC.B  223.1
28E8:  BRA     28E6
28EA:  MOV     W0,224
28EC:  MOV     #5,W0
28EE:  CPSGT   W1,W0
28F0:  BRA     28DC
....................         getPackage = 0; 
28F2:  CLR     926
....................       } else { 
28F4:  BRA     297C
....................         switch (array[2]) { 
28F6:  MOV.B   912,W0L
28F8:  CLR.B   1
28FA:  XOR     #0,W0
28FC:  BRA     Z,2924
28FE:  XOR     #1,W0
2900:  BRA     Z,292A
2902:  XOR     #3,W0
2904:  BRA     Z,2930
2906:  XOR     #1,W0
2908:  BRA     Z,2936
290A:  XOR     #7,W0
290C:  BRA     Z,293C
290E:  XOR     #1,W0
2910:  BRA     Z,2942
2912:  XOR     #3,W0
2914:  BRA     Z,2948
2916:  XOR     #1,W0
2918:  BRA     Z,294E
291A:  XOR     #F,W0
291C:  BRA     Z,2954
291E:  XOR     #1,W0
2920:  BRA     Z,295A
2922:  BRA     2960
....................         case 0: 
....................           setHome(); 
2924:  CALL    12F2
....................           break; 
2928:  BRA     297C
....................         case 1: 
....................           setPosAB(); 
292A:  CALL    18DC
....................           break; 
292E:  BRA     297C
....................         case 2: 
....................           setPosZ(); 
2930:  CALL    1AFE
....................           break; 
2934:  BRA     297C
....................         case 3: 
....................           gripClose(); 
2936:  CALL    1C18
....................           break; 
293A:  BRA     297C
....................         case 4: 
....................           gripOpen(); 
293C:  CALL    1C42
....................           break; 
2940:  BRA     297C
....................         case 5: 
....................           gripRotate(); 
2942:  CALL    2024
....................           break; 
2946:  BRA     297C
....................         case 6: 
....................           setAGains(); 
2948:  CALL    255E
....................           break; 
294C:  BRA     297C
....................         case 7: 
....................           setBGains(); 
294E:  CALL    25AA
....................           break; 
2952:  BRA     297C
....................         case 8: 
....................           setZGains(); 
2954:  CALL    25F6
....................           break; 
2958:  BRA     297C
....................         case 9: 
....................           setTolerances(); 
295A:  CALL    2642
....................           break; 
295E:  BRA     297C
....................         default: 
....................           printf("resend"); 
2960:  MOV     #0,W1
2962:  MOV     W1,W0
2964:  CLR.B   1
2966:  CALL    EDE
296A:  INC     W1,W1
296C:  BTSC.B  223.1
296E:  BRA     296C
2970:  MOV     W0,224
2972:  MOV     #5,W0
2974:  CPSGT   W1,W0
2976:  BRA     2962
....................           getPackage = 0; 
2978:  CLR     926
....................           break; 
297A:  BRA     297C
....................         } 
....................       } 
....................     } 
297C:  BRA     28CA
....................   } 
.................... } 
297E:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
