CCS PCD C Compiler, Version 5.015, 5967               12-Nov-18 21:44

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\SWT\serial.lst

               ROM used:   1392 bytes (4%)
                           Largest free fragment is 29324
               RAM used:   162 (2%) at main() level
                           178 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    1028
*
0C50:  GOTO    EF6
*
0C74:  GOTO    F2E
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    64,6F,00
0E0A:  DATA    6E,65,00
0E0C:  DATA    00,00,00
0E0E:  CLR     32
0E10:  MOV     #E1A,W3
0E12:  ADD     W3,W0,W0
0E14:  TBLRDL.B[W0],W0L
0E16:  CLR.B   1
0E18:  RETURN  
0E1A:  DATA    53,79,00
0E1C:  DATA    73,74,00
0E1E:  DATA    65,6D,00
0E20:  DATA    20,52,00
0E22:  DATA    65,61,00
0E24:  DATA    64,79,00
0E26:  DATA    21,0D,00
0E28:  DATA    0A,00,00
0E2A:  CLR     32
0E2C:  MOV     #E36,W3
0E2E:  ADD     W3,W0,W0
0E30:  TBLRDL.B[W0],W0L
0E32:  CLR.B   1
0E34:  RETURN  
0E36:  DATA    72,65,00
0E38:  DATA    73,65,00
0E3A:  DATA    6E,64,00
0E3C:  DATA    00,00,00
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
....................  
.................... #define DEVICE_ID 2 
.................... #PIN_SELECT U1RX = PIN_B13 //PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B12 //PIN_B15 // 
.................... #use rs232 (UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
0E3E:  BSET.B  2C9.4
0E40:  BTSC.B  2CB.4
0E42:  BRA     E40
0E44:  MOV     #8,W3
0E46:  CLR     W2
0E48:  REPEAT  #229
0E4A:  NOP     
0E4C:  REPEAT  #67A
0E4E:  NOP     
0E50:  BCLR.B  42.0
0E52:  BTSC.B  2CB.4
0E54:  BSET.B  42.0
0E56:  RRC.B   W2L,W2L
0E58:  DEC     W3,W3
0E5A:  BRA     NZ,E4C
0E5C:  REPEAT  #681
0E5E:  NOP     
0E60:  MOV     W2,W0
0E62:  RETURN  
0E64:  BCLR.B  2C9.5
0E66:  BCLR.B  2CD.5
0E68:  MOV     #8,W3
0E6A:  REPEAT  #67E
0E6C:  NOP     
0E6E:  RRC.B   82E
0E70:  BTSC.B  42.0
0E72:  BSET.B  2CD.5
0E74:  BTSS.B  42.0
0E76:  BCLR.B  2CD.5
0E78:  REPEAT  #679
0E7A:  NOP     
0E7C:  DEC     W3,W3
0E7E:  BRA     NZ,E6E
0E80:  BSET.B  2CD.5
0E82:  REPEAT  #680
0E84:  NOP     
0E86:  RETURN  
.................... #PIN_SELECT OC1 = PIN_B2         // Pin output is connected to DX02 
.................... #PIN_SELECT OC2 = PIN_B3         // Pin output is connected to DX03 
.................... #PIN_SELECT OC3 = PIN_B4         // Pin output is connected to DXI0  (PWM) 
.................... #PIN_SELECT INT1 = PIN_B6 
.................... #define limitSw_x PIN_B7 				 //PIN_B7 
....................  
.................... long count = 0; 
.................... long direction = 0; 
.................... char array[20] = {}; 
.................... char SM_id = 0; 
.................... int getPackage = 0; 
.................... char command_ID; 
.................... int posi = 0; 
.................... // char* print_float(float data){ 
.................... // 	int intDist = data / 1; 
.................... //     int dotDist = (((intDist>>15)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     char stringFloat[20]; 
.................... //     sprintf(stringFloat, "%d.%d", intDist, dotDist); 
.................... //     return stringFloat; 
.................... // } 
.................... // void print_float(char* stringResult, float data){ 
.................... // 	int intDist = data / 1; 
.................... //     int dotDist = (((intDist>>15)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     sprintf(stringResult, "%d.%d", intDist, dotDist); 
.................... // } 
....................  
.................... // Communication Routines// 
....................  
.................... void SM_RxD(int c) { 
0E88:  MOV     W5,[W15++]
....................   if (getPackage == 0) { 
0E8A:  CP0     81E
0E8C:  BRA     NZ,EF2
....................     if (SM_id < 2) { 
0E8E:  MOV.B   81C,W0L
0E90:  SE      W0,W0
0E92:  CP      W0,#2
0E94:  BRA     GE,EB0
....................       if (c == 255) { 
0E96:  MOV     830,W4
0E98:  XOR     #FF,W4
0E9A:  BRA     NZ,EAC
....................         array[SM_id] = c; 
0E9C:  MOV.B   81C,W0L
0E9E:  SE      W0,W0
0EA0:  MOV     #808,W4
0EA2:  ADD     W0,W4,W5
0EA4:  MOV     830,W0
0EA6:  MOV.B   W0L,[W5+#0]
....................         SM_id++; 
0EA8:  INC.B   081C
....................       } else { 
0EAA:  BRA     EAE
....................         SM_id = 0; 
0EAC:  CLR.B   81C
....................       } 
....................     } else if (SM_id == 2) { 
0EAE:  BRA     EF2
0EB0:  MOV.B   81C,W0L
0EB2:  SE      W0,W0
0EB4:  CP      W0,#2
0EB6:  BRA     NZ,ECC
....................       array[SM_id] = c; 
0EB8:  MOV.B   81C,W0L
0EBA:  SE      W0,W0
0EBC:  MOV     #808,W4
0EBE:  ADD     W0,W4,W5
0EC0:  MOV     830,W0
0EC2:  MOV.B   W0L,[W5+#0]
....................       command_ID = c; 
0EC4:  MOV.B   830,W0L
0EC6:  MOV.B   W0L,81D
....................       SM_id++; 
0EC8:  INC.B   081C
....................     } else if (SM_id > 2) { 
0ECA:  BRA     EF2
0ECC:  MOV.B   81C,W0L
0ECE:  SE      W0,W0
0ED0:  CP      W0,#2
0ED2:  BRA     LE,EF2
....................       array[SM_id] = c; 
0ED4:  MOV.B   81C,W0L
0ED6:  SE      W0,W0
0ED8:  MOV     #808,W4
0EDA:  ADD     W0,W4,W5
0EDC:  MOV     830,W0
0EDE:  MOV.B   W0L,[W5+#0]
....................       if (SM_id >= 8) { 
0EE0:  MOV.B   81C,W0L
0EE2:  SE      W0,W0
0EE4:  CP      W0,#8
0EE6:  BRA     LT,EF0
....................         getPackage = 1; 
0EE8:  MOV     #1,W4
0EEA:  MOV     W4,81E
....................         SM_id = 0; 
0EEC:  CLR.B   81C
....................       } else { 
0EEE:  BRA     EF2
....................         SM_id++; 
0EF0:  INC.B   081C
....................       } 
....................     } 
....................   } 
0EF2:  MOV     [--W15],W5
0EF4:  RETURN  
.................... } 
.................... #INT_RDA 
.................... void UART1_Isr() { 
0EF6:  PUSH    42
0EF8:  PUSH    36
0EFA:  PUSH    32
0EFC:  MOV     W0,[W15++]
0EFE:  MOV     #2,W0
0F00:  REPEAT  #C
0F02:  MOV     [W0++],[W15++]
0F04:  CALL    E3E
0F08:  MOV.B   W0L,82C
0F0A:  CLR.B   82D
.................... 	int c = getc(); 
.................... 	putc(c); 
0F0C:  MOV.B   82C,W0L
0F0E:  MOV.B   W0L,82E
0F10:  CALL    E64
.................... 	SM_RxD(c); 
0F14:  PUSH    82C
0F16:  POP     830
0F18:  CALL    E88
.................... } 
.................... /***/ 
....................  
.................... //PID Control// 
0F1C:  BCLR.B  85.3
0F1E:  MOV     #1A,W0
0F20:  REPEAT  #C
0F22:  MOV     [--W15],[W0--]
0F24:  MOV     [--W15],W0
0F26:  POP     32
0F28:  POP     36
0F2A:  POP     42
0F2C:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
0F2E:  PUSH    42
0F30:  PUSH    36
0F32:  PUSH    32
0F34:  MOV     W0,[W15++]
0F36:  MOV     #2,W0
0F38:  REPEAT  #C
0F3A:  MOV     [W0++],[W15++]
....................    if(input(PIN_B6)==1){ 
0F3C:  BSET.B  2C8.6
0F3E:  BTSS.B  2CA.6
0F40:  BRA     F4A
....................       count++; 
0F42:  INC     0800
0F44:  BTSC.B  42.1
0F46:  INC     0802
....................    }else{ 
0F48:  BRA     F50
....................       count--; 
0F4A:  DEC     0800
0F4C:  BTSS.B  42.0
0F4E:  DEC     0802
....................    } 
0F50:  BCLR.B  86.4
0F52:  MOV     #1A,W0
0F54:  REPEAT  #C
0F56:  MOV     [--W15],[W0--]
0F58:  MOV     [--W15],W0
0F5A:  POP     32
0F5C:  POP     36
0F5E:  POP     42
0F60:  RETFIE  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................    enable_interrupts( INT_EXT1 ); 
0F62:  BSET.B  96.4
....................    ext_int_edge( 1, L_TO_H ); // Rising Edge 
0F64:  BCLR.B  82.1
0F66:  RETURN  
.................... } 
....................  
.................... //motor driver 
....................  
.................... void Motor(int u){ 
....................    if (u > 100)u = 100; 
....................    if (u < -100)u = -100; 
....................    if(u>0){ 
....................       output_bit(PIN_B2,0); 
....................       output_bit(PIN_B3,1); 
....................       direction = 0; 
....................       set_pwm_duty(3, (int)(2 * u)); 
....................    } 
....................    else if(u<0) { 
....................       output_bit(PIN_B2,1); 
....................       output_bit(PIN_B3,0); 
....................       direction = 1; 
....................       set_pwm_duty(3, (int)(2 * -u)); 
....................    }else{ 
....................       output_bit(PIN_B2,1); 
....................       output_bit(PIN_B3,1); 
....................       set_pwm_duty(3, (int)(100)); 
....................       delay_ms(100); 
....................    } 
.................... } 
....................  
.................... void Set_position(int post){ 
....................    int error = post - count; 
....................    int Kp = 1; 
....................    if (error > 5){ 
....................       Motor(error*Kp); 
.................... 	  posi = (((count*2*5*22)/7)/768)+((((count*2*5*22*2)/7)/768)/5) ; 
.................... 	  printf("Position : %d\n",posi); 
....................    } 
....................    else{ 
....................       Motor(0); 
....................       delay_ms(500); 
....................       //printf("count: %d\n",count); 
.................... 	  posi = (((count*2*5*22)/7)/768)+((((count*2*5*22*2)/7)/768)/5) ; 
.................... 	  printf("Position : %d\n",posi); 
....................    } 
.................... } 
.................... /***/ 
....................  
.................... //COMMANDS// 
.................... void setHome(){ 
.................... 	printf("done"); 
*
0F9E:  MOV     #0,W1
0FA0:  MOV     W1,W0
0FA2:  CLR.B   1
0FA4:  CALL    DFC
0FA8:  INC     W1,W1
0FAA:  MOV     W1,[W15++]
0FAC:  PUSH    42
0FAE:  BCLR.B  81.7
0FB0:  SETM.B  42
0FB2:  BSET.B  81.7
0FB4:  MOV.B   W0L,82E
0FB6:  CALL    E64
0FBA:  BCLR.B  81.7
0FBC:  POP     42
0FBE:  BSET.B  81.7
0FC0:  MOV     [--W15],W1
0FC2:  MOV     #3,W0
0FC4:  CPSGT   W1,W0
0FC6:  BRA     FA0
.................... 	getPackage = 0; 
0FC8:  CLR     81E
0FCA:  RETURN  
....................  
.................... } 
....................  
.................... void setPosXY(){ 
.................... 	printf("done"); 
0FCC:  MOV     #0,W1
0FCE:  MOV     W1,W0
0FD0:  CLR.B   1
0FD2:  CALL    DFC
0FD6:  INC     W1,W1
0FD8:  MOV     W1,[W15++]
0FDA:  PUSH    42
0FDC:  BCLR.B  81.7
0FDE:  SETM.B  42
0FE0:  BSET.B  81.7
0FE2:  MOV.B   W0L,82E
0FE4:  CALL    E64
0FE8:  BCLR.B  81.7
0FEA:  POP     42
0FEC:  BSET.B  81.7
0FEE:  MOV     [--W15],W1
0FF0:  MOV     #3,W0
0FF2:  CPSGT   W1,W0
0FF4:  BRA     FCE
.................... 	getPackage = 0; 
0FF6:  CLR     81E
0FF8:  RETURN  
.................... } 
....................  
.................... void setPosZ(){ 
.................... 	printf("done"); 
0FFA:  MOV     #0,W1
0FFC:  MOV     W1,W0
0FFE:  CLR.B   1
1000:  CALL    DFC
1004:  INC     W1,W1
1006:  MOV     W1,[W15++]
1008:  PUSH    42
100A:  BCLR.B  81.7
100C:  SETM.B  42
100E:  BSET.B  81.7
1010:  MOV.B   W0L,82E
1012:  CALL    E64
1016:  BCLR.B  81.7
1018:  POP     42
101A:  BSET.B  81.7
101C:  MOV     [--W15],W1
101E:  MOV     #3,W0
1020:  CPSGT   W1,W0
1022:  BRA     FFC
.................... 	getPackage = 0; 
1024:  CLR     81E
1026:  RETURN  
.................... } 
....................  
.................... int sumCheck() { 
*
0F68:  CLR     824
0F6A:  MOV.B   810,W0L
0F6C:  SE      W0,W0
0F6E:  MOV     W0,826
.................... 	int sum = 0; 
.................... 	int checksum = array[8]; 
.................... 	for(int i = 0; i < 7; i++){ 
0F70:  CLR     828
0F72:  MOV     828,W4
0F74:  CP      W4,#7
0F76:  BRA     GE,F8A
.................... 		sum = sum + array[i]; 
0F78:  MOV     #808,W4
0F7A:  MOV     828,W3
0F7C:  ADD     W3,W4,W0
0F7E:  MOV     W0,W4
0F80:  MOV.B   [W4],W0L
0F82:  SE      W0,W0
0F84:  ADD     824
0F86:  INC     0828
0F88:  BRA     F72
.................... 	} 
.................... 	if(sum == checksum){ 
0F8A:  MOV     824,W0
0F8C:  CP      826
0F8E:  BRA     NZ,F98
.................... 		return 1; 
0F90:  MOV     #1,W4
0F92:  MOV     W4,0
0F94:  BRA     F9C
.................... 	} 
0F96:  BRA     F9C
.................... 	else{ 
.................... 		return 0; 
0F98:  CLR     0
0F9A:  BRA     F9C
.................... 	} 
0F9C:  RETURN  
.................... } 
....................  
....................  
.................... void main() { 
*
1028:  MOV     #2780,W15
102A:  MOV     #27FF,W0
102C:  MOV     W0,20
102E:  NOP     
1030:  MOV     #4444,W0
1032:  MOV     W0,A8
1034:  BSET.B  81.7
1036:  MOV     #46,W0
1038:  MOV.B   W0L,742
103A:  MOV     #57,W0
103C:  MOV.B   W0L,742
103E:  BCLR.B  742.6
1040:  MOV     #63F,W0
1042:  MOV     W0,680
1044:  MOV     #3F0D,W0
1046:  MOV     W0,6A4
1048:  MOV     #1312,W0
104A:  MOV     W0,6C2
104C:  MOV     #14,W0
104E:  MOV     W0,6C4
1050:  MOV     #3,W0
1052:  MOV     W0,6CC
1054:  MOV     #46,W0
1056:  MOV.B   W0L,742
1058:  MOV     #57,W0
105A:  MOV.B   W0L,742
105C:  BSET.B  742.6
105E:  CLR     744
1060:  BCLR.B  2C9.5
1062:  BSET.B  2CD.5
1064:  CLR     800
1066:  CLR     802
1068:  CLR     804
106A:  CLR     806
106C:  CLR.B   81C
106E:  CLR     81E
1070:  CLR     820
1072:  SETM    32C
1074:  CLR     808
1076:  CLR     80A
1078:  CLR     80C
107A:  CLR     80E
107C:  CLR     810
107E:  CLR     812
1080:  CLR     814
1082:  CLR     816
1084:  CLR     818
1086:  CLR     81A
....................  
....................   disable_interrupts(GLOBAL); 
1088:  BCLR.B  81.7
108A:  MOV     #E0,W4
108C:  MOV     W4,42
108E:  BSET.B  81.7
....................   clear_interrupt( 
....................       INT_RDA); // recommend style coding to confirm everything clear before use 
1090:  REPEAT  #3
1092:  MOV     226,W0
1094:  BCLR.B  85.3
....................   enable_interrupts(INT_RDA); 
1096:  BSET.B  95.3
.................... 	Init_Interrupts(); 
1098:  CALL    F62
.................... 	setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); 
109C:  CLR     112
109E:  MOV     #C8,W4
10A0:  MOV     W4,10E
10A2:  MOV     #8010,W4
10A4:  MOV     W4,112
.................... 	setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
10A6:  MOV     #E,W4
10A8:  MOV     W4,190
.................... 	set_pwm_duty(3,0); 
10AA:  CLR     18C
....................   enable_interrupts(GLOBAL); 
10AC:  BCLR.B  81.7
10AE:  CLR     42
10B0:  BSET.B  81.7
....................  
.................... 	printf("System Ready!\r\n"); 
10B2:  MOV     #0,W1
10B4:  MOV     W1,W0
10B6:  CLR.B   1
10B8:  CALL    E0E
10BC:  INC     W1,W1
10BE:  MOV     W1,[W15++]
10C0:  PUSH    42
10C2:  BCLR.B  81.7
10C4:  SETM.B  42
10C6:  BSET.B  81.7
10C8:  MOV.B   W0L,82E
10CA:  CALL    E64
10CE:  BCLR.B  81.7
10D0:  POP     42
10D2:  BSET.B  81.7
10D4:  MOV     [--W15],W1
10D6:  MOV     #E,W0
10D8:  CPSGT   W1,W0
10DA:  BRA     10B4
....................  
....................   while (TRUE) { 
....................     if (getPackage >= 1) { 
10DC:  MOV     81E,W4
10DE:  CP      W4,#1
10E0:  BRA     LT,116C
....................       int received = sumCheck(); 
10E2:  CALL    F68
10E6:  MOV     W0,822
....................       if (!received) { 
10E8:  CP0     822
10EA:  BRA     NZ,111A
.................... 				printf("resend"); 
10EC:  MOV     #0,W1
10EE:  MOV     W1,W0
10F0:  CLR.B   1
10F2:  CALL    E2A
10F6:  INC     W1,W1
10F8:  MOV     W1,[W15++]
10FA:  PUSH    42
10FC:  BCLR.B  81.7
10FE:  SETM.B  42
1100:  BSET.B  81.7
1102:  MOV.B   W0L,82E
1104:  CALL    E64
1108:  BCLR.B  81.7
110A:  POP     42
110C:  BSET.B  81.7
110E:  MOV     [--W15],W1
1110:  MOV     #5,W0
1112:  CPSGT   W1,W0
1114:  BRA     10EE
....................         getPackage = 0; 
1116:  CLR     81E
....................       } 
1118:  BRA     116C
.................... 			else{ 
.................... 				switch (array[2]) { 
111A:  MOV.B   80A,W0L
111C:  CLR.B   1
111E:  XOR     #0,W0
1120:  BRA     Z,112C
1122:  XOR     #1,W0
1124:  BRA     Z,1132
1126:  XOR     #3,W0
1128:  BRA     Z,1138
112A:  BRA     113E
.................... 					case 0: 
.................... 						setHome(); 
112C:  CALL    F9E
.................... 						break; 
1130:  BRA     116C
.................... 					case 1: 
.................... 						setPosXY(); 
1132:  CALL    FCC
.................... 						break; 
1136:  BRA     116C
.................... 					case 2: 
.................... 						setPosZ(); 
1138:  CALL    FFA
.................... 						break; 
113C:  BRA     116C
.................... 					default: 
.................... 						printf("resend"); 
113E:  MOV     #0,W1
1140:  MOV     W1,W0
1142:  CLR.B   1
1144:  CALL    E2A
1148:  INC     W1,W1
114A:  MOV     W1,[W15++]
114C:  PUSH    42
114E:  BCLR.B  81.7
1150:  SETM.B  42
1152:  BSET.B  81.7
1154:  MOV.B   W0L,82E
1156:  CALL    E64
115A:  BCLR.B  81.7
115C:  POP     42
115E:  BSET.B  81.7
1160:  MOV     [--W15],W1
1162:  MOV     #5,W0
1164:  CPSGT   W1,W0
1166:  BRA     1140
.................... 						getPackage = 0; 
1168:  CLR     81E
.................... 						break; 
116A:  BRA     116C
.................... 				} 
.................... 			} 
....................       // float test; 
....................       // memcpy(&test, array, sizeof(test)); 
....................       // printf("\nresult = %s, %s\n", print_float(test), print_float(test)); 
....................     } 
116C:  BRA     10DC
....................   } 
.................... } 
116E:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
