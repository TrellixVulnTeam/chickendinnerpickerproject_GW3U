CCS PCD C Compiler, Version 5.015, 5967               17-Nov-18 00:08

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\SWT\serialcom.lst

               ROM used:   4572 bytes (14%)
                           Largest free fragment is 26144
               RAM used:   402 (5%) at main() level
                           506 (6%) worst case
               Stack size: 128

*
0C00:  GOTO    1B4C
*
0C24:  GOTO    EA0
*
0C50:  GOTO    FA4
*
0C74:  GOTO    ED2
*
0C98:  GOTO    F04
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    64,6F,00
0E0A:  DATA    6E,65,00
0E0C:  DATA    00,00,00
0E0E:  CLR     32
0E10:  MOV     #E1A,W3
0E12:  ADD     W3,W0,W0
0E14:  TBLRDL.B[W0],W0L
0E16:  CLR.B   1
0E18:  RETURN  
0E1A:  DATA    72,5F,00
0E1C:  DATA    61,20,00
0E1E:  DATA    3D,20,00
0E20:  DATA    25,64,00
0E22:  DATA    00,00,00
0E24:  CLR     32
0E26:  MOV     #E30,W3
0E28:  ADD     W3,W0,W0
0E2A:  TBLRDL.B[W0],W0L
0E2C:  CLR.B   1
0E2E:  RETURN  
0E30:  DATA    72,5F,00
0E32:  DATA    62,20,00
0E34:  DATA    3D,20,00
0E36:  DATA    25,64,00
0E38:  DATA    00,00,00
0E3A:  CLR     32
0E3C:  MOV     #E46,W3
0E3E:  ADD     W3,W0,W0
0E40:  TBLRDL.B[W0],W0L
0E42:  CLR.B   1
0E44:  RETURN  
0E46:  DATA    70,6F,00
0E48:  DATA    73,69,00
0E4A:  DATA    74,69,00
0E4C:  DATA    6F,6E,00
0E4E:  DATA    20,3D,00
0E50:  DATA    20,25,00
0E52:  DATA    64,2C,00
0E54:  DATA    20,25,00
0E56:  DATA    64,0A,00
0E58:  DATA    00,00,00
0E5A:  CLR     32
0E5C:  MOV     #E66,W3
0E5E:  ADD     W3,W0,W0
0E60:  TBLRDL.B[W0],W0L
0E62:  CLR.B   1
0E64:  RETURN  
0E66:  DATA    72,5F,00
0E68:  DATA    7A,20,00
0E6A:  DATA    3D,20,00
0E6C:  DATA    25,64,00
0E6E:  DATA    00,00,00
0E70:  CLR     32
0E72:  MOV     #E7C,W3
0E74:  ADD     W3,W0,W0
0E76:  TBLRDL.B[W0],W0L
0E78:  CLR.B   1
0E7A:  RETURN  
0E7C:  DATA    70,6F,00
0E7E:  DATA    73,69,00
0E80:  DATA    74,69,00
0E82:  DATA    6F,6E,00
0E84:  DATA    20,3D,00
0E86:  DATA    20,25,00
0E88:  DATA    64,0A,00
0E8A:  DATA    00,00,00
0E8C:  CLR     32
0E8E:  MOV     #E98,W3
0E90:  ADD     W3,W0,W0
0E92:  TBLRDL.B[W0],W0L
0E94:  CLR.B   1
0E96:  RETURN  
0E98:  DATA    72,65,00
0E9A:  DATA    73,65,00
0E9C:  DATA    6E,64,00
0E9E:  DATA    00,00,00
*
1260:  MOV     W5,[W15++]
1262:  MOV     #C,W5
1264:  REPEAT  #3
1266:  MOV     [W5++],[W15++]
1268:  BTSS    W0.F
126A:  BRA     1284
126C:  NEG     W0,W0
126E:  BSET    W4.8
1270:  BTSS    W4.F
1272:  BRA     1284
1274:  MOV     W0,[W15++]
1276:  MOV     #2D,W0
1278:  BTSC.B  223.1
127A:  BRA     1278
127C:  MOV     W0,224
127E:  MOV     [--W15],W0
1280:  BCLR    W4.8
1282:  DEC.B   0008
1284:  CLR     W5
1286:  MOV     W0,W7
1288:  MOV     W4,W9
128A:  BCLR    W4.F
128C:  CP0.B   W4L
128E:  BRA     NZ,129C
1290:  BTSC    W9.F
1292:  BRA     1298
1294:  MOV     #0,W5
1296:  BRA     12B6
1298:  MOV     #0,W5
129A:  BRA     12B6
129C:  SUB.B   W4L,#6,W5L
129E:  BRA     NC,12B4
12A0:  MOV     #30,W0
12A2:  BTSS    W9.F
12A4:  MOV     #20,W0
12A6:  BTSC.B  223.1
12A8:  BRA     12A6
12AA:  MOV     W0,224
12AC:  DEC     W5,W5
12AE:  BRA     NN,12A6
12B0:  MOV     #5,W5
12B2:  BRA     12B6
12B4:  MOV     W4,W5
12B6:  MOV     #6,W4
12B8:  BTSC    W5.8
12BA:  INC     W4,W4
12BC:  BSET    W5.E
12BE:  BTSC    W9.F
12C0:  BSET    W5.F
12C2:  MOV     #2710,W8
12C4:  REPEAT  #11
12C6:  DIV.U   W7,W8
12C8:  CALL    130C
12CC:  MOV     W1,W7
12CE:  MOV     #3E8,W8
12D0:  REPEAT  #11
12D2:  DIV.U   W7,W8
12D4:  CALL    130C
12D8:  MOV     W1,W7
12DA:  MOV     #64,W8
12DC:  REPEAT  #11
12DE:  DIV.U   W7,W8
12E0:  CALL    130C
12E4:  MOV     W1,W7
12E6:  MOV     #A,W8
12E8:  REPEAT  #11
12EA:  DIV.U   W7,W8
12EC:  CALL    130C
12F0:  BTSS    W9.8
12F2:  BRA     12FE
12F4:  MOV     #2D,W0
12F6:  BTSC.B  223.1
12F8:  BRA     12F6
12FA:  MOV     W0,224
12FC:  BCLR    W9.8
12FE:  MOV     #30,W0
1300:  ADD.B   W1L,W0L,W0L
1302:  MOV     W0,2A
1304:  BTSC.B  223.1
1306:  BRA     1304
1308:  MOV     W0,224
130A:  BRA     134C
130C:  MOV     #30,W6
130E:  CP0     W0
1310:  BRA     NZ,132E
1312:  BTSS    W5.E
1314:  BRA     1342
1316:  DEC     W4,W4
1318:  CP.B    W4L,W5L
131A:  BRA     Z,1320
131C:  BTSC.B  42.0
131E:  RETURN  
1320:  CP0     W0
1322:  BRA     NZ,132E
1324:  BTSS    W5.E
1326:  BRA     1342
1328:  BTSS    W5.F
132A:  MOV     #20,W6
132C:  BRA     1342
132E:  BCLR    W5.E
1330:  BTSS    W9.8
1332:  BRA     1342
1334:  MOV     W0,W10
1336:  MOV     #2D,W0
1338:  BTSC.B  223.1
133A:  BRA     1338
133C:  MOV     W0,224
133E:  BCLR    W9.8
1340:  MOV     W10,W0
1342:  ADD.B   W6L,W0L,W0L
1344:  BTSC.B  223.1
1346:  BRA     1344
1348:  MOV     W0,224
134A:  RETURN  
134C:  MOV     #12,W5
134E:  REPEAT  #3
1350:  MOV     [--W15],[W5--]
1352:  MOV     [--W15],W5
1354:  RETURN  
1356:  MOV     W5,[W15++]
1358:  MOV     W6,[W15++]
135A:  MOV     W0,W4
135C:  MOV     W1,W5
135E:  CLR     W0
1360:  CLR     W1
1362:  BCLR    W6.0
1364:  BTSS    W5.F
1366:  BRA     1374
1368:  BSET    W6.0
136A:  NEG     W4,W4
136C:  BRA     Z,1372
136E:  COM     W5,W5
1370:  BRA     1374
1372:  NEG     W5,W5
1374:  IOR      W4,  W5,W3
1376:  BRA     Z,139E
1378:  CLR     W2
137A:  MOV     #B6,W1
137C:  BTSC    W2.7
137E:  BRA     138E
1380:  BCLR.B  42.0
1382:  RLC     W4,W4
1384:  RLC     W5,W5
1386:  RLC     W0,W0
1388:  RLC     W2,W2
138A:  DEC     W1,W1
138C:  BRA     NZ,137C
138E:  SWAP    W1
1390:  BCLR.B  42.0
1392:  RRC     W1,W1
1394:  BCLR    W1.F
1396:  BCLR    W2.7
1398:  XOR.B   W2L,W1L,W1L
139A:  BTSC    W6.0
139C:  BSET    W1.F
139E:  MOV     [--W15],W6
13A0:  MOV     [--W15],W5
13A2:  RETURN  
13A4:  MOV     W5,[W15++]
13A6:  MOV     #C,W5
13A8:  REPEAT  #4
13AA:  MOV     [W5++],[W15++]
13AC:  MOV     W0,W4
13AE:  MOV     W1,W5
13B0:  MOV     W3,W7
13B2:  MOV     W2,W6
13B4:  BCLR.B  42.0
13B6:  BCLR.B  42.1
13B8:  RLC     W1,W1
13BA:  SWAP    W1
13BC:  AND     #FF,W1
13BE:  CP0     W1
13C0:  BRA     Z,1458
13C2:  BCLR.B  42.0
13C4:  BCLR.B  42.1
13C6:  RLC     W3,W3
13C8:  SWAP    W3
13CA:  AND     #FF,W3
13CC:  CP0     W3
13CE:  BRA     Z,1458
13D0:  ZE      W0,W0
13D2:  ADD.B   W3L,W1L,W0L
13D4:  BRA     C,13DE
13D6:  SUB     #7F,W0
13D8:  BRA     Z,1458
13DA:  BRA     NC,1458
13DC:  BRA     13E2
13DE:  ADD.B   #81,W0L
13E0:  BRA     C,1458
13E2:  XOR     W5,W7,W10
13E4:  BCLR.B  42.0
13E6:  BCLR.B  42.1
13E8:  AND     #FF,W5
13EA:  BSET    W5.7
13EC:  BCLR.B  42.0
13EE:  AND     #FF,W7
13F0:  BSET    W7.7
13F2:  MUL.UU  W4,W6,W2
13F4:  MUL.UU  W5,W6,W8
13F6:  ADDC    W8,W3,W3
13F8:  MOV     W9,W1
13FA:  BTSC.B  42.0
13FC:  INC     W1,W1
13FE:  BCLR.B  42.0
1400:  MUL.UU  W7,W4,W8
1402:  ADDC    W8,W3,W3
1404:  ADDC    W9,W1,W1
1406:  MUL.UU  W5,W7,W8
1408:  ADDC    W8,W1,W1
140A:  INC     W0,W0
140C:  CP0     W1
140E:  BTSC.B  42.1
1410:  BRA     1414
1412:  BRA     141A
1414:  CP0     W3
1416:  BTSC.B  42.1
1418:  BRA     1424
141A:  BTSC    W1.F
141C:  BRA     1424
141E:  RLC     W3,W3
1420:  RLC     W1,W1
1422:  DEC     W0,W0
1424:  MOV     W1,W2
1426:  BCLR.B  42.0
1428:  BTSS    W3.7
142A:  BRA     143E
142C:  MOV     #FF00,W7
142E:  AND     W3,W7,W3
1430:  ADD     #100,W3
1432:  ADDC    W2,#0,W2
1434:  CP0     W2
1436:  BRA     NZ,143E
1438:  CP0     W3
143A:  BRA     NZ,143E
143C:  INC     W0,W0
143E:  SWAP    W0
1440:  BCLR.B  42.0
1442:  BCLR.B  42.1
1444:  RRC     W0,W1
1446:  BTSC    W10.F
1448:  BSET    W1.F
144A:  BCLR    W2.F
144C:  SWAP    W2
144E:  XOR.B   W2L,W1L,W1L
1450:  SWAP    W3
1452:  MOV.B   W3L,W2L
1454:  MOV     W2,W0
1456:  BRA     145E
1458:  MOV     #0,W0
145A:  MOV     #0,W1
145C:  BRA     145E
145E:  MOV     #14,W5
1460:  REPEAT  #4
1462:  MOV     [--W15],[W5--]
1464:  MOV     [--W15],W5
1466:  RETURN  
1468:  MOV     W5,[W15++]
146A:  MOV     #C,W5
146C:  REPEAT  #3
146E:  MOV     [W5++],[W15++]
1470:  CLR     W9
1472:  MOV     #8000,W8
1474:  BTSC.B  43.0
1476:  XOR     W8,W3,W3
1478:  CP0     W0
147A:  BRA     NZ,1482
147C:  MOV     #7FFF,W10
147E:  AND     W1,W10,W10
1480:  BTSS.B  42.1
1482:  MOV     W1,W10
1484:  XOR     W3,W10,W11
1486:  MOV     W1,W6
1488:  MOV     W3,W7
148A:  MOV     W3,W12
148C:  BCLR.B  42.1
148E:  BCLR.B  42.0
1490:  RLC     W6,W6
1492:  SWAP    W6
1494:  AND     #FF,W6
1496:  CP0     W6
1498:  BRA     Z,15DC
149A:  BCLR.B  42.1
149C:  BCLR.B  42.0
149E:  RLC     W7,W7
14A0:  SWAP    W7
14A2:  AND     #FF,W7
14A4:  CP0     W7
14A6:  BRA     Z,15E6
14A8:  BCLR.B  42.1
14AA:  BCLR.B  42.0
14AC:  CP      W7,W6
14AE:  BRA     Z,15E8
14B0:  BRA     N,15F8
14B2:  BCLR    W9.0
14B4:  BSET    W9.1
14B6:  SUB     W7,W6,W8
14B8:  MOV     W7,W6
14BA:  AND     #FF,W1
14BC:  BSET    W1.7
14BE:  AND     #FF,W3
14C0:  BSET    W3.7
14C2:  MOV     #28,W7
14C4:  CP      W7,W8
14C6:  BRA     N,14EA
14C8:  BCLR.B  42.1
14CA:  BCLR.B  42.0
14CC:  RRC     W1,W1
14CE:  RRC     W0,W0
14D0:  DEC     W8,W8
14D2:  BRA     NZ,14C8
14D4:  BRA     14F0
14D6:  MOV     #28,W7
14D8:  CP      W7,W8
14DA:  BRA     N,14EE
14DC:  BCLR.B  42.1
14DE:  BCLR.B  42.0
14E0:  RRC     W3,W3
14E2:  RRC     W2,W2
14E4:  DEC     W8,W8
14E6:  BRA     NZ,14DC
14E8:  BRA     1508
14EA:  MOV     W2,W0
14EC:  MOV     W3,W1
14EE:  BRA     1576
14F0:  BTSS    W11.F
14F2:  BRA     1516
14F4:  BTSC    W9.4
14F6:  MOV     W12,W11
14F8:  NEG     W0,W0
14FA:  BRA     Z,1500
14FC:  COM.B   W1L,W1L
14FE:  BRA     1502
1500:  NEG     W1,W1
1502:  BTSC    W9.4
1504:  BRA     155C
1506:  BRA     1516
1508:  BTSS    W11.F
150A:  BRA     1516
150C:  NEG     W2,W2
150E:  BRA     Z,1514
1510:  COM.B   W3L,W3L
1512:  BRA     1516
1514:  NEG     W3,W3
1516:  AND     #FF,W5
1518:  BCLR.B  42.1
151A:  BCLR.B  42.0
151C:  ADD     W0,W2,W0
151E:  ADDC.B  W1L,W3L,W1L
1520:  BTSC.B  42.0
1522:  BSET    W9.3
1524:  BTSC    W9.0
1526:  BRA     153A
1528:  BTSC    W9.1
152A:  BRA     152E
152C:  BRA     1544
152E:  BTSC    W11.F
1530:  BRA     155C
1532:  BTSC    W9.3
1534:  BRA     1588
1536:  BSET    W9.6
1538:  BRA     1576
153A:  BTSC    W11.F
153C:  BRA     155C
153E:  BTSC    W9.3
1540:  BRA     1588
1542:  BRA     1576
1544:  BCLR    W9.2
1546:  BTSC    W11.F
1548:  BRA     1552
154A:  MOV     W10,W11
154C:  BTSC    W9.3
154E:  BRA     1588
1550:  BRA     15BE
1552:  BSET    W9.4
1554:  XOR.B   #80,W1L
1556:  BTSC    W1.7
1558:  BRA     14F4
155A:  MOV     W10,W11
155C:  AND     #FF,W1
155E:  IOR      W0,  W1,W7
1560:  BRA     Z,1576
1562:  BTSC    W1.7
1564:  BRA     1576
1566:  BCLR.B  42.1
1568:  BCLR.B  42.0
156A:  RLC     W0,W0
156C:  RLC     W1,W1
156E:  DEC     W6,W6
1570:  BTSC.B  42.1
1572:  BRA     15D6
1574:  BRA     1562
1576:  BTSC    W9.0
1578:  MOV     W10,W11
157A:  BTSC    W9.1
157C:  MOV     W12,W11
157E:  BTSS    W9.5
1580:  BRA     15B6
1582:  BTSC    W10.F
1584:  BSET    W0.8
1586:  BRA     15BE
1588:  BSET.B  42.0
158A:  RRC.B   W1L,W1L
158C:  RRC     W0,W0
158E:  BTSC.B  42.0
1590:  BSET    W9.5
1592:  INC     W6,W6
1594:  BRA     Z,15D6
1596:  BTSS    W9.5
1598:  BRA     15AA
159A:  INC     W0,W0
159C:  BRA     NZ,15AA
159E:  INC.B   W1L,W1L
15A0:  BRA     NZ,15AA
15A2:  RRC.B   W1L,W1L
15A4:  RRC     W0,W0
15A6:  INC     W6,W6
15A8:  BRA     Z,15D6
15AA:  BTSC    W9.0
15AC:  MOV     W10,W11
15AE:  BTSC    W9.1
15B0:  MOV     W12,W11
15B2:  BTSC.B  42.1
15B4:  BRA     15D6
15B6:  BTSC    W9.6
15B8:  MOV     W10,W11
15BA:  BTSC    W9.7
15BC:  MOV     W12,W11
15BE:  IOR      W0,  W1,W2
15C0:  BRA     Z,1608
15C2:  BCLR    W1.7
15C4:  SWAP    W6
15C6:  BCLR.B  42.1
15C8:  BCLR.B  42.0
15CA:  RRC     W6,W6
15CC:  XOR     W6,W1,W1
15CE:  BSET    W1.F
15D0:  BTSS    W11.F
15D2:  BCLR    W1.F
15D4:  BRA     1608
15D6:  MOV     #0,W0
15D8:  MOV     #0,W1
15DA:  BRA     1608
15DC:  BTSC    W10.F
15DE:  XOR     W8,W3,W3
15E0:  MOV     W2,W0
15E2:  MOV     W3,W1
15E4:  BRA     1608
15E6:  BRA     1608
15E8:  AND     #FF,W3
15EA:  BSET    W3.7
15EC:  AND     #FF,W1
15EE:  BSET    W1.7
15F0:  BTSC    W11.F
15F2:  BCLR    W3.7
15F4:  BSET    W9.2
15F6:  BRA     1508
15F8:  SUB     W6,W7,W8
15FA:  AND     #FF,W1
15FC:  BSET    W1.7
15FE:  AND     #FF,W3
1600:  BSET    W3.7
1602:  BCLR    W9.1
1604:  BSET    W9.0
1606:  BRA     14D6
1608:  MOV     #12,W5
160A:  REPEAT  #3
160C:  MOV     [--W15],[W5--]
160E:  MOV     [--W15],W5
1610:  RETURN  
1612:  MOV     W0,W2
1614:  MOV     W1,W3
1616:  MOV.B   W1L,W0L
1618:  SWAP    W0
161A:  BSET    W0.F
161C:  RLC     W1,W1
161E:  SWAP    W1
1620:  ZE      W1,W1
1622:  MOV     #8E,W4
1624:  SUB.B   W4L,W1L,W1L
1626:  BRA     Z,1634
1628:  CP0     W0
162A:  BRA     Z,1634
162C:  BCLR.B  42.0
162E:  RRC     W0,W0
1630:  DEC     W1,W1
1632:  BRA     NZ,1628
1634:  BTSS    W3.F
1636:  BRA     163C
1638:  NEG     W0,W0
163A:  BRA     163C
163C:  RETURN  
*
16DE:  MOV     W6,[W15++]
16E0:  MOV     W7,[W15++]
16E2:  MOV     W8,[W15++]
16E4:  MOV     W9,[W15++]
16E6:  CLR     W4
16E8:  CLR     W5
16EA:  CLR     W6
16EC:  CLR     W7
16EE:  XOR     W2,W3,W8
16F0:  BRA     Z,1714
16F2:  MOV     #20,W8
16F4:  BCLR.B  42.0
16F6:  RLC     W0,W0
16F8:  RLC     W1,W1
16FA:  RLC     W4,W4
16FC:  RLC     W5,W5
16FE:  CP      W5,W3
1700:  BRA     NZ,1704
1702:  CPB     W4,W2
1704:  BRA     NC,170C
1706:  SUB     W4,W2,W4
1708:  SUBB    W5,W3,W5
170A:  BSET.B  42.0
170C:  RLC     W6,W6
170E:  RLC     W7,W7
1710:  DEC     W8,W8
1712:  BRA     NZ,16F4
1714:  MOV     W7,W1
1716:  MOV     W6,W0
1718:  MOV     [--W15],W9
171A:  MOV     [--W15],W8
171C:  MOV     [--W15],W7
171E:  MOV     [--W15],W6
1720:  RETURN  
1722:  MOV     W5,[W15++]
1724:  MOV     #C,W5
1726:  REPEAT  #7
1728:  MOV     [W5++],[W15++]
172A:  BTSS    W1.F
172C:  BRA     173C
172E:  NEG     W0,W0
1730:  BRA     Z,1734
1732:  BRA     NZ,1738
1734:  NEG     W1,W1
1736:  BRA     173A
1738:  COM     W1,W1
173A:  BSET    W4.8
173C:  CLR     W5
173E:  MOV     W0,W6
1740:  MOV     W1,W7
1742:  MOV     W4,W12
1744:  BCLR    W4.F
1746:  CP0.B   W4L
1748:  BRA     NZ,174C
174A:  BRA     177C
174C:  SUB.B   W4L,#B,W5L
174E:  BRA     NC,177C
1750:  SUB.B   W4L,W5L,W4L
1752:  BTSS    W12.F
1754:  BRA     176C
1756:  BTSS    W4.8
1758:  BRA     1768
175A:  MOV     #2D,W0
175C:  BTSC.B  223.1
175E:  BRA     175C
1760:  MOV     W0,224
1762:  BCLR    W4.8
1764:  DEC     W5,W5
1766:  BRA     N,177C
1768:  MOV     #30,W0
176A:  BRA     176E
176C:  MOV     #20,W0
176E:  BTSC.B  223.1
1770:  BRA     176E
1772:  MOV     W0,224
1774:  DEC     W5,W5
1776:  BRA     NN,176E
1778:  BTSC    W4.8
177A:  DEC.B   W4L,W4L
177C:  MOV     #E,W8
177E:  MOV     #0,W9
1780:  LNK     #10
1782:  MOV     W12,[W14+W8]
1784:  DEC2    W8,W8
1786:  BRA     NN,1782
1788:  MOV     W4,W5
178A:  MOV     #A,W4
178C:  BTSC    W5.8
178E:  INC     W4,W4
1790:  BSET    W5.E
1792:  BTSC    W12.F
1794:  BSET    W5.F
1796:  CP0.B   W5L
1798:  BRA     Z,179C
179A:  DEC.B   W5L,W5L
179C:  MOV     W4,[W14]
179E:  MOV     W5,[W14+#2]
17A0:  MOV     W6,W0
17A2:  MOV     W7,W1
17A4:  MOV     #CA00,W2
17A6:  MOV     #3B9A,W3
17A8:  MOV     #2710,W8
17AA:  BCLR    W13.F
17AC:  BCLR.B  43.0
17AE:  CALL    16DE
17B2:  BTG     W13.F
17B4:  BTSC    W13.F
17B6:  BRA     17C6
17B8:  MOV     W0,[W14+#8]
17BA:  MOV     W1,[W14+#A]
17BC:  MOV     W0,W2
17BE:  MOV     W1,W3
17C0:  MOV     [W14+#4],W0
17C2:  MOV     [W14+#6],W1
17C4:  BRA     17AC
17C6:  MOV     W2,[W14+#8]
17C8:  MOV     W3,[W14+#A]
17CA:  MOV     W4,[W14+#4]
17CC:  MOV     W5,[W14+#6]
17CE:  MOV     [W14],W4
17D0:  MOV     [W14+#2],W5
17D2:  MOV     #30,W6
17D4:  CP0     W0
17D6:  BRA     NZ,17FA
17D8:  BTSS    W5.E
17DA:  BRA     17FE
17DC:  DEC     W4,W4
17DE:  MOV     W4,[W14]
17E0:  CP0     W4
17E2:  BRA     Z,17FE
17E4:  CP.B    W4L,W5L
17E6:  BRA     Z,17EC
17E8:  BTSC.B  42.0
17EA:  BRA     181C
17EC:  BTSS    W5.F
17EE:  BRA     17F6
17F0:  BTSS    W5.8
17F2:  BRA     1814
17F4:  BRA     1804
17F6:  MOV     #20,W6
17F8:  BRA     1814
17FA:  BCLR    W5.E
17FC:  MOV     W5,[W14+#2]
17FE:  MOV     [W14+#2],W5
1800:  BTSS    W5.8
1802:  BRA     1814
1804:  BCLR    W5.8
1806:  MOV     W5,[W14+#2]
1808:  MOV     W0,W10
180A:  MOV     #2D,W0
180C:  BTSC.B  223.1
180E:  BRA     180C
1810:  MOV     W0,224
1812:  MOV     W10,W0
1814:  ADD.B   W6L,W0L,W0L
1816:  BTSC.B  223.1
1818:  BRA     1816
181A:  MOV     W0,224
181C:  MOV     [W14+#8],W0
181E:  MOV     [W14+#A],W1
1820:  MOV     #A,W2
1822:  CLR     W3
1824:  CP      W0,#1
1826:  BRA     Z,182A
1828:  BRA     17AC
182A:  ULNK    
182C:  MOV     #1A,W5
182E:  REPEAT  #7
1830:  MOV     [--W15],[W5--]
1832:  MOV     [--W15],W5
1834:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
*
0FE4:  CP0     W0
0FE6:  BTSC.B  42.1
0FE8:  BRA     FF2
0FEA:  REPEAT  #3E7B
0FEC:  NOP     
0FEE:  DEC     W0,W0
0FF0:  BRA     NZ,FEA
0FF2:  RETURN  
....................  
.................... #PIN_SELECT U1RX = PIN_B12 // PIN_B14 // 
.................... #PIN_SELECT U1TX = PIN_B13 // PIN_B15 // 
.................... #use rs232(UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... #define DEVICE_ID 2 
.................... #define limitSw_x PIN_B8 // 
.................... #define limitSw_y PIN_A2 // 
.................... #define limitSw_z PIN_A4 // 
.................... #define Motor_Bp PIN_B10 // Pin output is connected to DXI0  (PWM) 
.................... #define Motor_Br PIN_B2  // Pin output is connected to DX02 
.................... #define Motor_Bl PIN_B3  // Pin output is connected to DX03 
.................... #define Motor_Ap PIN_B4  // Pin output is connected to DX03 
.................... #define Motor_Ar PIN_A0  // Pin output is connected to DX03 
.................... #define Motor_Al PIN_A1  // Pin output is connected to DX03 
.................... #define Motor_Zp PIN_B14 // Pin output is connected to DX03 
.................... #define Motor_Zr PIN_B15 // Pin output is connected to DX03 
.................... #define Motor_Zl PIN_B9  // Pin output is connected to DX03 
.................... #define Encode_A PIN_B7  // Pin output is connected to DX03 
.................... #define Encode_B PIN_B6  // Pin output is connected to DX03 
.................... #define Encode_Z PIN_B5  // Pin output is connected to DX03 
.................... #define servo_r PIN_B0   // servo 270 
.................... #define servo_l PIN_B1   // servo 180 
....................  
.................... #PIN_SELECT OC1 = Motor_Bp 
.................... #PIN_SELECT OC2 = Motor_Ap 
.................... #PIN_SELECT OC3 = Motor_Zp 
.................... #PIN_SELECT OC4 = servo_r 
.................... #PIN_SELECT OC5 = servo_l 
.................... #PIN_SELECT INT1 = Encode_B 
.................... #PIN_SELECT INT2 = Encode_Z 
....................  
.................... // long count = 0; 
.................... long count_a = 0; 
.................... long count_b = 0; 
.................... long count_z = 0; 
.................... // long posi = 0; 
.................... int u_a; 
.................... int u_b; 
.................... int u_z; 
....................  
.................... int s_a = 0; 
.................... int s_b = 0; 
.................... int s_z = 0; 
.................... int p_a = 0; 
.................... int p_b = 0; 
.................... int p_z = 0; 
....................  
.................... int tolerance = 5; 
....................  
.................... float K_Pz = 0.6; 
.................... float K_Iz = 0.01; 
.................... float K_Dz = 0.5; 
.................... float K_Pa = 0.6; 
.................... float K_Ia = 0.01; 
.................... float K_Da = 0.5; 
.................... float K_Pb = 0.6; 
.................... float K_Ib = 0.01; 
.................... float K_Db = 0.5; 
....................  
.................... int direction_z = 0; 
.................... int direction_a = 0; 
.................... int direction_b = 0; 
.................... char array[20] = {}; 
.................... char SM_id = 0; 
.................... int getPackage = 0; 
.................... char command_ID; 
.................... // char* print_float(float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     char stringFloat[20]; 
.................... //     sprintf(stringFloat, "%d.%d", intDist, dotDist); 
.................... //     return stringFloat; 
.................... // } 
.................... // void print_float(char* stringResult, float data){ 
.................... //    long intDist = data / 1; 
.................... //     long dotDist = (((intDist>>31)*-2)+1) * ((data * 1000.0f) - (intDist * 
.................... //     1000)); 
.................... //     sprintf(stringResult, "%d.%d", intDist, dotDist); 
.................... // } 
....................  
.................... // Encoder Interrupts 
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0(void) { 
*
0EA0:  PUSH    42
0EA2:  PUSH    36
0EA4:  PUSH    32
0EA6:  MOV     W0,[W15++]
0EA8:  MOV     #2,W0
0EAA:  REPEAT  #C
0EAC:  MOV     [W0++],[W15++]
....................   if (direction_a == 0) { 
0EAE:  CP0     8F6
0EB0:  BRA     NZ,EBA
....................     count_a++; 
0EB2:  INC     08B0
0EB4:  BTSC.B  42.1
0EB6:  INC     08B2
....................   } else { 
0EB8:  BRA     EC0
....................     count_a--; 
0EBA:  DEC     08B0
0EBC:  BTSS.B  42.0
0EBE:  DEC     08B2
....................   } 
.................... } 
....................  
0EC0:  BCLR.B  84.0
0EC2:  MOV     #1A,W0
0EC4:  REPEAT  #C
0EC6:  MOV     [--W15],[W0--]
0EC8:  MOV     [--W15],W0
0ECA:  POP     32
0ECC:  POP     36
0ECE:  POP     42
0ED0:  RETFIE  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
0ED2:  PUSH    42
0ED4:  PUSH    36
0ED6:  PUSH    32
0ED8:  MOV     W0,[W15++]
0EDA:  MOV     #2,W0
0EDC:  REPEAT  #C
0EDE:  MOV     [W0++],[W15++]
....................   if (direction_b == 0) { 
0EE0:  CP0     8F8
0EE2:  BRA     NZ,EEC
....................     count_b++; 
0EE4:  INC     08B4
0EE6:  BTSC.B  42.1
0EE8:  INC     08B6
....................   } else { 
0EEA:  BRA     EF2
....................     count_b--; 
0EEC:  DEC     08B4
0EEE:  BTSS.B  42.0
0EF0:  DEC     08B6
....................   } 
.................... } 
....................  
0EF2:  BCLR.B  86.4
0EF4:  MOV     #1A,W0
0EF6:  REPEAT  #C
0EF8:  MOV     [--W15],[W0--]
0EFA:  MOV     [--W15],W0
0EFC:  POP     32
0EFE:  POP     36
0F00:  POP     42
0F02:  RETFIE  
.................... #INT_EXT2 
.................... void INT_EXT_INPUT2(void) { 
0F04:  PUSH    42
0F06:  PUSH    36
0F08:  PUSH    32
0F0A:  MOV     W0,[W15++]
0F0C:  MOV     #2,W0
0F0E:  REPEAT  #C
0F10:  MOV     [W0++],[W15++]
....................   if (direction_z == 0) { 
0F12:  CP0     8F4
0F14:  BRA     NZ,F1E
....................     count_z++; 
0F16:  INC     08B8
0F18:  BTSC.B  42.1
0F1A:  INC     08BA
....................   } else { 
0F1C:  BRA     F24
....................     count_z--; 
0F1E:  DEC     08B8
0F20:  BTSS.B  42.0
0F22:  DEC     08BA
....................   } 
0F24:  BCLR.B  87.5
0F26:  MOV     #1A,W0
0F28:  REPEAT  #C
0F2A:  MOV     [--W15],[W0--]
0F2C:  MOV     [--W15],W0
0F2E:  POP     32
0F30:  POP     36
0F32:  POP     42
0F34:  RETFIE  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT0); 
*
0FD6:  BSET.B  94.0
....................   ext_int_edge(0, L_TO_H); // Rising Edge 
0FD8:  BCLR.B  82.0
....................   enable_interrupts(INT_EXT1); 
0FDA:  BSET.B  96.4
....................   ext_int_edge(1, L_TO_H); // Rising Edge 
0FDC:  BCLR.B  82.1
....................   enable_interrupts(INT_EXT2); 
0FDE:  BSET.B  97.5
....................   ext_int_edge(2, L_TO_H); // Rising Edge 
0FE0:  BCLR.B  82.2
0FE2:  RETURN  
.................... } 
....................  
.................... // 
....................  
.................... // Communication Routines 
....................  
.................... void SM_RxD(int c) { 
*
0F36:  MOV     W5,[W15++]
....................   if (getPackage == 0) { 
0F38:  CP0     910
0F3A:  BRA     NZ,FA0
....................     if (SM_id < 2) { 
0F3C:  MOV.B   90E,W0L
0F3E:  SE      W0,W0
0F40:  CP      W0,#2
0F42:  BRA     GE,F5E
....................       if (c == 255) { 
0F44:  MOV     978,W4
0F46:  XOR     #FF,W4
0F48:  BRA     NZ,F5A
....................         array[SM_id] = c; 
0F4A:  MOV.B   90E,W0L
0F4C:  SE      W0,W0
0F4E:  MOV     #8FA,W4
0F50:  ADD     W0,W4,W5
0F52:  MOV     978,W0
0F54:  MOV.B   W0L,[W5+#0]
....................         SM_id++; 
0F56:  INC.B   090E
....................       } else { 
0F58:  BRA     F5C
....................         SM_id = 0; 
0F5A:  CLR.B   90E
....................       } 
....................     } else if (SM_id == 2) { 
0F5C:  BRA     FA0
0F5E:  MOV.B   90E,W0L
0F60:  SE      W0,W0
0F62:  CP      W0,#2
0F64:  BRA     NZ,F7A
....................       array[SM_id] = c; 
0F66:  MOV.B   90E,W0L
0F68:  SE      W0,W0
0F6A:  MOV     #8FA,W4
0F6C:  ADD     W0,W4,W5
0F6E:  MOV     978,W0
0F70:  MOV.B   W0L,[W5+#0]
....................       command_ID = c; 
0F72:  MOV.B   978,W0L
0F74:  MOV.B   W0L,90F
....................       SM_id++; 
0F76:  INC.B   090E
....................     } else if (SM_id > 2) { 
0F78:  BRA     FA0
0F7A:  MOV.B   90E,W0L
0F7C:  SE      W0,W0
0F7E:  CP      W0,#2
0F80:  BRA     LE,FA0
....................       array[SM_id] = c; 
0F82:  MOV.B   90E,W0L
0F84:  SE      W0,W0
0F86:  MOV     #8FA,W4
0F88:  ADD     W0,W4,W5
0F8A:  MOV     978,W0
0F8C:  MOV.B   W0L,[W5+#0]
....................       if (SM_id >= 8) { 
0F8E:  MOV.B   90E,W0L
0F90:  SE      W0,W0
0F92:  CP      W0,#8
0F94:  BRA     LT,F9E
....................         getPackage = 1; 
0F96:  MOV     #1,W4
0F98:  MOV     W4,910
....................         SM_id = 0; 
0F9A:  CLR.B   90E
....................       } else { 
0F9C:  BRA     FA0
....................         SM_id++; 
0F9E:  INC.B   090E
....................       } 
....................     } 
....................   } 
0FA0:  MOV     [--W15],W5
0FA2:  RETURN  
.................... } 
....................  
.................... #INT_RDA 
.................... void UART1_Isr() { 
0FA4:  PUSH    42
0FA6:  PUSH    36
0FA8:  PUSH    32
0FAA:  MOV     W0,[W15++]
0FAC:  MOV     #2,W0
0FAE:  REPEAT  #C
0FB0:  MOV     [W0++],[W15++]
0FB2:  BTSS.B  222.0
0FB4:  BRA     FB2
0FB6:  MOV     226,W0
0FB8:  MOV.B   W0L,974
0FBA:  CLR.B   975
....................   int c = getc(); 
....................   // putc(c); 
....................   SM_RxD(c); 
0FBC:  PUSH    974
0FBE:  POP     978
0FC0:  CALL    F36
0FC4:  BCLR.B  85.3
0FC6:  MOV     #1A,W0
0FC8:  REPEAT  #C
0FCA:  MOV     [--W15],[W0--]
0FCC:  MOV     [--W15],W0
0FCE:  POP     32
0FD0:  POP     36
0FD2:  POP     42
0FD4:  RETFIE  
.................... } 
.................... // 
....................  
.................... // Motor 
.................... void Motor_z(int u) { 
*
107E:  MOV     W5,[W15++]
....................   if (u > 100) 
1080:  MOV     918,W4
1082:  MOV     #64,W3
1084:  CP      W3,W4
1086:  BRA     GE,108C
....................     u = 100; 
1088:  MOV     #64,W4
108A:  MOV     W4,918
....................   if (u < -100) 
108C:  MOV     918,W4
108E:  MOV     #FF9C,W3
1090:  CP      W3,W4
1092:  BRA     LE,1098
....................     u = -100; 
1094:  MOV     #FF9C,W4
1096:  MOV     W4,918
....................   if (u > 0) { 
1098:  MOV     918,W4
109A:  CP      W4,#0
109C:  BRA     LE,10B2
....................     output_bit(Motor_Zr, 0); 
109E:  BCLR.B  2CD.7
10A0:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
10A2:  BSET.B  2CD.1
10A4:  BCLR.B  2C9.1
....................     direction_z = 0; 
10A6:  CLR     8F4
....................     set_pwm_duty(3, (int)(2 * u)); 
10A8:  MOV     918,W4
10AA:  MUL.UU  W4,#2,W0
10AC:  MOV     W0,W5
10AE:  MOV     W5,18C
....................   } else if (u < 0) { 
10B0:  BRA     10E6
10B2:  MOV     918,W4
10B4:  CP      W4,#0
10B6:  BRA     GE,10D4
....................     output_bit(Motor_Zr, 1); 
10B8:  BSET.B  2CD.7
10BA:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 0); 
10BC:  BCLR.B  2CD.1
10BE:  BCLR.B  2C9.1
....................     direction_z = 1; 
10C0:  MOV     #1,W4
10C2:  MOV     W4,8F4
....................     set_pwm_duty(3, (int)(2 * -u)); 
10C4:  MOV     #0,W4
10C6:  MOV     918,W3
10C8:  SUB     W4,W3,W0
10CA:  MOV     W0,W4
10CC:  MUL.UU  W4,#2,W0
10CE:  MOV     W0,W5
10D0:  MOV     W5,18C
....................   } else { 
10D2:  BRA     10E6
....................     output_bit(Motor_Zr, 1); 
10D4:  BSET.B  2CD.7
10D6:  BCLR.B  2C9.7
....................     output_bit(Motor_Zl, 1); 
10D8:  BSET.B  2CD.1
10DA:  BCLR.B  2C9.1
....................     set_pwm_duty(3, (int)(100)); 
10DC:  MOV     #64,W4
10DE:  MOV     W4,18C
....................     delay_ms(100); 
10E0:  MOV     #64,W0
10E2:  CALL    FE4
....................   } 
10E6:  MOV     [--W15],W5
10E8:  RETURN  
.................... } 
....................  
.................... void Motor_a(int u) { 
10EA:  MOV     W5,[W15++]
....................   if (u > 100) 
10EC:  MOV     91E,W4
10EE:  MOV     #64,W3
10F0:  CP      W3,W4
10F2:  BRA     GE,10F8
....................     u = 100; 
10F4:  MOV     #64,W4
10F6:  MOV     W4,91E
....................   if (u < -100) 
10F8:  MOV     91E,W4
10FA:  MOV     #FF9C,W3
10FC:  CP      W3,W4
10FE:  BRA     LE,1104
....................     u = -100; 
1100:  MOV     #FF9C,W4
1102:  MOV     W4,91E
....................   if (u > 0) { 
1104:  MOV     91E,W4
1106:  CP      W4,#0
1108:  BRA     LE,111E
....................     output_bit(Motor_Ar, 1); 
110A:  BSET.B  2C4.0
110C:  BCLR.B  2C0.0
....................     output_bit(Motor_Al, 0); 
110E:  BCLR.B  2C4.1
1110:  BCLR.B  2C0.1
....................     direction_a = 0; 
1112:  CLR     8F6
....................     set_pwm_duty(2, (int)(2 * u)); 
1114:  MOV     91E,W4
1116:  MUL.UU  W4,#2,W0
1118:  MOV     W0,W5
111A:  MOV     W5,186
....................   } else if (u < 0) { 
111C:  BRA     1152
111E:  MOV     91E,W4
1120:  CP      W4,#0
1122:  BRA     GE,1140
....................     output_bit(Motor_Ar, 0); 
1124:  BCLR.B  2C4.0
1126:  BCLR.B  2C0.0
....................     output_bit(Motor_Al, 1); 
1128:  BSET.B  2C4.1
112A:  BCLR.B  2C0.1
....................     direction_a = 1; 
112C:  MOV     #1,W4
112E:  MOV     W4,8F6
....................     set_pwm_duty(2, (int)(2 * -u)); 
1130:  MOV     #0,W4
1132:  MOV     91E,W3
1134:  SUB     W4,W3,W0
1136:  MOV     W0,W4
1138:  MUL.UU  W4,#2,W0
113A:  MOV     W0,W5
113C:  MOV     W5,186
....................   } else { 
113E:  BRA     1152
....................     output_bit(Motor_Ar, 1); 
1140:  BSET.B  2C4.0
1142:  BCLR.B  2C0.0
....................     output_bit(Motor_Al, 1); 
1144:  BSET.B  2C4.1
1146:  BCLR.B  2C0.1
....................     set_pwm_duty(2, (int)(100)); 
1148:  MOV     #64,W4
114A:  MOV     W4,186
....................     delay_ms(100); 
114C:  MOV     #64,W0
114E:  CALL    FE4
....................   } 
1152:  MOV     [--W15],W5
1154:  RETURN  
.................... } 
....................  
.................... void Motor_b(int u) { 
1156:  MOV     W5,[W15++]
....................   if (u > 100) 
1158:  MOV     91E,W4
115A:  MOV     #64,W3
115C:  CP      W3,W4
115E:  BRA     GE,1164
....................     u = 100; 
1160:  MOV     #64,W4
1162:  MOV     W4,91E
....................   if (u < -100) 
1164:  MOV     91E,W4
1166:  MOV     #FF9C,W3
1168:  CP      W3,W4
116A:  BRA     LE,1170
....................     u = -100; 
116C:  MOV     #FF9C,W4
116E:  MOV     W4,91E
....................   if (u > 0) { 
1170:  MOV     91E,W4
1172:  CP      W4,#0
1174:  BRA     LE,118A
....................     output_bit(Motor_Br, 1); 
1176:  BSET.B  2CC.2
1178:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 0); 
117A:  BCLR.B  2CC.3
117C:  BCLR.B  2C8.3
....................     direction_b = 0; 
117E:  CLR     8F8
....................     set_pwm_duty(1, (int)(2 * u)); 
1180:  MOV     91E,W4
1182:  MUL.UU  W4,#2,W0
1184:  MOV     W0,W5
1186:  MOV     W5,180
....................   } else if (u < 0) { 
1188:  BRA     11BE
118A:  MOV     91E,W4
118C:  CP      W4,#0
118E:  BRA     GE,11AC
....................     output_bit(Motor_Br, 0); 
1190:  BCLR.B  2CC.2
1192:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
1194:  BSET.B  2CC.3
1196:  BCLR.B  2C8.3
....................     direction_b = 1; 
1198:  MOV     #1,W4
119A:  MOV     W4,8F8
....................     set_pwm_duty(1, (int)(2 * -u)); 
119C:  MOV     #0,W4
119E:  MOV     91E,W3
11A0:  SUB     W4,W3,W0
11A2:  MOV     W0,W4
11A4:  MUL.UU  W4,#2,W0
11A6:  MOV     W0,W5
11A8:  MOV     W5,180
....................   } else { 
11AA:  BRA     11BE
....................     output_bit(Motor_Br, 1); 
11AC:  BSET.B  2CC.2
11AE:  BCLR.B  2C8.2
....................     output_bit(Motor_Bl, 1); 
11B0:  BSET.B  2CC.3
11B2:  BCLR.B  2C8.3
....................     set_pwm_duty(1, (int)(100)); 
11B4:  MOV     #64,W4
11B6:  MOV     W4,180
....................     delay_ms(100); 
11B8:  MOV     #64,W0
11BA:  CALL    FE4
....................   } 
11BE:  MOV     [--W15],W5
11C0:  RETURN  
.................... } 
....................  
.................... void PID(long r, long count, long s, long p, int *u, float K_P, float K_I, 
....................          float K_D) { 
*
163E:  MOV     W5,[W15++]
1640:  MOV     W6,[W15++]
1642:  MOV     W7,[W15++]
1644:  MOV     91E,W4
1646:  MOV     922,W3
1648:  SUB     W4,W3,W0
164A:  MOV     W0,93C
164C:  MOV     920,W4
164E:  MOV     924,W3
1650:  SUBB    W4,W3,W0
1652:  MOV     W0,93E
....................   long e = r - count; 
....................   s = s + e; 
1654:  MOV     926,W0
1656:  ADD     93C,W0
1658:  MOV     W0,926
165A:  MOV     93E,W4
165C:  MOV     928,W3
165E:  ADDC    W3,W4,W0
1660:  MOV     W0,928
....................   *u = K_P * e + K_I * s + K_D * (e - p); 
1662:  MOV     92E,W5
1664:  MOV     93C,W0
1666:  MOV     93E,W1
1668:  CALL    1356
166C:  MOV     W0,W2
166E:  MOV     W1,W3
1670:  MOV     930,W0
1672:  MOV     932,W1
1674:  CALL    13A4
1678:  MOV.D   W0,W6
167A:  MOV     926,W0
167C:  MOV     928,W1
167E:  CALL    1356
1682:  MOV     W0,W2
1684:  MOV     W1,W3
1686:  MOV     934,W0
1688:  MOV     936,W1
168A:  CALL    13A4
168E:  BCLR.B  43.0
1690:  MOV     W0,W2
1692:  MOV     W1,W3
1694:  MOV     W6,W0
1696:  MOV     W7,W1
1698:  CALL    1468
169C:  MOV.D   W0,W6
169E:  MOV     93C,W4
16A0:  MOV     92A,W3
16A2:  SUB     W4,W3,W0
16A4:  MOV     93E,W4
16A6:  MOV     92C,W3
16A8:  SUBB    W4,W3,W1
16AA:  CALL    1356
16AE:  MOV     W0,W2
16B0:  MOV     W1,W3
16B2:  MOV     938,W0
16B4:  MOV     93A,W1
16B6:  CALL    13A4
16BA:  BCLR.B  43.0
16BC:  MOV     W0,W2
16BE:  MOV     W1,W3
16C0:  MOV     W6,W0
16C2:  MOV     W7,W1
16C4:  CALL    1468
16C8:  CALL    1612
16CC:  MOV     W0,[W5]
....................   p = e; 
16CE:  PUSH    93C
16D0:  POP     92A
16D2:  PUSH    93E
16D4:  POP     92C
16D6:  MOV     [--W15],W7
16D8:  MOV     [--W15],W6
16DA:  MOV     [--W15],W5
16DC:  RETURN  
.................... } 
.................... // 
....................  
.................... // Utilities 
.................... int mergeInts(int MSB, int LSB) { return 256 * MSB + LSB; } 
*
124C:  MOV     W5,[W15++]
124E:  MOV     #100,W4
1250:  MOV     924,W3
1252:  MUL.SS  W4,W3,W0
1254:  MOV     W0,W5
1256:  MOV     W5,W0
1258:  ADD     926,W0
125A:  MOV     W0,0
125C:  MOV     [--W15],W5
125E:  RETURN  
.................... // 
....................  
.................... // COMMANDS// 
.................... void setHome() { 
*
11C2:  MOV     W5,[W15++]
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
11C4:  MOV     #E,W4
11C6:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
11C8:  MOV     #E,W4
11CA:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
11CC:  MOV     #E,W4
11CE:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
11D0:  CLR     18C
....................   set_pwm_duty(2, 0); 
11D2:  CLR     186
....................   set_pwm_duty(1, 0); 
11D4:  CLR     180
....................   do { 
....................     Motor_z(-100); 
11D6:  MOV     #FF9C,W4
11D8:  MOV     W4,918
11DA:  CALL    107E
....................   } while (input(limitSw_z) == 1); 
11DE:  BSET.B  2C0.4
11E0:  BTSC.B  2C2.4
11E2:  BRA     11D6
....................   Motor_z(0); 
11E4:  CLR     918
11E6:  CALL    107E
....................   do { 
....................     Motor_a(-100); 
11EA:  MOV     #FF9C,W4
11EC:  MOV     W4,91E
11EE:  CALL    10EA
....................     Motor_b(-100); 
11F2:  MOV     #FF9C,W4
11F4:  MOV     W4,91E
11F6:  CALL    1156
....................   } while (input(limitSw_x) == 1); 
11FA:  BSET.B  2C9.0
11FC:  BTSC.B  2CB.0
11FE:  BRA     11EA
....................   Motor_a(0); 
1200:  CLR     91E
1202:  CALL    10EA
....................   Motor_b(0); 
1206:  CLR     91E
1208:  CALL    1156
....................   do { 
....................     Motor_a(100); 
120C:  MOV     #64,W4
120E:  MOV     W4,91E
1210:  CALL    10EA
....................     Motor_b(-100); 
1214:  MOV     #FF9C,W4
1216:  MOV     W4,91E
1218:  CALL    1156
....................   } while (input(limitSw_y) == 1); 
121C:  BSET.B  2C0.2
121E:  BTSC.B  2C2.2
1220:  BRA     120C
....................   Motor_a(0); 
1222:  CLR     91E
1224:  CALL    10EA
....................   Motor_b(0); 
1228:  CLR     91E
122A:  CALL    1156
....................   printf("done"); 
122E:  MOV     #0,W1
1230:  MOV     W1,W0
1232:  CLR.B   1
1234:  CALL    DFC
1238:  INC     W1,W1
123A:  BTSC.B  223.1
123C:  BRA     123A
123E:  MOV     W0,224
1240:  MOV     #3,W0
1242:  CPSGT   W1,W0
1244:  BRA     1230
....................   getPackage = 0; 
1246:  CLR     910
1248:  MOV     [--W15],W5
124A:  RETURN  
.................... } 
....................  
.................... void setPosAB() { 
*
1836:  MOV     W5,[W15++]
1838:  MOV     W6,[W15++]
183A:  MOV.B   8FD,W0L
183C:  MOV.B   W0L,W5L
183E:  SE      W5,W5
1840:  MOV.B   8FE,W0L
1842:  MOV.B   W0L,C
1844:  SE      W6,W6
1846:  MOV     W5,924
1848:  MOV     W6,926
184A:  CALL    124C
184E:  CLR     W1
1850:  BTSC    W0.F
1852:  SETM    W1
1854:  MOV     W0,914
1856:  MOV     W1,916
....................   long r_a = mergeInts((int)array[3], (int)array[4]); 
....................   printf("r_a = %d", (int)r_a); 
1858:  MOV     #0,W1
185A:  MOV     W1,W0
185C:  CLR.B   1
185E:  CALL    E0E
1862:  INC     W1,W1
1864:  BTSC.B  223.1
1866:  BRA     1864
1868:  MOV     W0,224
186A:  MOV     #5,W0
186C:  CPSGT   W1,W0
186E:  BRA     185A
1870:  MOV     914,W0
1872:  MOV     #0,W4
1874:  CALL    1260
....................   long r_b = mergeInts((int)array[5], (int)array[6]); 
1878:  MOV.B   8FF,W0L
187A:  MOV.B   W0L,W5L
187C:  SE      W5,W5
187E:  MOV.B   900,W0L
1880:  MOV.B   W0L,C
1882:  SE      W6,W6
1884:  MOV     W5,924
1886:  MOV     W6,926
1888:  CALL    124C
188C:  CLR     W1
188E:  BTSC    W0.F
1890:  SETM    W1
1892:  MOV     W0,918
1894:  MOV     W1,91A
....................   printf("r_b = %d", (int)r_b); 
1896:  MOV     #0,W1
1898:  MOV     W1,W0
189A:  CLR.B   1
189C:  CALL    E24
18A0:  INC     W1,W1
18A2:  BTSC.B  223.1
18A4:  BRA     18A2
18A6:  MOV     W0,224
18A8:  MOV     #5,W0
18AA:  CPSGT   W1,W0
18AC:  BRA     1898
18AE:  MOV     918,W0
18B0:  MOV     #0,W4
18B2:  CALL    1260
....................   while (abs(r_a - count_a) > tolerance && abs(r_b - count_b) > tolerance) { 
18B6:  MOV     914,W4
18B8:  MOV     8B0,W3
18BA:  SUB     W4,W3,W5
18BC:  MOV     916,W4
18BE:  MOV     8B2,W3
18C0:  SUBB    W4,W3,W6
18C2:  MOV     W5,W0
18C4:  MOV     W6,W1
18C6:  BTSS    W1.F
18C8:  BRA     18D2
18CA:  MOV     #0,W4
18CC:  SUB     W4,W5,W0
18CE:  MOV     #0,W4
18D0:  SUBB    W4,W6,W1
18D2:  MOV     W0,W5
18D4:  MOV     W1,W6
18D6:  MOV     8CE,W0
18D8:  CLR     W1
18DA:  BTSC    W0.F
18DC:  SETM    W1
18DE:  CP      W1,W6
18E0:  BRA     GT,19BC
18E2:  BRA     LT,18E8
18E4:  CP      W0,W5
18E6:  BRA     C,19BC
18E8:  MOV     918,W4
18EA:  MOV     8B4,W3
18EC:  SUB     W4,W3,W5
18EE:  MOV     91A,W4
18F0:  MOV     8B6,W3
18F2:  SUBB    W4,W3,W6
18F4:  MOV     W5,W0
18F6:  MOV     W6,W1
18F8:  BTSS    W1.F
18FA:  BRA     1904
18FC:  MOV     #0,W4
18FE:  SUB     W4,W5,W0
1900:  MOV     #0,W4
1902:  SUBB    W4,W6,W1
1904:  MOV     W0,W5
1906:  MOV     W1,W6
1908:  MOV     8CE,W0
190A:  CLR     W1
190C:  BTSC    W0.F
190E:  SETM    W1
1910:  CP      W1,W6
1912:  BRA     GT,19BC
1914:  BRA     LT,191A
1916:  CP      W0,W5
1918:  BRA     C,19BC
....................     PID(r_a, count_a, s_a, p_a, &u_a, K_Pa, K_Ia, K_Da); 
191A:  PUSH    914
191C:  POP     91E
191E:  PUSH    916
1920:  POP     920
1922:  PUSH    8B0
1924:  POP     922
1926:  PUSH    8B2
1928:  POP     924
192A:  PUSH    8C2
192C:  POP     926
192E:  CLR     W4
1930:  BTSC.B  927.7
1932:  SETM    W4
1934:  MOV     W4,928
1936:  PUSH    8C8
1938:  POP     92A
193A:  CLR     W4
193C:  BTSC.B  92B.7
193E:  SETM    W4
1940:  MOV     W4,92C
1942:  MOV     #8BC,W4
1944:  MOV     W4,92E
1946:  PUSH    8DC
1948:  POP     930
194A:  PUSH    8DE
194C:  POP     932
194E:  PUSH    8E0
1950:  POP     934
1952:  PUSH    8E2
1954:  POP     936
1956:  PUSH    8E4
1958:  POP     938
195A:  PUSH    8E6
195C:  POP     93A
195E:  CALL    163E
....................     PID(r_b, count_b, s_b, p_b, &u_b, K_Pb, K_Ib, K_Db); 
1962:  PUSH    918
1964:  POP     91E
1966:  PUSH    91A
1968:  POP     920
196A:  PUSH    8B4
196C:  POP     922
196E:  PUSH    8B6
1970:  POP     924
1972:  PUSH    8C4
1974:  POP     926
1976:  CLR     W4
1978:  BTSC.B  927.7
197A:  SETM    W4
197C:  MOV     W4,928
197E:  PUSH    8CA
1980:  POP     92A
1982:  CLR     W4
1984:  BTSC.B  92B.7
1986:  SETM    W4
1988:  MOV     W4,92C
198A:  MOV     #8BE,W4
198C:  MOV     W4,92E
198E:  PUSH    8E8
1990:  POP     930
1992:  PUSH    8EA
1994:  POP     932
1996:  PUSH    8EC
1998:  POP     934
199A:  PUSH    8EE
199C:  POP     936
199E:  PUSH    8F0
19A0:  POP     938
19A2:  PUSH    8F2
19A4:  POP     93A
19A6:  CALL    163E
....................     Motor_a(u_a); 
19AA:  PUSH    8BC
19AC:  POP     91E
19AE:  CALL    10EA
....................     Motor_b(u_b); 
19B2:  PUSH    8BE
19B4:  POP     91E
19B6:  CALL    1156
19BA:  BRA     18B6
....................   } 
....................   printf("position = %d, %d\n", count_a, count_b); 
19BC:  MOV     #0,W1
19BE:  MOV     W1,W0
19C0:  CLR.B   1
19C2:  CALL    E3A
19C6:  INC     W1,W1
19C8:  BTSC.B  223.1
19CA:  BRA     19C8
19CC:  MOV     W0,224
19CE:  MOV     #A,W0
19D0:  CPSGT   W1,W0
19D2:  BRA     19BE
19D4:  MOV     8B0,W0
19D6:  MOV     8B2,W1
19D8:  MOV     #0,W4
19DA:  CALL    1722
19DE:  BTSC.B  223.1
19E0:  BRA     19DE
19E2:  MOV     #2C,W4
19E4:  MOV     W4,224
19E6:  BTSC.B  223.1
19E8:  BRA     19E6
19EA:  MOV     #20,W4
19EC:  MOV     W4,224
19EE:  MOV     8B4,W0
19F0:  MOV     8B6,W1
19F2:  MOV     #0,W4
19F4:  CALL    1722
19F8:  BTSC.B  223.1
19FA:  BRA     19F8
19FC:  MOV     #A,W4
19FE:  MOV     W4,224
....................   printf("done"); 
1A00:  MOV     #0,W1
1A02:  MOV     W1,W0
1A04:  CLR.B   1
1A06:  CALL    DFC
1A0A:  INC     W1,W1
1A0C:  BTSC.B  223.1
1A0E:  BRA     1A0C
1A10:  MOV     W0,224
1A12:  MOV     #3,W0
1A14:  CPSGT   W1,W0
1A16:  BRA     1A02
....................   getPackage = 0; 
1A18:  CLR     910
1A1A:  MOV     [--W15],W6
1A1C:  MOV     [--W15],W5
1A1E:  RETURN  
.................... } 
....................  
.................... void setPosZ() { 
1A20:  MOV     W5,[W15++]
1A22:  MOV     W6,[W15++]
1A24:  MOV.B   8FD,W0L
1A26:  MOV.B   W0L,W5L
1A28:  SE      W5,W5
1A2A:  MOV.B   8FE,W0L
1A2C:  MOV.B   W0L,C
1A2E:  SE      W6,W6
1A30:  MOV     W5,924
1A32:  MOV     W6,926
1A34:  CALL    124C
1A38:  CLR     W1
1A3A:  BTSC    W0.F
1A3C:  SETM    W1
1A3E:  MOV     W0,914
1A40:  MOV     W1,916
....................   long r_z = mergeInts((int)array[3], (int)array[4]); 
....................   printf("r_z = %d", (int)r_z); 
1A42:  MOV     #0,W1
1A44:  MOV     W1,W0
1A46:  CLR.B   1
1A48:  CALL    E5A
1A4C:  INC     W1,W1
1A4E:  BTSC.B  223.1
1A50:  BRA     1A4E
1A52:  MOV     W0,224
1A54:  MOV     #5,W0
1A56:  CPSGT   W1,W0
1A58:  BRA     1A44
1A5A:  MOV     914,W0
1A5C:  MOV     #0,W4
1A5E:  CALL    1260
....................   while (abs(r_z - count_z) > tolerance) { 
1A62:  MOV     914,W4
1A64:  MOV     8B8,W3
1A66:  SUB     W4,W3,W5
1A68:  MOV     916,W4
1A6A:  MOV     8BA,W3
1A6C:  SUBB    W4,W3,W6
1A6E:  MOV     W5,W0
1A70:  MOV     W6,W1
1A72:  BTSS    W1.F
1A74:  BRA     1A7E
1A76:  MOV     #0,W4
1A78:  SUB     W4,W5,W0
1A7A:  MOV     #0,W4
1A7C:  SUBB    W4,W6,W1
1A7E:  MOV     W0,W5
1A80:  MOV     W1,W6
1A82:  MOV     8CE,W0
1A84:  CLR     W1
1A86:  BTSC    W0.F
1A88:  SETM    W1
1A8A:  CP      W1,W6
1A8C:  BRA     GT,1ADE
1A8E:  BRA     LT,1A94
1A90:  CP      W0,W5
1A92:  BRA     C,1ADE
....................     PID(r_z, count_z, s_z, p_z, &u_z, K_Pz, K_Iz, K_Dz); 
1A94:  PUSH    914
1A96:  POP     91E
1A98:  PUSH    916
1A9A:  POP     920
1A9C:  PUSH    8B8
1A9E:  POP     922
1AA0:  PUSH    8BA
1AA2:  POP     924
1AA4:  PUSH    8C6
1AA6:  POP     926
1AA8:  CLR     W4
1AAA:  BTSC.B  927.7
1AAC:  SETM    W4
1AAE:  MOV     W4,928
1AB0:  PUSH    8CC
1AB2:  POP     92A
1AB4:  CLR     W4
1AB6:  BTSC.B  92B.7
1AB8:  SETM    W4
1ABA:  MOV     W4,92C
1ABC:  MOV     #8C0,W4
1ABE:  MOV     W4,92E
1AC0:  PUSH    8D0
1AC2:  POP     930
1AC4:  PUSH    8D2
1AC6:  POP     932
1AC8:  PUSH    8D4
1ACA:  POP     934
1ACC:  PUSH    8D6
1ACE:  POP     936
1AD0:  PUSH    8D8
1AD2:  POP     938
1AD4:  PUSH    8DA
1AD6:  POP     93A
1AD8:  CALL    163E
1ADC:  BRA     1A62
....................   } 
....................   Motor_z(u_z); 
1ADE:  PUSH    8C0
1AE0:  POP     918
1AE2:  CALL    107E
....................   printf("position = %d\n", count_z); 
1AE6:  MOV     #0,W1
1AE8:  MOV     W1,W0
1AEA:  CLR.B   1
1AEC:  CALL    E70
1AF0:  INC     W1,W1
1AF2:  BTSC.B  223.1
1AF4:  BRA     1AF2
1AF6:  MOV     W0,224
1AF8:  MOV     #A,W0
1AFA:  CPSGT   W1,W0
1AFC:  BRA     1AE8
1AFE:  MOV     8B8,W0
1B00:  MOV     8BA,W1
1B02:  MOV     #0,W4
1B04:  CALL    1722
1B08:  BTSC.B  223.1
1B0A:  BRA     1B08
1B0C:  MOV     #A,W4
1B0E:  MOV     W4,224
....................   printf("done"); 
1B10:  MOV     #0,W1
1B12:  MOV     W1,W0
1B14:  CLR.B   1
1B16:  CALL    DFC
1B1A:  INC     W1,W1
1B1C:  BTSC.B  223.1
1B1E:  BRA     1B1C
1B20:  MOV     W0,224
1B22:  MOV     #3,W0
1B24:  CPSGT   W1,W0
1B26:  BRA     1B12
....................   getPackage = 0; 
1B28:  CLR     910
1B2A:  MOV     [--W15],W6
1B2C:  MOV     [--W15],W5
1B2E:  RETURN  
.................... } 
....................  
.................... void gripClose() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
*
101E:  MOV     #6,W4
1020:  MOV     W4,19C
....................   set_pwm_duty(5, 2600); 
1022:  MOV     #A28,W4
1024:  MOV     W4,198
....................   delay_ms(500); 
1026:  MOV     #1F4,W0
1028:  CALL    FE4
....................   printf("done"); 
102C:  MOV     #0,W1
102E:  MOV     W1,W0
1030:  CLR.B   1
1032:  CALL    DFC
1036:  INC     W1,W1
1038:  BTSC.B  223.1
103A:  BRA     1038
103C:  MOV     W0,224
103E:  MOV     #3,W0
1040:  CPSGT   W1,W0
1042:  BRA     102E
....................   getPackage = 0; 
1044:  CLR     910
1046:  RETURN  
.................... } 
....................  
.................... void gripOpen() { 
....................   setup_compare(5, COMPARE_PWM | COMPARE_TIMER2); 
*
0FF4:  MOV     #6,W4
0FF6:  MOV     W4,19C
....................   set_pwm_duty(5, 4000); 
0FF8:  MOV     #FA0,W4
0FFA:  MOV     W4,198
....................   delay_ms(500); 
0FFC:  MOV     #1F4,W0
0FFE:  CALL    FE4
....................   printf("done"); 
1002:  MOV     #0,W1
1004:  MOV     W1,W0
1006:  CLR.B   1
1008:  CALL    DFC
100C:  INC     W1,W1
100E:  BTSC.B  223.1
1010:  BRA     100E
1012:  MOV     W0,224
1014:  MOV     #3,W0
1016:  CPSGT   W1,W0
1018:  BRA     1004
....................   getPackage = 0; 
101A:  CLR     910
101C:  RETURN  
.................... } 
....................  
.................... void gripRotate() { 
....................   printf("done"); 
*
1B30:  MOV     #0,W1
1B32:  MOV     W1,W0
1B34:  CLR.B   1
1B36:  CALL    DFC
1B3A:  INC     W1,W1
1B3C:  BTSC.B  223.1
1B3E:  BRA     1B3C
1B40:  MOV     W0,224
1B42:  MOV     #3,W0
1B44:  CPSGT   W1,W0
1B46:  BRA     1B32
....................   getPackage = 0; 
1B48:  CLR     910
1B4A:  RETURN  
.................... } 
....................  
.................... int sumCheck() { 
*
1048:  CLR     914
104A:  MOV.B   902,W0L
104C:  SE      W0,W0
104E:  MOV     W0,916
....................   int sum = 0; 
....................   int checksum = array[8]; 
....................   for (int i = 0; i < 7; i++) { 
1050:  CLR     918
1052:  MOV     918,W4
1054:  CP      W4,#7
1056:  BRA     GE,106A
....................     sum = sum + array[i]; 
1058:  MOV     #8FA,W4
105A:  MOV     918,W3
105C:  ADD     W3,W4,W0
105E:  MOV     W0,W4
1060:  MOV.B   [W4],W0L
1062:  SE      W0,W0
1064:  ADD     914
1066:  INC     0918
1068:  BRA     1052
....................   } 
....................   if (sum == checksum) { 
106A:  MOV     914,W0
106C:  CP      916
106E:  BRA     NZ,1078
....................     return 1; 
1070:  MOV     #1,W4
1072:  MOV     W4,0
1074:  BRA     107C
....................   } else { 
1076:  BRA     107C
....................     return 0; 
1078:  CLR     0
107A:  BRA     107C
....................   } 
107C:  RETURN  
.................... } 
.................... // 
....................  
.................... // 
.................... void main() { 
*
1B4C:  MOV     #2780,W15
1B4E:  MOV     #27FF,W0
1B50:  MOV     W0,20
1B52:  NOP     
1B54:  MOV     #4444,W0
1B56:  MOV     W0,A8
1B58:  BSET.B  81.7
1B5A:  MOV     #46,W0
1B5C:  MOV.B   W0L,742
1B5E:  MOV     #57,W0
1B60:  MOV.B   W0L,742
1B62:  BCLR.B  742.6
1B64:  MOV     #63F,W0
1B66:  MOV     W0,680
1B68:  MOV     #3F05,W0
1B6A:  MOV     W0,682
1B6C:  MOV     #3F0C,W0
1B6E:  MOV     W0,6A4
1B70:  MOV     #1615,W0
1B72:  MOV     W0,6C0
1B74:  MOV     #13,W0
1B76:  MOV     W0,6C4
1B78:  MOV     #12,W0
1B7A:  MOV     W0,6CA
1B7C:  MOV     #300,W0
1B7E:  MOV     W0,6CC
1B80:  MOV     #14,W0
1B82:  MOV     W0,6CE
1B84:  MOV     #46,W0
1B86:  MOV.B   W0L,742
1B88:  MOV     #57,W0
1B8A:  MOV.B   W0L,742
1B8C:  BSET.B  742.6
1B8E:  CLR     744
1B90:  MOV     #8000,W4
1B92:  MOV     W4,220
1B94:  MOV     #400,W4
1B96:  MOV     W4,222
1B98:  BSET.B  220.3
1B9A:  MOV     #1A0,W4
1B9C:  MOV     W4,228
1B9E:  CLR     8B0
1BA0:  CLR     8B2
1BA2:  CLR     8B4
1BA4:  CLR     8B6
1BA6:  CLR     8B8
1BA8:  CLR     8BA
1BAA:  CLR     8C2
1BAC:  CLR     8C4
1BAE:  CLR     8C6
1BB0:  CLR     8C8
1BB2:  CLR     8CA
1BB4:  CLR     8CC
1BB6:  MOV     #5,W4
1BB8:  MOV     W4,8CE
1BBA:  MOV     #999A,W4
1BBC:  MOV     W4,8D0
1BBE:  MOV     #3F19,W4
1BC0:  MOV     W4,8D2
1BC2:  MOV     #D70A,W4
1BC4:  MOV     W4,8D4
1BC6:  MOV     #3C23,W4
1BC8:  MOV     W4,8D6
1BCA:  CLR     8D8
1BCC:  MOV     #3F00,W4
1BCE:  MOV     W4,8DA
1BD0:  MOV     #999A,W4
1BD2:  MOV     W4,8DC
1BD4:  MOV     #3F19,W4
1BD6:  MOV     W4,8DE
1BD8:  MOV     #D70A,W4
1BDA:  MOV     W4,8E0
1BDC:  MOV     #3C23,W4
1BDE:  MOV     W4,8E2
1BE0:  CLR     8E4
1BE2:  MOV     #3F00,W4
1BE4:  MOV     W4,8E6
1BE6:  MOV     #999A,W4
1BE8:  MOV     W4,8E8
1BEA:  MOV     #3F19,W4
1BEC:  MOV     W4,8EA
1BEE:  MOV     #D70A,W4
1BF0:  MOV     W4,8EC
1BF2:  MOV     #3C23,W4
1BF4:  MOV     W4,8EE
1BF6:  CLR     8F0
1BF8:  MOV     #3F00,W4
1BFA:  MOV     W4,8F2
1BFC:  CLR     8F4
1BFE:  CLR     8F6
1C00:  CLR     8F8
1C02:  CLR.B   90E
1C04:  CLR     910
1C06:  SETM    32C
1C08:  BRA     1CA2
1C0A:  DATA    C0,06,08
1C0C:  DATA    00,00,00
1C0E:  DATA    4B,F0,3F
1C10:  DATA    5C,0A,58
1C12:  DATA    F6,3B,8F
1C14:  DATA    00,C0,3C
1C16:  DATA    8B,28,AC
1C18:  DATA    3C,BE,F6
1C1A:  DATA    3F,D2,D5
1C1C:  DATA    44,16,8C
1C1E:  DATA    15,D7,BF
1C20:  DATA    69,00,5A
1C22:  DATA    2E,1B,87
1C24:  DATA    99,3F,9A
1C26:  DATA    5F,AD,4B
1C28:  DATA    91,E4,01
1C2A:  DATA    C0,5D,11
1C2C:  DATA    2F,92,E4
1C2E:  DATA    81,FB,3F
1C30:  DATA    38,DA,91
1C32:  DATA    80,9D,C5
1C34:  DATA    E0,BF,6F
1C36:  DATA    12,C0,B4
1C38:  DATA    C3,09,AB
1C3A:  DATA    3F,6B,C1
1C3C:  DATA    03,4E,C1
1C3E:  DATA    B5,45,BF
1C40:  DATA    F7,40,05
1C42:  DATA    FF,00,5A
1C44:  DATA    EF,3F,F3
1C46:  DATA    A3,E2,F7
1C48:  DATA    D7,FF,01
1C4A:  DATA    40,C0,B4
1C4C:  DATA    FF,05,3C
1C4E:  DATA    58,FC,3F
1C50:  DATA    3B,D3,C0
1C52:  DATA    B5,BA,8C
1C54:  DATA    E2,3F,39
1C56:  DATA    D3,C7,3D
1C58:  DATA    41,79,B2
1C5A:  DATA    3F,87,0D
1C5C:  DATA    3C,50,D0
1C5E:  DATA    AF,62,3F
1C60:  DATA    30,4B,8D
1C62:  DATA    A2,82,AA
1C64:  DATA    04,40,09
1C66:  DATA    A0,40,4A
1C68:  DATA    05,76,03
1C6A:  DATA    40,EC,9E
1C6C:  DATA    37,88,A6
1C6E:  DATA    44,F0,3F
1C70:  DATA    8F,12,8D
1C72:  DATA    29,9A,5B
1C74:  DATA    C7,3F,0E
1C76:  DATA    E0,80,7C
1C78:  DATA    A1,D8,86
1C7A:  DATA    3F,29,4B
1C7C:  DATA    FB,95,C2
1C7E:  DATA    37,1A,3F
1C80:  DATA    C0,14,08
1C82:  DATA    FA,00,00
1C84:  DATA    00,00,00
1C86:  INC     W2,W2
1C88:  CP      W2,#1
1C8A:  BRA     NZ,1C94
1C8C:  TBLRDL  [W1],W3
1C8E:  TBLRDH  [W1++],W4
1C90:  MOV.B   6,W0L
1C92:  RETURN  
1C94:  CP      W2,#2
1C96:  BRA     NZ,1C9C
1C98:  MOV.B   7,W0L
1C9A:  RETURN  
1C9C:  MOV.B   8,W0L
1C9E:  CLR     W2
1CA0:  RETURN  
1CA2:  MOV     #0,W6
1CA4:  MOV     #0,W0
1CA6:  MOV     W0,32
1CA8:  MOV     #1C0A,W0
1CAA:  MOV     W0,W1
1CAC:  CLR     W2
1CAE:  CALL    1C86
1CB2:  MOV.B   W0L,B
1CB4:  CALL    1C86
1CB8:  MOV.B   W0L,A
1CBA:  CP0     W5
1CBC:  BRA     Z,1CF0
1CBE:  BTSS    W5.F
1CC0:  BRA     1CD0
1CC2:  CALL    1C86
1CC6:  MOV.B   W0L,D
1CC8:  CALL    1C86
1CCC:  MOV.B   W0L,C
1CCE:  BCLR    W5.F
1CD0:  BTSS    W5.E
1CD2:  BRA     1CE4
1CD4:  BCLR    W5.E
1CD6:  DEC     W5,W5
1CD8:  CALL    1C86
1CDC:  MOV.B   W0L,W7L
1CDE:  REPEAT  W5
1CE0:  MOV.B   W7L,[W6++]
1CE2:  BRA     1CAE
1CE4:  CALL    1C86
1CE8:  MOV.B   W0L,[W6++]
1CEA:  DEC     W5,W5
1CEC:  BRA     NZ,1CE4
1CEE:  BRA     1CAE
....................   disable_interrupts(GLOBAL); 
1CF0:  BCLR.B  81.7
1CF2:  MOV     #E0,W4
1CF4:  MOV     W4,42
1CF6:  BSET.B  81.7
....................  
....................   clear_interrupt( 
....................       INT_RDA); // recommend style coding to confirm everything clear before use 
1CF8:  REPEAT  #3
1CFA:  MOV     226,W0
1CFC:  BCLR.B  85.3
....................  
....................   enable_interrupts(INT_RDA); 
1CFE:  BSET.B  95.3
....................   Init_Interrupts(); 
1D00:  CALL    FD6
....................   enable_interrupts(GLOBAL); 
1D04:  BCLR.B  81.7
1D06:  CLR     42
1D08:  BSET.B  81.7
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); 
1D0A:  CLR     112
1D0C:  MOV     #C8,W4
1D0E:  MOV     W4,10E
1D10:  MOV     #8010,W4
1D12:  MOV     W4,112
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8, 8000); 
1D14:  CLR     110
1D16:  MOV     #1F40,W4
1D18:  MOV     W4,10C
1D1A:  MOV     #8010,W4
1D1C:  MOV     W4,110
....................   setup_timer1(TMR_INTERNAL | TMR_DIV_BY_8, 6666); 
1D1E:  CLR     104
1D20:  MOV     #1A0A,W4
1D22:  MOV     W4,102
1D24:  MOV     #8010,W4
1D26:  MOV     W4,104
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
1D28:  MOV     #E,W4
1D2A:  MOV     W4,190
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
1D2C:  MOV     #E,W4
1D2E:  MOV     W4,18A
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
1D30:  MOV     #E,W4
1D32:  MOV     W4,184
....................   set_pwm_duty(3, 0); 
1D34:  CLR     18C
....................   set_pwm_duty(2, 0); 
1D36:  CLR     186
....................   set_pwm_duty(1, 0); 
1D38:  CLR     180
....................   gripOpen(); 
1D3A:  CALL    FF4
....................   delay_ms(1000); 
1D3E:  MOV     #3E8,W0
1D40:  CALL    FE4
....................   gripClose(); 
1D44:  CALL    101E
....................   delay_ms(1000); 
1D48:  MOV     #3E8,W0
1D4A:  CALL    FE4
....................   // printf("System Ready!\r\n"); 
....................   while (TRUE) { 
....................     if (getPackage >= 1) { 
1D4E:  MOV     910,W4
1D50:  CP      W4,#1
1D52:  BRA     LT,1DD8
....................       int received = sumCheck(); 
1D54:  CALL    1048
1D58:  MOV     W0,912
....................       if (!received) { 
1D5A:  CP0     912
1D5C:  BRA     NZ,1D7A
....................         printf("resend"); 
1D5E:  MOV     #0,W1
1D60:  MOV     W1,W0
1D62:  CLR.B   1
1D64:  CALL    E8C
1D68:  INC     W1,W1
1D6A:  BTSC.B  223.1
1D6C:  BRA     1D6A
1D6E:  MOV     W0,224
1D70:  MOV     #5,W0
1D72:  CPSGT   W1,W0
1D74:  BRA     1D60
....................         getPackage = 0; 
1D76:  CLR     910
....................       } else { 
1D78:  BRA     1DD8
....................         switch (array[2]) { 
1D7A:  MOV.B   8FC,W0L
1D7C:  CLR.B   1
1D7E:  XOR     #0,W0
1D80:  BRA     Z,1D98
1D82:  XOR     #1,W0
1D84:  BRA     Z,1D9E
1D86:  XOR     #3,W0
1D88:  BRA     Z,1DA4
1D8A:  XOR     #1,W0
1D8C:  BRA     Z,1DAA
1D8E:  XOR     #7,W0
1D90:  BRA     Z,1DB0
1D92:  XOR     #1,W0
1D94:  BRA     Z,1DB6
1D96:  BRA     1DBC
....................         case 0: 
....................           setHome(); 
1D98:  CALL    11C2
....................           break; 
1D9C:  BRA     1DD8
....................         case 1: 
....................           setPosAB(); 
1D9E:  CALL    1836
....................           break; 
1DA2:  BRA     1DD8
....................         case 2: 
....................           setPosZ(); 
1DA4:  CALL    1A20
....................           break; 
1DA8:  BRA     1DD8
....................         case 3: 
....................           gripClose(); 
1DAA:  CALL    101E
....................           break; 
1DAE:  BRA     1DD8
....................         case 4: 
....................           gripOpen(); 
1DB0:  CALL    FF4
....................           break; 
1DB4:  BRA     1DD8
....................         case 5: 
....................           gripRotate(); 
1DB6:  CALL    1B30
....................           break; 
1DBA:  BRA     1DD8
....................         default: 
....................           printf("resend"); 
1DBC:  MOV     #0,W1
1DBE:  MOV     W1,W0
1DC0:  CLR.B   1
1DC2:  CALL    E8C
1DC6:  INC     W1,W1
1DC8:  BTSC.B  223.1
1DCA:  BRA     1DC8
1DCC:  MOV     W0,224
1DCE:  MOV     #5,W0
1DD0:  CPSGT   W1,W0
1DD2:  BRA     1DBE
....................           getPackage = 0; 
1DD4:  CLR     910
....................           break; 
1DD6:  BRA     1DD8
....................         } 
....................       } 
....................     } 
1DD8:  BRA     1D4E
....................   } 
.................... } 
1DDA:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
