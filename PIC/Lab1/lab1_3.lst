CCS PCD C Compiler, Version 5.015, 5967               28-Sep-18 20:10

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\Lab1\lab1_3.lst

               ROM used:   2480 bytes (7%)
                           Largest free fragment is 28236
               RAM used:   351 (4%) at main() level
                           370 (5%) worst case
               Stack size: 128

*
0C00:  GOTO    132A
*
0C40:  GOTO    E26
0C44:  GOTO    EB8
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    41,4E,00
0E0A:  DATA    33,3A,00
0E0C:  DATA    20,25,00
0E0E:  DATA    64,0D,00
0E10:  DATA    0A,00,00
0E12:  CLR     32
0E14:  MOV     #E1E,W3
0E16:  ADD     W3,W0,W0
0E18:  TBLRDL.B[W0],W0L
0E1A:  CLR.B   1
0E1C:  RETURN  
0E1E:  DATA    55,20,00
0E20:  DATA    3D,20,00
0E22:  DATA    25,64,00
0E24:  DATA    0A,00,00
*
0F40:  MOV     W5,[W15++]
0F42:  MOV     W6,[W15++]
0F44:  MOV     #8E,W1
0F46:  BCLR    W6.0
0F48:  BTSS    W0.F
0F4A:  BRA     F52
0F4C:  BSET    W6.0
0F4E:  NEG     W0,W0
0F50:  BRA     F52
0F52:  CP0     W0
0F54:  BRA     Z,F7E
0F56:  BTSC    W0.F
0F58:  BRA     F62
0F5A:  BCLR.B  42.0
0F5C:  RLC     W0,W0
0F5E:  DEC     W1,W1
0F60:  BRA     F56
0F62:  SWAP    W1
0F64:  BCLR.B  42.0
0F66:  RRC     W1,W1
0F68:  BCLR    W0.F
0F6A:  SWAP    W0
0F6C:  XOR.B   W0L,W1L,W1L
0F6E:  AND.B   #0,W0L
0F70:  BTSC    W6.0
0F72:  BSET    W1.F
0F74:  BRA     F84
0F76:  MOV.B   W1L,W0L
0F78:  BSET    W1.7
0F7A:  AND.B   #0,W1L
0F7C:  BRA     F84
0F7E:  CLR     W0
0F80:  CLR     W1
0F82:  BRA     F84
0F84:  MOV     [--W15],W6
0F86:  MOV     [--W15],W5
0F88:  RETURN  
0F8A:  MOV     W5,[W15++]
0F8C:  MOV     #C,W5
0F8E:  REPEAT  #4
0F90:  MOV     [W5++],[W15++]
0F92:  MOV     W0,W4
0F94:  MOV     W1,W5
0F96:  MOV     W3,W7
0F98:  MOV     W2,W6
0F9A:  BCLR.B  42.0
0F9C:  BCLR.B  42.1
0F9E:  RLC     W1,W1
0FA0:  SWAP    W1
0FA2:  AND     #FF,W1
0FA4:  CP0     W1
0FA6:  BRA     Z,103E
0FA8:  BCLR.B  42.0
0FAA:  BCLR.B  42.1
0FAC:  RLC     W3,W3
0FAE:  SWAP    W3
0FB0:  AND     #FF,W3
0FB2:  CP0     W3
0FB4:  BRA     Z,103E
0FB6:  ZE      W0,W0
0FB8:  ADD.B   W3L,W1L,W0L
0FBA:  BRA     C,FC4
0FBC:  SUB     #7F,W0
0FBE:  BRA     Z,103E
0FC0:  BRA     NC,103E
0FC2:  BRA     FC8
0FC4:  ADD.B   #81,W0L
0FC6:  BRA     C,103E
0FC8:  XOR     W5,W7,W10
0FCA:  BCLR.B  42.0
0FCC:  BCLR.B  42.1
0FCE:  AND     #FF,W5
0FD0:  BSET    W5.7
0FD2:  BCLR.B  42.0
0FD4:  AND     #FF,W7
0FD6:  BSET    W7.7
0FD8:  MUL.UU  W4,W6,W2
0FDA:  MUL.UU  W5,W6,W8
0FDC:  ADDC    W8,W3,W3
0FDE:  MOV     W9,W1
0FE0:  BTSC.B  42.0
0FE2:  INC     W1,W1
0FE4:  BCLR.B  42.0
0FE6:  MUL.UU  W7,W4,W8
0FE8:  ADDC    W8,W3,W3
0FEA:  ADDC    W9,W1,W1
0FEC:  MUL.UU  W5,W7,W8
0FEE:  ADDC    W8,W1,W1
0FF0:  INC     W0,W0
0FF2:  CP0     W1
0FF4:  BTSC.B  42.1
0FF6:  BRA     FFA
0FF8:  BRA     1000
0FFA:  CP0     W3
0FFC:  BTSC.B  42.1
0FFE:  BRA     100A
1000:  BTSC    W1.F
1002:  BRA     100A
1004:  RLC     W3,W3
1006:  RLC     W1,W1
1008:  DEC     W0,W0
100A:  MOV     W1,W2
100C:  BCLR.B  42.0
100E:  BTSS    W3.7
1010:  BRA     1024
1012:  MOV     #FF00,W7
1014:  AND     W3,W7,W3
1016:  ADD     #100,W3
1018:  ADDC    W2,#0,W2
101A:  CP0     W2
101C:  BRA     NZ,1024
101E:  CP0     W3
1020:  BRA     NZ,1024
1022:  INC     W0,W0
1024:  SWAP    W0
1026:  BCLR.B  42.0
1028:  BCLR.B  42.1
102A:  RRC     W0,W1
102C:  BTSC    W10.F
102E:  BSET    W1.F
1030:  BCLR    W2.F
1032:  SWAP    W2
1034:  XOR.B   W2L,W1L,W1L
1036:  SWAP    W3
1038:  MOV.B   W3L,W2L
103A:  MOV     W2,W0
103C:  BRA     1044
103E:  MOV     #0,W0
1040:  MOV     #0,W1
1042:  BRA     1044
1044:  MOV     #14,W5
1046:  REPEAT  #4
1048:  MOV     [--W15],[W5--]
104A:  MOV     [--W15],W5
104C:  RETURN  
104E:  MOV     W5,[W15++]
1050:  MOV     #C,W5
1052:  REPEAT  #3
1054:  MOV     [W5++],[W15++]
1056:  CLR     W9
1058:  MOV     #8000,W8
105A:  BTSC.B  43.0
105C:  XOR     W8,W3,W3
105E:  CP0     W0
1060:  BRA     NZ,1068
1062:  MOV     #7FFF,W10
1064:  AND     W1,W10,W10
1066:  BTSS.B  42.1
1068:  MOV     W1,W10
106A:  XOR     W3,W10,W11
106C:  MOV     W1,W6
106E:  MOV     W3,W7
1070:  MOV     W3,W12
1072:  BCLR.B  42.1
1074:  BCLR.B  42.0
1076:  RLC     W6,W6
1078:  SWAP    W6
107A:  AND     #FF,W6
107C:  CP0     W6
107E:  BRA     Z,11C2
1080:  BCLR.B  42.1
1082:  BCLR.B  42.0
1084:  RLC     W7,W7
1086:  SWAP    W7
1088:  AND     #FF,W7
108A:  CP0     W7
108C:  BRA     Z,11CC
108E:  BCLR.B  42.1
1090:  BCLR.B  42.0
1092:  CP      W7,W6
1094:  BRA     Z,11CE
1096:  BRA     N,11DE
1098:  BCLR    W9.0
109A:  BSET    W9.1
109C:  SUB     W7,W6,W8
109E:  MOV     W7,W6
10A0:  AND     #FF,W1
10A2:  BSET    W1.7
10A4:  AND     #FF,W3
10A6:  BSET    W3.7
10A8:  MOV     #28,W7
10AA:  CP      W7,W8
10AC:  BRA     N,10D0
10AE:  BCLR.B  42.1
10B0:  BCLR.B  42.0
10B2:  RRC     W1,W1
10B4:  RRC     W0,W0
10B6:  DEC     W8,W8
10B8:  BRA     NZ,10AE
10BA:  BRA     10D6
10BC:  MOV     #28,W7
10BE:  CP      W7,W8
10C0:  BRA     N,10D4
10C2:  BCLR.B  42.1
10C4:  BCLR.B  42.0
10C6:  RRC     W3,W3
10C8:  RRC     W2,W2
10CA:  DEC     W8,W8
10CC:  BRA     NZ,10C2
10CE:  BRA     10EE
10D0:  MOV     W2,W0
10D2:  MOV     W3,W1
10D4:  BRA     115C
10D6:  BTSS    W11.F
10D8:  BRA     10FC
10DA:  BTSC    W9.4
10DC:  MOV     W12,W11
10DE:  NEG     W0,W0
10E0:  BRA     Z,10E6
10E2:  COM.B   W1L,W1L
10E4:  BRA     10E8
10E6:  NEG     W1,W1
10E8:  BTSC    W9.4
10EA:  BRA     1142
10EC:  BRA     10FC
10EE:  BTSS    W11.F
10F0:  BRA     10FC
10F2:  NEG     W2,W2
10F4:  BRA     Z,10FA
10F6:  COM.B   W3L,W3L
10F8:  BRA     10FC
10FA:  NEG     W3,W3
10FC:  AND     #FF,W5
10FE:  BCLR.B  42.1
1100:  BCLR.B  42.0
1102:  ADD     W0,W2,W0
1104:  ADDC.B  W1L,W3L,W1L
1106:  BTSC.B  42.0
1108:  BSET    W9.3
110A:  BTSC    W9.0
110C:  BRA     1120
110E:  BTSC    W9.1
1110:  BRA     1114
1112:  BRA     112A
1114:  BTSC    W11.F
1116:  BRA     1142
1118:  BTSC    W9.3
111A:  BRA     116E
111C:  BSET    W9.6
111E:  BRA     115C
1120:  BTSC    W11.F
1122:  BRA     1142
1124:  BTSC    W9.3
1126:  BRA     116E
1128:  BRA     115C
112A:  BCLR    W9.2
112C:  BTSC    W11.F
112E:  BRA     1138
1130:  MOV     W10,W11
1132:  BTSC    W9.3
1134:  BRA     116E
1136:  BRA     11A4
1138:  BSET    W9.4
113A:  XOR.B   #80,W1L
113C:  BTSC    W1.7
113E:  BRA     10DA
1140:  MOV     W10,W11
1142:  AND     #FF,W1
1144:  IOR      W0,  W1,W7
1146:  BRA     Z,115C
1148:  BTSC    W1.7
114A:  BRA     115C
114C:  BCLR.B  42.1
114E:  BCLR.B  42.0
1150:  RLC     W0,W0
1152:  RLC     W1,W1
1154:  DEC     W6,W6
1156:  BTSC.B  42.1
1158:  BRA     11BC
115A:  BRA     1148
115C:  BTSC    W9.0
115E:  MOV     W10,W11
1160:  BTSC    W9.1
1162:  MOV     W12,W11
1164:  BTSS    W9.5
1166:  BRA     119C
1168:  BTSC    W10.F
116A:  BSET    W0.8
116C:  BRA     11A4
116E:  BSET.B  42.0
1170:  RRC.B   W1L,W1L
1172:  RRC     W0,W0
1174:  BTSC.B  42.0
1176:  BSET    W9.5
1178:  INC     W6,W6
117A:  BRA     Z,11BC
117C:  BTSS    W9.5
117E:  BRA     1190
1180:  INC     W0,W0
1182:  BRA     NZ,1190
1184:  INC.B   W1L,W1L
1186:  BRA     NZ,1190
1188:  RRC.B   W1L,W1L
118A:  RRC     W0,W0
118C:  INC     W6,W6
118E:  BRA     Z,11BC
1190:  BTSC    W9.0
1192:  MOV     W10,W11
1194:  BTSC    W9.1
1196:  MOV     W12,W11
1198:  BTSC.B  42.1
119A:  BRA     11BC
119C:  BTSC    W9.6
119E:  MOV     W10,W11
11A0:  BTSC    W9.7
11A2:  MOV     W12,W11
11A4:  IOR      W0,  W1,W2
11A6:  BRA     Z,11EE
11A8:  BCLR    W1.7
11AA:  SWAP    W6
11AC:  BCLR.B  42.1
11AE:  BCLR.B  42.0
11B0:  RRC     W6,W6
11B2:  XOR     W6,W1,W1
11B4:  BSET    W1.F
11B6:  BTSS    W11.F
11B8:  BCLR    W1.F
11BA:  BRA     11EE
11BC:  MOV     #0,W0
11BE:  MOV     #0,W1
11C0:  BRA     11EE
11C2:  BTSC    W10.F
11C4:  XOR     W8,W3,W3
11C6:  MOV     W2,W0
11C8:  MOV     W3,W1
11CA:  BRA     11EE
11CC:  BRA     11EE
11CE:  AND     #FF,W3
11D0:  BSET    W3.7
11D2:  AND     #FF,W1
11D4:  BSET    W1.7
11D6:  BTSC    W11.F
11D8:  BCLR    W3.7
11DA:  BSET    W9.2
11DC:  BRA     10EE
11DE:  SUB     W6,W7,W8
11E0:  AND     #FF,W1
11E2:  BSET    W1.7
11E4:  AND     #FF,W3
11E6:  BSET    W3.7
11E8:  BCLR    W9.1
11EA:  BSET    W9.0
11EC:  BRA     10BC
11EE:  MOV     #12,W5
11F0:  REPEAT  #3
11F2:  MOV     [--W15],[W5--]
11F4:  MOV     [--W15],W5
11F6:  RETURN  
11F8:  MOV     W0,W2
11FA:  MOV     W1,W3
11FC:  MOV.B   W1L,W0L
11FE:  SWAP    W0
1200:  BSET    W0.F
1202:  RLC     W1,W1
1204:  SWAP    W1
1206:  ZE      W1,W1
1208:  MOV     #8E,W4
120A:  SUB.B   W4L,W1L,W1L
120C:  BRA     Z,121A
120E:  CP0     W0
1210:  BRA     Z,121A
1212:  BCLR.B  42.0
1214:  RRC     W0,W0
1216:  DEC     W1,W1
1218:  BRA     NZ,120E
121A:  BTSS    W3.F
121C:  BRA     1222
121E:  NEG     W0,W0
1220:  BRA     1222
1222:  RETURN  
1224:  MOV     W5,[W15++]
1226:  MOV     #C,W5
1228:  REPEAT  #3
122A:  MOV     [W5++],[W15++]
122C:  BTSS    W0.F
122E:  BRA     1248
1230:  NEG     W0,W0
1232:  BSET    W4.8
1234:  BTSS    W4.F
1236:  BRA     1248
1238:  MOV     W0,[W15++]
123A:  MOV     #2D,W0
123C:  BTSC.B  223.1
123E:  BRA     123C
1240:  MOV     W0,224
1242:  MOV     [--W15],W0
1244:  BCLR    W4.8
1246:  DEC.B   0008
1248:  CLR     W5
124A:  MOV     W0,W7
124C:  MOV     W4,W9
124E:  BCLR    W4.F
1250:  CP0.B   W4L
1252:  BRA     NZ,1260
1254:  BTSC    W9.F
1256:  BRA     125C
1258:  MOV     #0,W5
125A:  BRA     127A
125C:  MOV     #0,W5
125E:  BRA     127A
1260:  SUB.B   W4L,#6,W5L
1262:  BRA     NC,1278
1264:  MOV     #30,W0
1266:  BTSS    W9.F
1268:  MOV     #20,W0
126A:  BTSC.B  223.1
126C:  BRA     126A
126E:  MOV     W0,224
1270:  DEC     W5,W5
1272:  BRA     NN,126A
1274:  MOV     #5,W5
1276:  BRA     127A
1278:  MOV     W4,W5
127A:  MOV     #6,W4
127C:  BTSC    W5.8
127E:  INC     W4,W4
1280:  BSET    W5.E
1282:  BTSC    W9.F
1284:  BSET    W5.F
1286:  MOV     #2710,W8
1288:  REPEAT  #11
128A:  DIV.U   W7,W8
128C:  CALL    12D0
1290:  MOV     W1,W7
1292:  MOV     #3E8,W8
1294:  REPEAT  #11
1296:  DIV.U   W7,W8
1298:  CALL    12D0
129C:  MOV     W1,W7
129E:  MOV     #64,W8
12A0:  REPEAT  #11
12A2:  DIV.U   W7,W8
12A4:  CALL    12D0
12A8:  MOV     W1,W7
12AA:  MOV     #A,W8
12AC:  REPEAT  #11
12AE:  DIV.U   W7,W8
12B0:  CALL    12D0
12B4:  BTSS    W9.8
12B6:  BRA     12C2
12B8:  MOV     #2D,W0
12BA:  BTSC.B  223.1
12BC:  BRA     12BA
12BE:  MOV     W0,224
12C0:  BCLR    W9.8
12C2:  MOV     #30,W0
12C4:  ADD.B   W1L,W0L,W0L
12C6:  MOV     W0,2A
12C8:  BTSC.B  223.1
12CA:  BRA     12C8
12CC:  MOV     W0,224
12CE:  BRA     1310
12D0:  MOV     #30,W6
12D2:  CP0     W0
12D4:  BRA     NZ,12F2
12D6:  BTSS    W5.E
12D8:  BRA     1306
12DA:  DEC     W4,W4
12DC:  CP.B    W4L,W5L
12DE:  BRA     Z,12E4
12E0:  BTSC.B  42.0
12E2:  RETURN  
12E4:  CP0     W0
12E6:  BRA     NZ,12F2
12E8:  BTSS    W5.E
12EA:  BRA     1306
12EC:  BTSS    W5.F
12EE:  MOV     #20,W6
12F0:  BRA     1306
12F2:  BCLR    W5.E
12F4:  BTSS    W9.8
12F6:  BRA     1306
12F8:  MOV     W0,W10
12FA:  MOV     #2D,W0
12FC:  BTSC.B  223.1
12FE:  BRA     12FC
1300:  MOV     W0,224
1302:  BCLR    W9.8
1304:  MOV     W10,W0
1306:  ADD.B   W6L,W0L,W0L
1308:  BTSC.B  223.1
130A:  BRA     1308
130C:  MOV     W0,224
130E:  RETURN  
1310:  MOV     #12,W5
1312:  REPEAT  #3
1314:  MOV     [--W15],[W5--]
1316:  MOV     [--W15],W5
1318:  RETURN  
....................  
.................... #list 
....................  
.................... #device ADC = 10 
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #use delay(internal = 8 MHz, clock = 32000000) 
131A:  CP0     W0
131C:  BTSC.B  42.1
131E:  BRA     1328
1320:  REPEAT  #3E7B
1322:  NOP     
1324:  DEC     W0,W0
1326:  BRA     NZ,1320
1328:  RETURN  
.................... #PIN_SELECT U1TX = PIN_B13 
.................... #PIN_SELECT U1RX = PIN_B12 
....................  
.................... #use rs232(UART1, baud = 9600, xmit = PIN_B13, rcv = PIN_B12) 
....................  
.................... #PIN_SELECT OC1 = PIN_B2 // DX02 
.................... #PIN_SELECT OC2 = PIN_B3 // DX03 
.................... #PIN_SELECT OC3 = PIN_B4 // DXI0  (PWM) 
.................... // #PIN_SELECT INT1 = PIN_B5 //DXI1  (Encoder) 
.................... // #PIN_SELECT INT2 = PIN_B6			// Pin output is connected to 
.................... // DXI2 
....................  
.................... int adc_data; 
.................... int percent_duty = 0; 
.................... long countPulse; 
.................... float timer3time = 0; 
.................... float volt = 0; 
.................... int x; 
.................... int tolerance = 35; 
.................... float K_p = 0.6; 
.................... float K_i = 0.05; 
.................... float K_d = 0.5; 
.................... int e = 0; 
.................... int s = 0; 
.................... int u = 0; 
.................... int p = 0; 
.................... int desired_value = 512; 
....................  
.................... // #INT_EXT1 
.................... // void INT_EXT_INPUT1(void) { 
.................... //   if (input(PIN_B6) == 0) { 
.................... //     countPulse--; 
.................... //   } else { 
.................... //     countPulse++; 
.................... //   } 
.................... // } 
....................  
.................... // int convertToDUTY(float voltage) { 
.................... //   int duty = abs(voltage) * 100 / 12; 
.................... //   return duty; 
.................... // } 
....................  
.................... void init_adc() { 
....................   setup_adc_ports(sAN3, VSS_VDD); 
*
0F28:  MOV     #FFF7,W4
0F2A:  MOV     W4,32C
0F2C:  CLR     322
....................   setup_adc(ADC_CLOCK); 
0F2E:  MOV     #1F00,W4
0F30:  MOV     W4,324
0F32:  MOV     #80E0,W4
0F34:  MOV     W4,320
....................   set_adc_channel(3); 
0F36:  MOV     #3,W4
0F38:  MOV     W4,328
....................   delay_us(10); 
0F3A:  REPEAT  #9E
0F3C:  NOP     
0F3E:  RETURN  
.................... } 
....................  
.................... int dutyPercentInput(int duty_percent) { 
*
0E46:  MOV     8EA,W0
0E48:  BTSS    W0.F
0E4A:  BRA     E52
0E4C:  MOV     #0,W4
0E4E:  MOV     8EA,W3
0E50:  SUB     W4,W3,W0
0E52:  MOV     W0,8EC
....................   int duty = abs(duty_percent); 
....................   if (duty > 100) { 
0E54:  MOV     8EC,W4
0E56:  MOV     #64,W3
0E58:  CP      W3,W4
0E5A:  BRA     GE,E60
....................     duty = 100; 
0E5C:  MOV     #64,W4
0E5E:  MOV     W4,8EC
....................   } 
....................   return duty; 
0E60:  PUSH    8EC
0E62:  POP     0
0E64:  RETURN  
.................... } 
....................  
.................... int getDirection(int duty_percent) { 
....................   int direction; 
....................   if (duty_percent > 0) { 
0E66:  MOV     8EC,W4
0E68:  CP      W4,#0
0E6A:  BRA     LE,E70
....................     direction = 0; 
0E6C:  CLR     8EE
....................   } else if (duty_percent < 0) { 
0E6E:  BRA     E80
0E70:  MOV     8EC,W4
0E72:  CP      W4,#0
0E74:  BRA     GE,E7C
....................     direction = 1; 
0E76:  MOV     #1,W4
0E78:  MOV     W4,8EE
....................   } else { 
0E7A:  BRA     E80
....................     direction = 2; 
0E7C:  MOV     #2,W4
0E7E:  MOV     W4,8EE
....................   } 
....................   return direction; 
0E80:  PUSH    8EE
0E82:  POP     0
0E84:  RETURN  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT1); 
*
0F22:  BSET.B  96.4
....................   ext_int_edge(1, L_TO_H); // Rising Edge 
0F24:  BCLR.B  82.1
0F26:  RETURN  
.................... } 
....................  
.................... #INT_TIMER2 
.................... void TIMER2_isr() { 
*
0E26:  PUSH    42
0E28:  PUSH    36
0E2A:  PUSH    32
0E2C:  MOV     W0,[W15++]
0E2E:  MOV     #2,W0
0E30:  REPEAT  #C
0E32:  MOV     [W0++],[W15++]
....................   // timer3time += 0.01; 
....................   // // Send time and voltage in milli for resolution's sake 
....................   // printf("%d", (int)(timer3time * 1000)); 
....................   // printf(","); 
....................   // printf("%d", countPulse); 
....................   // printf(","); 
....................   // printf("%d", dutyPercentInput(percent_duty)); 
....................   // printf("\n"); 
0E34:  BCLR.B  84.7
0E36:  MOV     #1A,W0
0E38:  REPEAT  #C
0E3A:  MOV     [--W15],[W0--]
0E3C:  MOV     [--W15],W0
0E3E:  POP     32
0E40:  POP     36
0E42:  POP     42
0E44:  RETFIE  
.................... } 
....................  
.................... void init_Timer2() { 
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_256, 625); 
*
0F14:  CLR     110
0F16:  MOV     #271,W4
0F18:  MOV     W4,10C
0F1A:  MOV     #8030,W4
0F1C:  MOV     W4,110
....................   enable_interrupts(INT_TIMER2); 
0F1E:  BSET.B  94.7
0F20:  RETURN  
.................... } 
....................  
.................... void directional_drive(int direction, int driveduty) { 
*
0E86:  MOV     W5,[W15++]
....................   if (direction == 0) { // turn right 
0E88:  CP0     8EE
0E8A:  BRA     NZ,E98
....................     set_pwm_duty(1, 2 * driveduty); 
0E8C:  MOV     8F0,W4
0E8E:  MUL.UU  W4,#2,W0
0E90:  MOV     W0,W5
0E92:  MOV     W5,180
....................     set_pwm_duty(2, 0); 
0E94:  CLR     186
....................   } else if (direction == 1) { // turn left 
0E96:  BRA     EB4
0E98:  MOV     8EE,W4
0E9A:  CP      W4,#1
0E9C:  BRA     NZ,EAA
....................     set_pwm_duty(1, 0); 
0E9E:  CLR     180
....................     set_pwm_duty(2, 2 * driveduty); 
0EA0:  MOV     8F0,W4
0EA2:  MUL.UU  W4,#2,W0
0EA4:  MOV     W0,W5
0EA6:  MOV     W5,186
....................   } else if (direction == 2) { // stop 
0EA8:  BRA     EB4
0EAA:  MOV     8EE,W4
0EAC:  CP      W4,#2
0EAE:  BRA     NZ,EB4
....................     set_pwm_duty(1, 0); 
0EB0:  CLR     180
....................     set_pwm_duty(2, 0); 
0EB2:  CLR     186
....................   } 
0EB4:  MOV     [--W15],W5
0EB6:  RETURN  
.................... } 
....................  
.................... #INT_TIMER3 
.................... void TIMER3_ist() { 
0EB8:  PUSH    42
0EBA:  PUSH    36
0EBC:  PUSH    32
0EBE:  MOV     W0,[W15++]
0EC0:  MOV     #2,W0
0EC2:  REPEAT  #C
0EC4:  MOV     [W0++],[W15++]
0EC6:  PUSH    8D4
0EC8:  POP     8EA
0ECA:  CALL    E46
0ECE:  MOV     W0,8E2
0ED0:  PUSH    8D4
0ED2:  POP     8EC
0ED4:  CALL    E66
0ED8:  MOV     W0,8E4
....................   // volt = chirpSine(timer3time); 
....................  
....................   int duty = dutyPercentInput(u); 
....................   int dir = getDirection(u); 
....................   directional_drive(dir, duty); 
0EDA:  PUSH    8E4
0EDC:  POP     8EE
0EDE:  PUSH    8E2
0EE0:  POP     8F0
0EE2:  CALL    E86
....................   countPulse++; 
0EE6:  INC     08B4
0EE8:  BTSC.B  42.1
0EEA:  INC     08B6
....................   // timer3time += 0.0001; 
0EEC:  BCLR.B  85.0
0EEE:  MOV     #1A,W0
0EF0:  REPEAT  #C
0EF2:  MOV     [--W15],[W0--]
0EF4:  MOV     [--W15],W0
0EF6:  POP     32
0EF8:  POP     36
0EFA:  POP     42
0EFC:  RETFIE  
.................... } 
....................  
.................... void Drivemotor() { 
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); // Set frequency at 10 KHz 
0EFE:  CLR     112
0F00:  MOV     #C8,W4
0F02:  MOV     W4,10E
0F04:  MOV     #8010,W4
0F06:  MOV     W4,112
....................   enable_interrupts(INT_TIMER3); 
0F08:  BSET.B  95.0
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
0F0A:  MOV     #E,W4
0F0C:  MOV     W4,184
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
0F0E:  MOV     #E,W4
0F10:  MOV     W4,18A
0F12:  RETURN  
.................... } 
....................  
.................... void main() { 
*
132A:  MOV     #2780,W15
132C:  MOV     #27FF,W0
132E:  MOV     W0,20
1330:  NOP     
1332:  MOV     #4444,W0
1334:  MOV     W0,A6
1336:  BSET.B  81.7
1338:  MOV     #46,W0
133A:  MOV.B   W0L,742
133C:  MOV     #57,W0
133E:  MOV.B   W0L,742
1340:  BCLR.B  742.6
1342:  MOV     #3F0C,W0
1344:  MOV     W0,6A4
1346:  MOV     #1312,W0
1348:  MOV     W0,6C2
134A:  MOV     #14,W0
134C:  MOV     W0,6C4
134E:  MOV     #300,W0
1350:  MOV     W0,6CC
1352:  MOV     #46,W0
1354:  MOV.B   W0L,742
1356:  MOV     #57,W0
1358:  MOV.B   W0L,742
135A:  BSET.B  742.6
135C:  CLR     744
135E:  MOV     #8000,W4
1360:  MOV     W4,220
1362:  MOV     #400,W4
1364:  MOV     W4,222
1366:  BSET.B  220.3
1368:  MOV     #1A0,W4
136A:  MOV     W4,228
136C:  CLR     8B2
136E:  CLR     8B8
1370:  CLR     8BA
1372:  CLR     8BC
1374:  CLR     8BE
1376:  MOV     #23,W4
1378:  MOV     W4,8C2
137A:  MOV     #999A,W4
137C:  MOV     W4,8C4
137E:  MOV     #3F19,W4
1380:  MOV     W4,8C6
1382:  MOV     #CCCD,W4
1384:  MOV     W4,8C8
1386:  MOV     #3D4C,W4
1388:  MOV     W4,8CA
138A:  CLR     8CC
138C:  MOV     #3F00,W4
138E:  MOV     W4,8CE
1390:  CLR     8D0
1392:  CLR     8D2
1394:  CLR     8D4
1396:  CLR     8D6
1398:  MOV     #200,W4
139A:  MOV     W4,8D8
139C:  SETM    32C
139E:  BRA     1434
13A0:  DATA    C0,06,08
13A2:  DATA    00,00,00
13A4:  DATA    4B,F0,3F
13A6:  DATA    5C,0A,58
13A8:  DATA    F6,3B,8F
13AA:  DATA    00,C0,3C
13AC:  DATA    8B,28,AC
13AE:  DATA    3C,BE,F6
13B0:  DATA    3F,D2,D5
13B2:  DATA    44,16,8C
13B4:  DATA    15,D7,BF
13B6:  DATA    69,00,5A
13B8:  DATA    2E,1B,87
13BA:  DATA    99,3F,9A
13BC:  DATA    5F,AD,4B
13BE:  DATA    91,E4,01
13C0:  DATA    C0,5D,11
13C2:  DATA    2F,92,E4
13C4:  DATA    81,FB,3F
13C6:  DATA    38,DA,91
13C8:  DATA    80,9D,C5
13CA:  DATA    E0,BF,6F
13CC:  DATA    12,C0,B4
13CE:  DATA    C3,09,AB
13D0:  DATA    3F,6B,C1
13D2:  DATA    03,4E,C1
13D4:  DATA    B5,45,BF
13D6:  DATA    F7,40,05
13D8:  DATA    FF,00,5A
13DA:  DATA    EF,3F,F3
13DC:  DATA    A3,E2,F7
13DE:  DATA    D7,FF,01
13E0:  DATA    40,C0,B4
13E2:  DATA    FF,05,3C
13E4:  DATA    58,FC,3F
13E6:  DATA    3B,D3,C0
13E8:  DATA    B5,BA,8C
13EA:  DATA    E2,3F,39
13EC:  DATA    D3,C7,3D
13EE:  DATA    41,79,B2
13F0:  DATA    3F,87,0D
13F2:  DATA    3C,50,D0
13F4:  DATA    AF,62,3F
13F6:  DATA    30,4B,8D
13F8:  DATA    A2,82,AA
13FA:  DATA    04,40,09
13FC:  DATA    A0,40,4A
13FE:  DATA    05,76,03
1400:  DATA    40,EC,9E
1402:  DATA    37,88,A6
1404:  DATA    44,F0,3F
1406:  DATA    8F,12,8D
1408:  DATA    29,9A,5B
140A:  DATA    C7,3F,0E
140C:  DATA    E0,80,7C
140E:  DATA    A1,D8,86
1410:  DATA    3F,29,4B
1412:  DATA    FB,95,C2
1414:  DATA    37,1A,3F
1416:  DATA    00,00,00
1418:  INC     W2,W2
141A:  CP      W2,#1
141C:  BRA     NZ,1426
141E:  TBLRDL  [W1],W3
1420:  TBLRDH  [W1++],W4
1422:  MOV.B   6,W0L
1424:  RETURN  
1426:  CP      W2,#2
1428:  BRA     NZ,142E
142A:  MOV.B   7,W0L
142C:  RETURN  
142E:  MOV.B   8,W0L
1430:  CLR     W2
1432:  RETURN  
1434:  MOV     #0,W6
1436:  MOV     #0,W0
1438:  MOV     W0,32
143A:  MOV     #13A0,W0
143C:  MOV     W0,W1
143E:  CLR     W2
1440:  CALL    1418
1444:  MOV.B   W0L,B
1446:  CALL    1418
144A:  MOV.B   W0L,A
144C:  CP0     W5
144E:  BRA     Z,1482
1450:  BTSS    W5.F
1452:  BRA     1462
1454:  CALL    1418
1458:  MOV.B   W0L,D
145A:  CALL    1418
145E:  MOV.B   W0L,C
1460:  BCLR    W5.F
1462:  BTSS    W5.E
1464:  BRA     1476
1466:  BCLR    W5.E
1468:  DEC     W5,W5
146A:  CALL    1418
146E:  MOV.B   W0L,W7L
1470:  REPEAT  W5
1472:  MOV.B   W7L,[W6++]
1474:  BRA     1440
1476:  CALL    1418
147A:  MOV.B   W0L,[W6++]
147C:  DEC     W5,W5
147E:  BRA     NZ,1476
1480:  BRA     1440
....................   countPulse = 0; 
1482:  CLR     8B4
1484:  CLR     8B6
....................   timer3time = 0; 
1486:  CLR     8B8
1488:  CLR     8BA
....................   disable_interrupts(GLOBAL); 
148A:  BCLR.B  81.7
148C:  MOV     #E0,W4
148E:  MOV     W4,42
1490:  BSET.B  81.7
....................   Drivemotor(); 
1492:  CALL    EFE
....................   Init_Timer2(); 
1496:  CALL    F14
....................   Init_Interrupts(); 
149A:  CALL    F22
....................   enable_interrupts(GLOBAL); 
149E:  BCLR.B  81.7
14A0:  CLR     42
14A2:  BSET.B  81.7
....................  
....................   init_adc(); 
14A4:  CALL    F28
....................   adc_data = 0; 
14A8:  CLR     8B0
....................   while (TRUE) { 
....................  
....................     adc_data = read_adc(); 
14AA:  BCLR.B  320.0
14AC:  BSET.B  320.1
14AE:  BTSS.B  320.0
14B0:  BRA     14AE
14B2:  PUSH    300
14B4:  POP     8B0
....................     e = desired_value - adc_data; 
14B6:  MOV     8D8,W4
14B8:  MOV     8B0,W3
14BA:  SUB     W4,W3,W0
14BC:  MOV     W0,8D0
....................     s = s + e; 
14BE:  MOV     8D2,W0
14C0:  ADD     8D0,W0
14C2:  MOV     W0,8D2
....................     if (abs(e) > tolerance) { 
14C4:  MOV     8D0,W0
14C6:  BTSS    W0.F
14C8:  BRA     14D0
14CA:  MOV     #0,W4
14CC:  MOV     8D0,W3
14CE:  SUB     W4,W3,W0
14D0:  MOV     W0,W5
14D2:  MOV     8C2,W4
14D4:  CP      W4,W5
14D6:  BRA     GE,153E
....................       u = K_p * e + K_i * s + K_d * (e - p); 
14D8:  MOV     8D0,W0
14DA:  CALL    F40
14DE:  MOV     W0,W2
14E0:  MOV     W1,W3
14E2:  MOV     8C4,W0
14E4:  MOV     8C6,W1
14E6:  CALL    F8A
14EA:  MOV     W0,W5
14EC:  MOV     W1,W6
14EE:  MOV     8D2,W0
14F0:  CALL    F40
14F4:  MOV     W0,W2
14F6:  MOV     W1,W3
14F8:  MOV     8C8,W0
14FA:  MOV     8CA,W1
14FC:  CALL    F8A
1500:  BCLR.B  43.0
1502:  MOV     W0,W2
1504:  MOV     W1,W3
1506:  MOV     W5,W0
1508:  MOV     W6,W1
150A:  CALL    104E
150E:  MOV     W0,W5
1510:  MOV     W1,W6
1512:  MOV     8D0,W4
1514:  MOV     8D6,W3
1516:  SUB     W4,W3,W0
1518:  CALL    F40
151C:  MOV     W0,W2
151E:  MOV     W1,W3
1520:  MOV     8CC,W0
1522:  MOV     8CE,W1
1524:  CALL    F8A
1528:  BCLR.B  43.0
152A:  MOV     W0,W2
152C:  MOV     W1,W3
152E:  MOV     W5,W0
1530:  MOV     W6,W1
1532:  CALL    104E
1536:  CALL    11F8
153A:  MOV     W0,8D4
....................     } else { 
153C:  BRA     1540
....................       u = 0; 
153E:  CLR     8D4
....................     } 
....................     p = e; 
1540:  PUSH    8D0
1542:  POP     8D6
....................       printf("AN3: %d\r\n", read_adc()); 
1544:  BCLR.B  320.0
1546:  BSET.B  320.1
1548:  BTSS.B  320.0
154A:  BRA     1548
154C:  MOV     300,W5
154E:  MOV     #0,W1
1550:  MOV     W1,W0
1552:  CLR.B   1
1554:  CALL    DFC
1558:  INC     W1,W1
155A:  BTSC.B  223.1
155C:  BRA     155A
155E:  MOV     W0,224
1560:  MOV     #4,W0
1562:  CPSGT   W1,W0
1564:  BRA     1550
1566:  MOV     W5,W0
1568:  MOV     #0,W4
156A:  CALL    1224
156E:  BTSC.B  223.1
1570:  BRA     156E
1572:  MOV     #D,W4
1574:  MOV     W4,224
1576:  BTSC.B  223.1
1578:  BRA     1576
157A:  MOV     #A,W4
157C:  MOV     W4,224
....................       printf("U = %d\n", u); 
157E:  MOV     #0,W1
1580:  MOV     W1,W0
1582:  CLR.B   1
1584:  CALL    E12
1588:  INC     W1,W1
158A:  BTSC.B  223.1
158C:  BRA     158A
158E:  MOV     W0,224
1590:  MOV     #3,W0
1592:  CPSGT   W1,W0
1594:  BRA     1580
1596:  MOV     8D4,W0
1598:  MOV     #0,W4
159A:  CALL    1224
159E:  BTSC.B  223.1
15A0:  BRA     159E
15A2:  MOV     #A,W4
15A4:  MOV     W4,224
....................     delay_ms(50); 
15A6:  MOV     #32,W0
15A8:  CALL    131A
15AC:  BRA     14AA
....................   } 
.................... } 
15AE:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
