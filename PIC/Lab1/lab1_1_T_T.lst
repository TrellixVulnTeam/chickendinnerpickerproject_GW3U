CCS PCD C Compiler, Version 5.015, 5967               28-Sep-18 01:22

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\Lab1\lab1_1_T_T.lst

               ROM used:   2450 bytes (7%)
                           Largest free fragment is 28266
               RAM used:   130 (2%) at main() level
                           185 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    14EE
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    64,75,00
0E0A:  DATA    74,79,00
0E0C:  DATA    20,63,00
0E0E:  DATA    79,63,00
0E10:  DATA    6C,65,00
0E12:  DATA    3A,20,00
0E14:  DATA    25,64,00
0E16:  DATA    00,00,00
0E18:  CLR     32
0E1A:  MOV     #E24,W3
0E1C:  ADD     W3,W0,W0
0E1E:  TBLRDL.B[W0],W0L
0E20:  CLR.B   1
0E22:  RETURN  
0E24:  DATA    66,72,00
0E26:  DATA    65,71,00
0E28:  DATA    75,65,00
0E2A:  DATA    6E,63,00
0E2C:  DATA    79,3A,00
0E2E:  DATA    20,25,00
0E30:  DATA    64,00,00
0E32:  MOV     W5,[W15++]
0E34:  MOV     #C,W5
0E36:  REPEAT  #3
0E38:  MOV     [W5++],[W15++]
0E3A:  MOV     W0,W4
0E3C:  MOV     W1,W5
0E3E:  MOV     W2,W6
0E40:  MOV     W3,W7
0E42:  CLR     W0
0E44:  CLR     W1
0E46:  CLR     W2
0E48:  CLR     W3
0E4A:  BCLR    W8.0
0E4C:  BTSS    W7.F
0E4E:  BRA     E5A
0E50:  BSET    W8.0
0E52:  NEG     W4,W4
0E54:  COM     W5,W5
0E56:  COM     W6,W6
0E58:  COM     W7,W7
0E5A:  IOR      W4,  W5,W9
0E5C:  BRA     NZ,E62
0E5E:  IOR      W6,  W7,W9
0E60:  BRA     Z,E8C
0E62:  MOV     #473,W9
0E64:  BTSC    W3.4
0E66:  BRA     E7E
0E68:  BCLR.B  42.0
0E6A:  RLC     W4,W4
0E6C:  RLC     W5,W5
0E6E:  RLC     W6,W6
0E70:  RLC     W7,W7
0E72:  RLC     W0,W0
0E74:  RLC     W1,W1
0E76:  RLC     W2,W2
0E78:  RLC     W3,W3
0E7A:  DEC     W9,W9
0E7C:  BRA     NZ,E64
0E7E:  SL      W9,#4,W9
0E80:  BCLR.B  42.0
0E82:  BCLR    W9.F
0E84:  BCLR    W3.4
0E86:  XOR     W9,W3,W3
0E88:  BTSC    W8.0
0E8A:  BSET    W3.F
0E8C:  MOV     #12,W5
0E8E:  REPEAT  #3
0E90:  MOV     [--W15],[W5--]
0E92:  MOV     [--W15],W5
0E94:  RETURN  
0E96:  MOV     W8,[W15++]
0E98:  MOV     W9,[W15++]
0E9A:  MOV     W10,[W15++]
0E9C:  XOR     W3,W7,W9
0E9E:  BTSS    W9.F
0EA0:  BRA     EAE
0EA2:  BCLR.B  42.0
0EA4:  BCLR.B  42.1
0EA6:  BTSS    W3.F
0EA8:  BRA     F12
0EAA:  BSET.B  42.0
0EAC:  BRA     F12
0EAE:  MOV     #7FF,W10
0EB0:  MOV     W3,W8
0EB2:  MOV     W7,W9
0EB4:  ASR     W8,#4,W8
0EB6:  AND     W10,W8,W8
0EB8:  ASR     W9,#4,W9
0EBA:  AND     W10,W9,W9
0EBC:  SUB     W9,W8,W10
0EBE:  BRA     Z,ECA
0EC0:  BTSS    W3.F
0EC2:  BRA     F12
0EC4:  MOV     #1,W0
0EC6:  XOR.B   42
0EC8:  BRA     F12
0ECA:  MOV     W3,W8
0ECC:  MOV     W7,W9
0ECE:  AND     #1F,W3
0ED0:  AND     #1F,W7
0ED2:  BCLR    W3.4
0ED4:  BCLR    W7.4
0ED6:  SUB.B   W7L,W3L,W10L
0ED8:  BRA     Z,EE4
0EDA:  BTSS    W8.F
0EDC:  BRA     F12
0EDE:  MOV     #1,W0
0EE0:  XOR.B   42
0EE2:  BRA     F12
0EE4:  SUB     W6,W2,W10
0EE6:  BRA     Z,EF2
0EE8:  BTSS    W8.F
0EEA:  BRA     F12
0EEC:  MOV     #1,W0
0EEE:  XOR.B   42
0EF0:  BRA     F12
0EF2:  SUB     W5,W1,W10
0EF4:  BRA     Z,F00
0EF6:  BTSS    W8.F
0EF8:  BRA     F12
0EFA:  MOV     #1,W0
0EFC:  XOR.B   42
0EFE:  BRA     F12
0F00:  SUB     W4,W0,W10
0F02:  BRA     Z,F0E
0F04:  BTSS    W8.F
0F06:  BRA     F12
0F08:  MOV     #1,W0
0F0A:  XOR.B   42
0F0C:  BRA     F12
0F0E:  BCLR.B  42.0
0F10:  BRA     F12
0F12:  MOV     [--W15],W10
0F14:  MOV     [--W15],W9
0F16:  MOV     [--W15],W8
0F18:  RETURN  
0F1A:  MOV     W8,[W15++]
0F1C:  MOV     #12,W8
0F1E:  REPEAT  #4
0F20:  MOV     [W8++],[W15++]
0F22:  XOR     W3,W7,W13
0F24:  MOV     W3,W8
0F26:  MOV     W7,W9
0F28:  MOV     #7FF,W10
0F2A:  BCLR.B  42.0
0F2C:  BCLR.B  42.1
0F2E:  ASR     W8,#4,W8
0F30:  AND     W10,W8,W8
0F32:  CP0     W8
0F34:  BRA     Z,100E
0F36:  BCLR.B  42.0
0F38:  BCLR.B  42.1
0F3A:  ASR     W9,#4,W9
0F3C:  AND     W10,W9,W9
0F3E:  CP0     W9
0F40:  BRA     Z,100E
0F42:  CLR     W10
0F44:  SUB     W8,W9,W12
0F46:  BRA     NC,F4E
0F48:  ADD     #3FF,W12
0F4A:  BRA     C,100E
0F4C:  BRA     F56
0F4E:  MOV     #401,W11
0F50:  SUB     W12,W11,W12
0F52:  BRA     NC,100E
0F54:  BRA     Z,100E
0F56:  CLR     W8
0F58:  CLR     W9
0F5A:  CLR     W10
0F5C:  CLR     W11
0F5E:  AND     #1F,W3
0F60:  BSET    W3.4
0F62:  AND     #1F,W7
0F64:  BSET    W7.4
0F66:  MOV     W12,[W15++]
0F68:  MOV     #36,W12
0F6A:  SUB     W0,W4,W0
0F6C:  SUBB    W1,W5,W1
0F6E:  SUBB    W2,W6,W2
0F70:  SUBB    W3,W7,W3
0F72:  BRA     N,F78
0F74:  BRA     C,F82
0F76:  BRA     NZ,F84
0F78:  ADD     W0,W4,W0
0F7A:  ADDC    W1,W5,W1
0F7C:  ADDC    W2,W6,W2
0F7E:  ADDC    W3,W7,W3
0F80:  BRA     F84
0F82:  BSET    W8.0
0F84:  DEC     W12,W12
0F86:  BRA     Z,F9E
0F88:  BCLR.B  42.0
0F8A:  RLC     W0,W0
0F8C:  RLC     W1,W1
0F8E:  RLC     W2,W2
0F90:  RLC     W3,W3
0F92:  BCLR.B  42.0
0F94:  RLC     W8,W8
0F96:  RLC     W9,W9
0F98:  RLC     W10,W10
0F9A:  RLC     W11,W11
0F9C:  BRA     F6A
0F9E:  MOV     [--W15],W12
0FA0:  BTSC    W11.5
0FA2:  BRA     FA6
0FA4:  BRA     FB2
0FA6:  BCLR.B  42.0
0FA8:  RRC     W11,W11
0FAA:  RRC     W10,W10
0FAC:  RRC     W9,W9
0FAE:  RRC     W8,W8
0FB0:  BRA     FB8
0FB2:  DEC     W12,W12
0FB4:  BCLR.B  42.0
0FB6:  BRA     Z,100E
0FB8:  BTSC.B  42.0
0FBA:  BRA     FCE
0FBC:  RLC     W0,W0
0FBE:  RLC     W1,W1
0FC0:  RLC     W2,W2
0FC2:  RLC     W3,W3
0FC4:  SUB     W0,W4,W4
0FC6:  SUBB    W1,W5,W5
0FC8:  SUBB    W2,W6,W6
0FCA:  SUBB    W3,W7,W7
0FCC:  BRA     NC,FF8
0FCE:  INC     W8,W8
0FD0:  BRA     NZ,FF8
0FD2:  INC     W9,W9
0FD4:  BRA     NZ,FF8
0FD6:  INC     W10,W10
0FD8:  BRA     NZ,FF8
0FDA:  INC     W11,W11
0FDC:  BRA     NZ,FF8
0FDE:  INC     W12,W12
0FE0:  BRA     Z,100E
0FE2:  BRA     FF8
0FE4:  DEC     W12,W12
0FE6:  BRA     Z,100E
0FE8:  BTSC    W11.4
0FEA:  BRA     FF8
0FEC:  BCLR.B  42.0
0FEE:  RLC     W8,W8
0FF0:  RLC     W9,W9
0FF2:  RLC     W10,W10
0FF4:  RLC     W11,W11
0FF6:  BRA     FE8
0FF8:  SL      W12,#4,W12
0FFA:  BCLR.B  42.0
0FFC:  BCLR    W12.F
0FFE:  BTSC    W13.F
1000:  BSET    W12.F
1002:  BCLR    W11.4
1004:  XOR     W12,W11,W3
1006:  MOV     W10,W2
1008:  MOV     W9,W1
100A:  MOV     W8,W0
100C:  BRA     1018
100E:  MOV     #0,W0
1010:  MOV     #0,W1
1012:  MOV     #0,W2
1014:  MOV     #0,W3
1016:  BRA     1018
1018:  MOV     #1A,W8
101A:  REPEAT  #4
101C:  MOV     [--W15],[W8--]
101E:  MOV     [--W15],W8
1020:  RETURN  
*
10B8:  MOV     W5,[W15++]
10BA:  MOV     #C,W5
10BC:  REPEAT  #5
10BE:  MOV     [W5++],[W15++]
10C0:  MOV     W3,W8
10C2:  MOV     W2,W7
10C4:  MOV     W1,W6
10C6:  MOV     W0,W5
10C8:  MOV     W3,W9
10CA:  MOV     #473,W11
10CC:  ASR     W3,#4,W3
10CE:  MOV     #7FF,W10
10D0:  AND     W10,W3,W3
10D2:  SUB     W11,W3,W11
10D4:  AND     #1F,W8
10D6:  BSET    W8.4
10D8:  CLR     W0
10DA:  CLR     W1
10DC:  CLR     W2
10DE:  CLR     W3
10E0:  BCLR.B  42.0
10E2:  RRC     W8,W8
10E4:  RRC     W7,W7
10E6:  RRC     W6,W6
10E8:  RRC     W5,W5
10EA:  RRC     W3,W3
10EC:  RRC     W2,W2
10EE:  RRC     W1,W1
10F0:  RRC     W0,W0
10F2:  DEC     W11,W11
10F4:  BRA     NZ,10E0
10F6:  BTSS    W9.F
10F8:  BRA     1104
10FA:  NEG     W0,W0
10FC:  COM     W1,W1
10FE:  COM     W2,W2
1100:  COM     W3,W3
1102:  BRA     1104
1104:  MOV     #16,W5
1106:  REPEAT  #5
1108:  MOV     [--W15],[W5--]
110A:  MOV     [--W15],W5
110C:  RETURN  
110E:  MOV     W8,[W15++]
1110:  MOV     #12,W8
1112:  REPEAT  #4
1114:  MOV     [W8++],[W15++]
1116:  CLR     W11
1118:  MUL.UU  W12,#0,W12
111A:  MOV     W3,W8
111C:  MOV     W7,W9
111E:  MOV     #7FF,W10
1120:  BCLR.B  42.0
1122:  BCLR.B  42.1
1124:  ASR     W8,#4,W8
1126:  AND     W10,W8,W8
1128:  CP0     W8
112A:  BRA     Z,120E
112C:  BCLR.B  42.0
112E:  BCLR.B  42.1
1130:  ASR     W9,#4,W9
1132:  AND     W10,W9,W9
1134:  CP0     W9
1136:  BRA     Z,120E
1138:  ADD     W9,W8,W8
113A:  BTSC    W9.B
113C:  BRA     1146
113E:  SUB     #3FF,W8
1140:  BRA     Z,120E
1142:  BRA     NC,120E
1144:  BRA     114C
1146:  MOV     #401,W10
1148:  ADD.B   W10L,W5L,W5L
114A:  BRA     C,120E
114C:  XOR     W3,W7,W13
114E:  BCLR.B  42.0
1150:  BCLR.B  42.1
1152:  AND     #F,W3
1154:  BSET    W3.4
1156:  AND     #F,W7
1158:  BSET    W7.4
115A:  MOV     W8,[W15++]
115C:  MUL.UU  W4,W1,W8
115E:  MUL.UU  W5,W0,W10
1160:  ADD     W8,W10,W10
1162:  ADDC    W9,W11,W11
1164:  ADDC    #0,W12
1166:  MUL.UU  W4,W2,W8
1168:  ADD     W8,W11,W11
116A:  ADDC    W9,W12,W12
116C:  MUL.UU  W5,W1,W8
116E:  CLR     W10
1170:  ADD     W8,W11,W11
1172:  ADDC    W9,W12,W12
1174:  ADDC    #0,W10
1176:  MUL.UU  W6,W0,W8
1178:  ADD     W8,W11,W11
117A:  ADDC    W9,W12,W12
117C:  ADDC    #0,W10
117E:  CLR     W11
1180:  MUL.UU  W4,W3,W8
1182:  ADD     W8,W12,W12
1184:  ADDC    W9,W10,W10
1186:  ADDC    #0,W11
1188:  MUL.UU  W5,W2,W8
118A:  ADD     W8,W12,W12
118C:  ADDC    W9,W10,W10
118E:  ADDC    #0,W11
1190:  MUL.UU  W6,W1,W8
1192:  ADD     W8,W12,W12
1194:  ADDC    W9,W10,W10
1196:  ADDC    #0,W11
1198:  MUL.UU  W7,W0,W8
119A:  ADD     W8,W12,W12
119C:  ADDC    W9,W10,W10
119E:  ADDC    #0,W11
11A0:  MOV     W12,W0
11A2:  CLR     W12
11A4:  MUL.UU  W5,W3,W8
11A6:  ADD     W8,W10,W10
11A8:  ADDC    W9,W11,W11
11AA:  ADDC    #0,W12
11AC:  MUL.UU  W6,W2,W8
11AE:  ADD     W8,W10,W10
11B0:  ADDC    W9,W11,W11
11B2:  ADDC    #0,W12
11B4:  MUL.UU  W6,W3,W8
11B6:  ADD     W8,W11,W11
11B8:  ADDC    W9,W12,W12
11BA:  MUL.UU  W7,W1,W8
11BC:  ADD     W8,W10,W10
11BE:  ADDC    W9,W11,W11
11C0:  ADDC    #0,W12
11C2:  MUL.UU  W7,W2,W8
11C4:  ADD     W8,W11,W11
11C6:  ADDC    W9,W12,W12
11C8:  MUL.UU  W7,W3,W8
11CA:  ADD     W8,W12,W12
11CC:  MOV     W10,W1
11CE:  MOV     W11,W2
11D0:  MOV     W12,W3
11D2:  MOV     #5,W4
11D4:  BCLR.B  42.0
11D6:  RRC     W3,W3
11D8:  RRC     W2,W2
11DA:  RRC     W1,W1
11DC:  RRC     W0,W0
11DE:  DEC     W4,W4
11E0:  BRA     NZ,11D4
11E2:  MOV     [--W15],W8
11E4:  INC     W8,W8
11E6:  IOR      W0,  W1,W6
11E8:  BRA     Z,11EC
11EA:  BRA     11F0
11EC:  IOR      W2,  W3,W6
11EE:  BRA     Z,1200
11F0:  BTSC    W3.4
11F2:  BRA     1200
11F4:  BCLR.B  42.0
11F6:  RLC     W0,W0
11F8:  RLC     W1,W1
11FA:  RLC     W2,W2
11FC:  RLC     W3,W3
11FE:  DEC     W8,W8
1200:  SL      W8,#4,W8
1202:  BCLR    W3.F
1204:  BTSC    W13.F
1206:  BSET    W3.F
1208:  BCLR    W3.4
120A:  XOR     W8,W3,W3
120C:  BRA     1214
120E:  MUL.UU  W0,#0,W0
1210:  MUL.UU  W0,#0,W2
1212:  BRA     1214
1214:  MOV     #1A,W8
1216:  REPEAT  #4
1218:  MOV     [--W15],[W8--]
121A:  MOV     [--W15],W8
121C:  RETURN  
121E:  MOV     W5,[W15++]
1220:  MOV     #C,W5
1222:  REPEAT  #3
1224:  MOV     [W5++],[W15++]
1226:  BTSS    W0.F
1228:  BRA     1242
122A:  NEG     W0,W0
122C:  BSET    W4.8
122E:  BTSS    W4.F
1230:  BRA     1242
1232:  MOV     W0,[W15++]
1234:  MOV     #2D,W0
1236:  BTSC.B  223.1
1238:  BRA     1236
123A:  MOV     W0,224
123C:  MOV     [--W15],W0
123E:  BCLR    W4.8
1240:  DEC.B   0008
1242:  CLR     W5
1244:  MOV     W0,W7
1246:  MOV     W4,W9
1248:  BCLR    W4.F
124A:  CP0.B   W4L
124C:  BRA     NZ,125A
124E:  BTSC    W9.F
1250:  BRA     1256
1252:  MOV     #0,W5
1254:  BRA     1274
1256:  MOV     #0,W5
1258:  BRA     1274
125A:  SUB.B   W4L,#6,W5L
125C:  BRA     NC,1272
125E:  MOV     #30,W0
1260:  BTSS    W9.F
1262:  MOV     #20,W0
1264:  BTSC.B  223.1
1266:  BRA     1264
1268:  MOV     W0,224
126A:  DEC     W5,W5
126C:  BRA     NN,1264
126E:  MOV     #5,W5
1270:  BRA     1274
1272:  MOV     W4,W5
1274:  MOV     #6,W4
1276:  BTSC    W5.8
1278:  INC     W4,W4
127A:  BSET    W5.E
127C:  BTSC    W9.F
127E:  BSET    W5.F
1280:  MOV     #2710,W8
1282:  REPEAT  #11
1284:  DIV.U   W7,W8
1286:  CALL    12CA
128A:  MOV     W1,W7
128C:  MOV     #3E8,W8
128E:  REPEAT  #11
1290:  DIV.U   W7,W8
1292:  CALL    12CA
1296:  MOV     W1,W7
1298:  MOV     #64,W8
129A:  REPEAT  #11
129C:  DIV.U   W7,W8
129E:  CALL    12CA
12A2:  MOV     W1,W7
12A4:  MOV     #A,W8
12A6:  REPEAT  #11
12A8:  DIV.U   W7,W8
12AA:  CALL    12CA
12AE:  BTSS    W9.8
12B0:  BRA     12BC
12B2:  MOV     #2D,W0
12B4:  BTSC.B  223.1
12B6:  BRA     12B4
12B8:  MOV     W0,224
12BA:  BCLR    W9.8
12BC:  MOV     #30,W0
12BE:  ADD.B   W1L,W0L,W0L
12C0:  MOV     W0,2A
12C2:  BTSC.B  223.1
12C4:  BRA     12C2
12C6:  MOV     W0,224
12C8:  BRA     130A
12CA:  MOV     #30,W6
12CC:  CP0     W0
12CE:  BRA     NZ,12EC
12D0:  BTSS    W5.E
12D2:  BRA     1300
12D4:  DEC     W4,W4
12D6:  CP.B    W4L,W5L
12D8:  BRA     Z,12DE
12DA:  BTSC.B  42.0
12DC:  RETURN  
12DE:  CP0     W0
12E0:  BRA     NZ,12EC
12E2:  BTSS    W5.E
12E4:  BRA     1300
12E6:  BTSS    W5.F
12E8:  MOV     #20,W6
12EA:  BRA     1300
12EC:  BCLR    W5.E
12EE:  BTSS    W9.8
12F0:  BRA     1300
12F2:  MOV     W0,W10
12F4:  MOV     #2D,W0
12F6:  BTSC.B  223.1
12F8:  BRA     12F6
12FA:  MOV     W0,224
12FC:  BCLR    W9.8
12FE:  MOV     W10,W0
1300:  ADD.B   W6L,W0L,W0L
1302:  BTSC.B  223.1
1304:  BRA     1302
1306:  MOV     W0,224
1308:  RETURN  
130A:  MOV     #12,W5
130C:  REPEAT  #3
130E:  MOV     [--W15],[W5--]
1310:  MOV     [--W15],W5
1312:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay (internal = 8MHz, clock = 32MHz) 
.................... #PIN_SELECT U1TX = PIN_B13 
.................... #PIN_SELECT U1RX = PIN_B12 
.................... #use rs232(UART1, baud = 115200, xmit = PIN_B13, rcv = PIN_B12) 
....................  
.................... #PIN_SELECT OC1 = PIN_B2 
.................... #PIN_SELECT INT1 = PIN_B5 //DXI1  (Encoder) 
.................... #PIN_SELECT INT2 = PIN_B6 
....................  
.................... double frequency(double f){ 
*
1022:  MOV     W5,[W15++]
1024:  MOV     W6,[W15++]
1026:  MOV     W7,[W15++]
.................... 	double frequency; 
.................... 	//set frequency by ((32M/2)/8)/frequency = clock 
.................... 	if (f == 1){ 
1028:  MOV     822,W0
102A:  MOV     824,W1
102C:  MOV     826,W2
102E:  MOV     828,W3
1030:  MOV     #0,W4
1032:  MOV     #0,W5
1034:  MOV     #0,W6
1036:  MOV     #3FF0,W7
1038:  CALL    E96
103C:  BRA     NZ,105C
.................... 		frequency = (((32000000/2)/256)/f); 
103E:  MOV     #0,W0
1040:  MOV     #0,W1
1042:  MOV     #8480,W2
1044:  MOV     #40EE,W3
1046:  MOV     822,W4
1048:  MOV     824,W5
104A:  MOV     826,W6
104C:  MOV     828,W7
104E:  CALL    F1A
1052:  MOV     W0,82A
1054:  MOV     W1,82C
1056:  MOV     W2,82E
1058:  MOV     W3,830
.................... 	} 
105A:  BRA     10A8
.................... 	else if(f >= 2 && f <= 10000){ 
105C:  MOV     #0,W0
105E:  MOV     #0,W1
1060:  MOV     #0,W2
1062:  MOV     #4000,W3
1064:  MOV     822,W4
1066:  MOV     824,W5
1068:  MOV     826,W6
106A:  MOV     828,W7
106C:  CALL    E96
1070:  BRA     C,1074
1072:  BRA     NZ,10A8
1074:  MOV     822,W0
1076:  MOV     824,W1
1078:  MOV     826,W2
107A:  MOV     828,W3
107C:  MOV     #0,W4
107E:  MOV     #0,W5
1080:  MOV     #8800,W6
1082:  MOV     #40C3,W7
1084:  CALL    E96
1088:  BRA     C,108C
108A:  BRA     NZ,10A8
.................... 		frequency = (((32000000/2)/8)/f); 
108C:  MOV     #0,W0
108E:  MOV     #0,W1
1090:  MOV     #8480,W2
1092:  MOV     #413E,W3
1094:  MOV     822,W4
1096:  MOV     824,W5
1098:  MOV     826,W6
109A:  MOV     828,W7
109C:  CALL    F1A
10A0:  MOV     W0,82A
10A2:  MOV     W1,82C
10A4:  MOV     W2,82E
10A6:  MOV     W3,830
.................... 	} 
.................... 	return frequency; 
10A8:  MOV     82A,W0
10AA:  MOV     82C,W1
10AC:  MOV     82E,W2
10AE:  MOV     830,W3
10B0:  MOV     [--W15],W7
10B2:  MOV     [--W15],W6
10B4:  MOV     [--W15],W5
10B6:  RETURN  
.................... } 
....................  
....................  
.................... int duty_cycle( int f, int d){ 
*
1314:  MOV     W5,[W15++]
1316:  MOV     W6,[W15++]
1318:  MOV     W7,[W15++]
131A:  MOV     W8,[W15++]
.................... 	//set duty cycle by (clock*duty)/100 = duty input 
.................... 	unsigned int duty_cycle; 
.................... 	duty_cycle = (int)((frequency(f)/100)*d); 
131C:  MOV     810,W0
131E:  CLR     W3
1320:  BTSC    W0.F
1322:  SETM    W3
1324:  MOV     W3,W1
1326:  MOV     W3,W2
1328:  CALL    E32
132C:  MOV     W0,W5
132E:  MOV     W1,W6
1330:  MOV     W2,W7
1332:  MOV     W3,W8
1334:  MOV     W5,822
1336:  MOV     W6,824
1338:  MOV     W7,826
133A:  MOV     W8,828
133C:  CALL    1022
1340:  MOV     W0,W5
1342:  MOV     W1,W6
1344:  MOV     W2,W7
1346:  MOV     W3,W8
1348:  MOV     W5,[W15++]
134A:  MOV     W6,[W15++]
134C:  MOV     W7,[W15++]
134E:  MOV     W5,W0
1350:  MOV     W6,W1
1352:  MOV     W7,W2
1354:  MOV     W8,W3
1356:  MOV     #0,W4
1358:  MOV     #0,W5
135A:  MOV     #0,W6
135C:  MOV     #4059,W7
135E:  CALL    F1A
1362:  MOV     [--W15],W7
1364:  MOV     [--W15],W6
1366:  MOV     [--W15],W5
1368:  MOV     W0,W5
136A:  MOV     W1,W6
136C:  MOV     W2,W7
136E:  MOV     W3,W8
1370:  MOV     812,W0
1372:  CLR     W3
1374:  BTSC    W0.F
1376:  SETM    W3
1378:  MOV     W3,W1
137A:  MOV     W3,W2
137C:  CALL    E32
1380:  MOV     W5,[W15++]
1382:  MOV     W6,[W15++]
1384:  MOV     W7,[W15++]
1386:  MOV     W0,W4
1388:  MOV     W5,W0
138A:  MOV     W1,W5
138C:  MOV     W6,W1
138E:  MOV     W2,W6
1390:  MOV     W7,W2
1392:  MOV     W3,W7
1394:  MOV     W8,W3
1396:  CALL    110E
139A:  MOV     [--W15],W7
139C:  MOV     [--W15],W6
139E:  MOV     [--W15],W5
13A0:  CALL    10B8
13A4:  MOV     W0,814
.................... 	printf("duty cycle: %d", duty_cycle); 
13A6:  MOV     #0,W1
13A8:  MOV     W1,W0
13AA:  CLR.B   1
13AC:  CALL    DFC
13B0:  INC     W1,W1
13B2:  BTSC.B  223.1
13B4:  BRA     13B2
13B6:  MOV     W0,224
13B8:  MOV     #B,W0
13BA:  CPSGT   W1,W0
13BC:  BRA     13A8
13BE:  MOV     814,W0
13C0:  MOV     #0,W4
13C2:  CALL    121E
.................... 	printf("frequency: %d", (int)frequency(f)); 
13C6:  MOV     810,W0
13C8:  CLR     W3
13CA:  BTSC    W0.F
13CC:  SETM    W3
13CE:  MOV     W3,W1
13D0:  MOV     W3,W2
13D2:  CALL    E32
13D6:  MOV     W0,W5
13D8:  MOV     W1,W6
13DA:  MOV     W2,W7
13DC:  MOV     W3,W8
13DE:  MOV     W5,822
13E0:  MOV     W6,824
13E2:  MOV     W7,826
13E4:  MOV     W8,828
13E6:  CALL    1022
13EA:  CALL    10B8
13EE:  MOV     W0,W5
13F0:  MOV     #0,W1
13F2:  MOV     W1,W0
13F4:  CLR.B   1
13F6:  CALL    E18
13FA:  INC     W1,W1
13FC:  BTSC.B  223.1
13FE:  BRA     13FC
1400:  MOV     W0,224
1402:  MOV     #A,W0
1404:  CPSGT   W1,W0
1406:  BRA     13F2
1408:  MOV     W5,W0
140A:  MOV     #0,W4
140C:  CALL    121E
.................... 	return duty_cycle; 
1410:  PUSH    814
1412:  POP     0
1414:  MOV     [--W15],W8
1416:  MOV     [--W15],W7
1418:  MOV     [--W15],W6
141A:  MOV     [--W15],W5
141C:  RETURN  
.................... } 
....................  
.................... void PWM( int f, int d){ 
141E:  MOV     W5,[W15++]
1420:  MOV     W6,[W15++]
1422:  MOV     W7,[W15++]
1424:  MOV     W8,[W15++]
.................... 	if (f == 1){ 
1426:  MOV     808,W4
1428:  CP      W4,#1
142A:  BRA     NZ,1482
.................... 		disable_interrupts(GLOBAL); 
142C:  BCLR.B  81.7
142E:  MOV     #E0,W4
1430:  MOV     W4,42
1432:  BSET.B  81.7
.................... 		setup_timer2(TMR_INTERNAL | TMR_DIV_BY_256,(int)frequency(f)); 
1434:  MOV     808,W0
1436:  CLR     W3
1438:  BTSC    W0.F
143A:  SETM    W3
143C:  MOV     W3,W1
143E:  MOV     W3,W2
1440:  CALL    E32
1444:  MOV     W0,W5
1446:  MOV     W1,W6
1448:  MOV     W2,W7
144A:  MOV     W3,W8
144C:  MOV     W5,822
144E:  MOV     W6,824
1450:  MOV     W7,826
1452:  MOV     W8,828
1454:  CALL    1022
1458:  CALL    10B8
145C:  MOV     W0,W5
145E:  CLR     110
1460:  MOV     W5,10C
1462:  MOV     #8030,W4
1464:  MOV     W4,110
.................... 		enable_interrupts(GLOBAL); 
1466:  BCLR.B  81.7
1468:  CLR     42
146A:  BSET.B  81.7
.................... 		setup_compare(1, COMPARE_PWM | COMPARE_TIMER2); 
146C:  MOV     #6,W4
146E:  MOV     W4,184
.................... 		set_pwm_duty(1, duty_cycle(f,d)); 
1470:  PUSH    808
1472:  POP     810
1474:  PUSH    80A
1476:  POP     812
1478:  CALL    1314
147C:  MOV     W0,W5
147E:  MOV     W5,180
.................... 	} 
1480:  BRA     14E4
.................... 	else if(f >= 2 && f <= 10000){ 
1482:  MOV     808,W4
1484:  CP      W4,#2
1486:  BRA     LT,14E4
1488:  MOV     808,W4
148A:  MOV     #2710,W3
148C:  CP      W3,W4
148E:  BRA     LT,14E4
.................... 		disable_interrupts(GLOBAL); 
1490:  BCLR.B  81.7
1492:  MOV     #E0,W4
1494:  MOV     W4,42
1496:  BSET.B  81.7
.................... 		setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8,(int)frequency(f)); 
1498:  MOV     808,W0
149A:  CLR     W3
149C:  BTSC    W0.F
149E:  SETM    W3
14A0:  MOV     W3,W1
14A2:  MOV     W3,W2
14A4:  CALL    E32
14A8:  MOV     W0,W5
14AA:  MOV     W1,W6
14AC:  MOV     W2,W7
14AE:  MOV     W3,W8
14B0:  MOV     W5,822
14B2:  MOV     W6,824
14B4:  MOV     W7,826
14B6:  MOV     W8,828
14B8:  CALL    1022
14BC:  CALL    10B8
14C0:  MOV     W0,W5
14C2:  CLR     110
14C4:  MOV     W5,10C
14C6:  MOV     #8010,W4
14C8:  MOV     W4,110
.................... 		enable_interrupts(GLOBAL); 
14CA:  BCLR.B  81.7
14CC:  CLR     42
14CE:  BSET.B  81.7
.................... 		setup_compare(1, COMPARE_PWM | COMPARE_TIMER2); 
14D0:  MOV     #6,W4
14D2:  MOV     W4,184
.................... 		set_pwm_duty(1, duty_cycle(f,d)); 
14D4:  PUSH    808
14D6:  POP     810
14D8:  PUSH    80A
14DA:  POP     812
14DC:  CALL    1314
14E0:  MOV     W0,W5
14E2:  MOV     W5,180
.................... 	} 
14E4:  MOV     [--W15],W8
14E6:  MOV     [--W15],W7
14E8:  MOV     [--W15],W6
14EA:  MOV     [--W15],W5
14EC:  RETURN  
.................... } 
....................  
.................... void main(){	; 
14EE:  MOV     #2780,W15
14F0:  MOV     #27FF,W0
14F2:  MOV     W0,20
14F4:  NOP     
14F6:  BSET.B  81.7
14F8:  MOV     #46,W0
14FA:  MOV.B   W0L,742
14FC:  MOV     #57,W0
14FE:  MOV.B   W0L,742
1500:  BCLR.B  742.6
1502:  MOV     #53F,W0
1504:  MOV     W0,680
1506:  MOV     #3F06,W0
1508:  MOV     W0,682
150A:  MOV     #3F0C,W0
150C:  MOV     W0,6A4
150E:  MOV     #12,W0
1510:  MOV     W0,6C2
1512:  MOV     #300,W0
1514:  MOV     W0,6CC
1516:  MOV     #46,W0
1518:  MOV.B   W0L,742
151A:  MOV     #57,W0
151C:  MOV.B   W0L,742
151E:  BSET.B  742.6
1520:  CLR     744
1522:  MOV     #8000,W4
1524:  MOV     W4,220
1526:  MOV     #400,W4
1528:  MOV     W4,222
152A:  BSET.B  220.3
152C:  MOV     #22,W4
152E:  MOV     W4,228
1530:  SETM    32C
.................... 	//set pwm(frequency,duty cycle) 
.................... 	int f = 10000; 
.................... 	int d = 10; 
1532:  MOV     #2710,W4
1534:  MOV     W4,802
1536:  MOV     #A,W4
1538:  MOV     W4,804
.................... 	PWM(10000,10); 
153A:  MOV     #2710,W4
153C:  MOV     W4,808
153E:  MOV     #A,W4
1540:  MOV     W4,80A
1542:  CALL    141E
.................... 	while(TRUE){ 
.................... 		if(input(PIN_B6) == 0){ 
1546:  BSET.B  2C8.6
1548:  BTSC.B  2CA.6
154A:  BRA     1568
.................... 			if(d == 100){ 
154C:  MOV     804,W4
154E:  XOR     #64,W4
1550:  BRA     NZ,1556
.................... 				d = 0; 
1552:  CLR     804
.................... 			} 
1554:  BRA     155C
.................... 			else{ 
.................... 				d += 5; 
1556:  MOV     804,W4
1558:  ADD     W4,#5,W4
155A:  MOV     W4,804
.................... 			} 
.................... 			PWM(f, d); 
155C:  PUSH    802
155E:  POP     808
1560:  PUSH    804
1562:  POP     80A
1564:  CALL    141E
.................... 		} 
.................... 		if(input(PIN_B5) == 0){ 
1568:  BSET.B  2C8.5
156A:  BTSC.B  2CA.5
156C:  BRA     158E
.................... 			if(f == 10000){ 
156E:  MOV     802,W4
1570:  MOV     #2710,W3
1572:  CP      W3,W4
1574:  BRA     NZ,157C
.................... 				f = 1; 
1576:  MOV     #1,W4
1578:  MOV     W4,802
.................... 			} 
157A:  BRA     1582
.................... 			else{ 
.................... 				f *= 10; 
157C:  MOV     802,W4
157E:  MUL.UU  W4,#A,W0
1580:  MOV     W0,802
.................... 			} 
.................... 			PWM(f, d); 
1582:  PUSH    802
1584:  POP     808
1586:  PUSH    804
1588:  POP     80A
158A:  CALL    141E
.................... 		} 
158E:  BRA     1546
.................... 	} 
.................... } 
1590:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
