CCS PCD C Compiler, Version 5.015, 5967               28-Sep-18 01:06

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\Lab1\lab1_2.lst

               ROM used:   2514 bytes (7%)
                           Largest free fragment is 28202
               RAM used:   320 (4%) at main() level
                           336 (4%) worst case
               Stack size: 128

*
0C00:  GOTO    1476
*
0C40:  GOTO    133A
0C44:  GOTO    140C
*
0C74:  GOTO    DFC
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0E32:  MOV     W5,[W15++]
0E34:  MOV     #C,W5
0E36:  REPEAT  #3
0E38:  MOV     [W5++],[W15++]
0E3A:  CLR     W9
0E3C:  MOV     #8000,W8
0E3E:  BTSC.B  43.0
0E40:  XOR     W8,W3,W3
0E42:  CP0     W0
0E44:  BRA     NZ,E4C
0E46:  MOV     #7FFF,W10
0E48:  AND     W1,W10,W10
0E4A:  BTSS.B  42.1
0E4C:  MOV     W1,W10
0E4E:  XOR     W3,W10,W11
0E50:  MOV     W1,W6
0E52:  MOV     W3,W7
0E54:  MOV     W3,W12
0E56:  BCLR.B  42.1
0E58:  BCLR.B  42.0
0E5A:  RLC     W6,W6
0E5C:  SWAP    W6
0E5E:  AND     #FF,W6
0E60:  CP0     W6
0E62:  BRA     Z,FA6
0E64:  BCLR.B  42.1
0E66:  BCLR.B  42.0
0E68:  RLC     W7,W7
0E6A:  SWAP    W7
0E6C:  AND     #FF,W7
0E6E:  CP0     W7
0E70:  BRA     Z,FB0
0E72:  BCLR.B  42.1
0E74:  BCLR.B  42.0
0E76:  CP      W7,W6
0E78:  BRA     Z,FB2
0E7A:  BRA     N,FC2
0E7C:  BCLR    W9.0
0E7E:  BSET    W9.1
0E80:  SUB     W7,W6,W8
0E82:  MOV     W7,W6
0E84:  AND     #FF,W1
0E86:  BSET    W1.7
0E88:  AND     #FF,W3
0E8A:  BSET    W3.7
0E8C:  MOV     #28,W7
0E8E:  CP      W7,W8
0E90:  BRA     N,EB4
0E92:  BCLR.B  42.1
0E94:  BCLR.B  42.0
0E96:  RRC     W1,W1
0E98:  RRC     W0,W0
0E9A:  DEC     W8,W8
0E9C:  BRA     NZ,E92
0E9E:  BRA     EBA
0EA0:  MOV     #28,W7
0EA2:  CP      W7,W8
0EA4:  BRA     N,EB8
0EA6:  BCLR.B  42.1
0EA8:  BCLR.B  42.0
0EAA:  RRC     W3,W3
0EAC:  RRC     W2,W2
0EAE:  DEC     W8,W8
0EB0:  BRA     NZ,EA6
0EB2:  BRA     ED2
0EB4:  MOV     W2,W0
0EB6:  MOV     W3,W1
0EB8:  BRA     F40
0EBA:  BTSS    W11.F
0EBC:  BRA     EE0
0EBE:  BTSC    W9.4
0EC0:  MOV     W12,W11
0EC2:  NEG     W0,W0
0EC4:  BRA     Z,ECA
0EC6:  COM.B   W1L,W1L
0EC8:  BRA     ECC
0ECA:  NEG     W1,W1
0ECC:  BTSC    W9.4
0ECE:  BRA     F26
0ED0:  BRA     EE0
0ED2:  BTSS    W11.F
0ED4:  BRA     EE0
0ED6:  NEG     W2,W2
0ED8:  BRA     Z,EDE
0EDA:  COM.B   W3L,W3L
0EDC:  BRA     EE0
0EDE:  NEG     W3,W3
0EE0:  AND     #FF,W5
0EE2:  BCLR.B  42.1
0EE4:  BCLR.B  42.0
0EE6:  ADD     W0,W2,W0
0EE8:  ADDC.B  W1L,W3L,W1L
0EEA:  BTSC.B  42.0
0EEC:  BSET    W9.3
0EEE:  BTSC    W9.0
0EF0:  BRA     F04
0EF2:  BTSC    W9.1
0EF4:  BRA     EF8
0EF6:  BRA     F0E
0EF8:  BTSC    W11.F
0EFA:  BRA     F26
0EFC:  BTSC    W9.3
0EFE:  BRA     F52
0F00:  BSET    W9.6
0F02:  BRA     F40
0F04:  BTSC    W11.F
0F06:  BRA     F26
0F08:  BTSC    W9.3
0F0A:  BRA     F52
0F0C:  BRA     F40
0F0E:  BCLR    W9.2
0F10:  BTSC    W11.F
0F12:  BRA     F1C
0F14:  MOV     W10,W11
0F16:  BTSC    W9.3
0F18:  BRA     F52
0F1A:  BRA     F88
0F1C:  BSET    W9.4
0F1E:  XOR.B   #80,W1L
0F20:  BTSC    W1.7
0F22:  BRA     EBE
0F24:  MOV     W10,W11
0F26:  AND     #FF,W1
0F28:  IOR      W0,  W1,W7
0F2A:  BRA     Z,F40
0F2C:  BTSC    W1.7
0F2E:  BRA     F40
0F30:  BCLR.B  42.1
0F32:  BCLR.B  42.0
0F34:  RLC     W0,W0
0F36:  RLC     W1,W1
0F38:  DEC     W6,W6
0F3A:  BTSC.B  42.1
0F3C:  BRA     FA0
0F3E:  BRA     F2C
0F40:  BTSC    W9.0
0F42:  MOV     W10,W11
0F44:  BTSC    W9.1
0F46:  MOV     W12,W11
0F48:  BTSS    W9.5
0F4A:  BRA     F80
0F4C:  BTSC    W10.F
0F4E:  BSET    W0.8
0F50:  BRA     F88
0F52:  BSET.B  42.0
0F54:  RRC.B   W1L,W1L
0F56:  RRC     W0,W0
0F58:  BTSC.B  42.0
0F5A:  BSET    W9.5
0F5C:  INC     W6,W6
0F5E:  BRA     Z,FA0
0F60:  BTSS    W9.5
0F62:  BRA     F74
0F64:  INC     W0,W0
0F66:  BRA     NZ,F74
0F68:  INC.B   W1L,W1L
0F6A:  BRA     NZ,F74
0F6C:  RRC.B   W1L,W1L
0F6E:  RRC     W0,W0
0F70:  INC     W6,W6
0F72:  BRA     Z,FA0
0F74:  BTSC    W9.0
0F76:  MOV     W10,W11
0F78:  BTSC    W9.1
0F7A:  MOV     W12,W11
0F7C:  BTSC.B  42.1
0F7E:  BRA     FA0
0F80:  BTSC    W9.6
0F82:  MOV     W10,W11
0F84:  BTSC    W9.7
0F86:  MOV     W12,W11
0F88:  IOR      W0,  W1,W2
0F8A:  BRA     Z,FD2
0F8C:  BCLR    W1.7
0F8E:  SWAP    W6
0F90:  BCLR.B  42.1
0F92:  BCLR.B  42.0
0F94:  RRC     W6,W6
0F96:  XOR     W6,W1,W1
0F98:  BSET    W1.F
0F9A:  BTSS    W11.F
0F9C:  BCLR    W1.F
0F9E:  BRA     FD2
0FA0:  MOV     #0,W0
0FA2:  MOV     #0,W1
0FA4:  BRA     FD2
0FA6:  BTSC    W10.F
0FA8:  XOR     W8,W3,W3
0FAA:  MOV     W2,W0
0FAC:  MOV     W3,W1
0FAE:  BRA     FD2
0FB0:  BRA     FD2
0FB2:  AND     #FF,W3
0FB4:  BSET    W3.7
0FB6:  AND     #FF,W1
0FB8:  BSET    W1.7
0FBA:  BTSC    W11.F
0FBC:  BCLR    W3.7
0FBE:  BSET    W9.2
0FC0:  BRA     ED2
0FC2:  SUB     W6,W7,W8
0FC4:  AND     #FF,W1
0FC6:  BSET    W1.7
0FC8:  AND     #FF,W3
0FCA:  BSET    W3.7
0FCC:  BCLR    W9.1
0FCE:  BSET    W9.0
0FD0:  BRA     EA0
0FD2:  MOV     #12,W5
0FD4:  REPEAT  #3
0FD6:  MOV     [--W15],[W5--]
0FD8:  MOV     [--W15],W5
0FDA:  RETURN  
0FDC:  MOV     W5,[W15++]
0FDE:  MOV     #C,W5
0FE0:  REPEAT  #4
0FE2:  MOV     [W5++],[W15++]
0FE4:  MOV     W0,W4
0FE6:  MOV     W1,W5
0FE8:  MOV     W3,W7
0FEA:  MOV     W2,W6
0FEC:  BCLR.B  42.0
0FEE:  BCLR.B  42.1
0FF0:  RLC     W1,W1
0FF2:  SWAP    W1
0FF4:  AND     #FF,W1
0FF6:  CP0     W1
0FF8:  BRA     Z,1090
0FFA:  BCLR.B  42.0
0FFC:  BCLR.B  42.1
0FFE:  RLC     W3,W3
1000:  SWAP    W3
1002:  AND     #FF,W3
1004:  CP0     W3
1006:  BRA     Z,1090
1008:  ZE      W0,W0
100A:  ADD.B   W3L,W1L,W0L
100C:  BRA     C,1016
100E:  SUB     #7F,W0
1010:  BRA     Z,1090
1012:  BRA     NC,1090
1014:  BRA     101A
1016:  ADD.B   #81,W0L
1018:  BRA     C,1090
101A:  XOR     W5,W7,W10
101C:  BCLR.B  42.0
101E:  BCLR.B  42.1
1020:  AND     #FF,W5
1022:  BSET    W5.7
1024:  BCLR.B  42.0
1026:  AND     #FF,W7
1028:  BSET    W7.7
102A:  MUL.UU  W4,W6,W2
102C:  MUL.UU  W5,W6,W8
102E:  ADDC    W8,W3,W3
1030:  MOV     W9,W1
1032:  BTSC.B  42.0
1034:  INC     W1,W1
1036:  BCLR.B  42.0
1038:  MUL.UU  W7,W4,W8
103A:  ADDC    W8,W3,W3
103C:  ADDC    W9,W1,W1
103E:  MUL.UU  W5,W7,W8
1040:  ADDC    W8,W1,W1
1042:  INC     W0,W0
1044:  CP0     W1
1046:  BTSC.B  42.1
1048:  BRA     104C
104A:  BRA     1052
104C:  CP0     W3
104E:  BTSC.B  42.1
1050:  BRA     105C
1052:  BTSC    W1.F
1054:  BRA     105C
1056:  RLC     W3,W3
1058:  RLC     W1,W1
105A:  DEC     W0,W0
105C:  MOV     W1,W2
105E:  BCLR.B  42.0
1060:  BTSS    W3.7
1062:  BRA     1076
1064:  MOV     #FF00,W7
1066:  AND     W3,W7,W3
1068:  ADD     #100,W3
106A:  ADDC    W2,#0,W2
106C:  CP0     W2
106E:  BRA     NZ,1076
1070:  CP0     W3
1072:  BRA     NZ,1076
1074:  INC     W0,W0
1076:  SWAP    W0
1078:  BCLR.B  42.0
107A:  BCLR.B  42.1
107C:  RRC     W0,W1
107E:  BTSC    W10.F
1080:  BSET    W1.F
1082:  BCLR    W2.F
1084:  SWAP    W2
1086:  XOR.B   W2L,W1L,W1L
1088:  SWAP    W3
108A:  MOV.B   W3L,W2L
108C:  MOV     W2,W0
108E:  BRA     1096
1090:  MOV     #0,W0
1092:  MOV     #0,W1
1094:  BRA     1096
1096:  MOV     #14,W5
1098:  REPEAT  #4
109A:  MOV     [--W15],[W5--]
109C:  MOV     [--W15],W5
109E:  RETURN  
10A0:  MOV     W0,W2
10A2:  MOV     W1,W3
10A4:  MOV.B   W1L,W0L
10A6:  SWAP    W0
10A8:  BSET    W0.F
10AA:  RLC     W1,W1
10AC:  SWAP    W1
10AE:  ZE      W1,W1
10B0:  MOV     #8E,W4
10B2:  SUB.B   W4L,W1L,W1L
10B4:  BRA     Z,10C2
10B6:  CP0     W0
10B8:  BRA     Z,10C2
10BA:  BCLR.B  42.0
10BC:  RRC     W0,W0
10BE:  DEC     W1,W1
10C0:  BRA     NZ,10B6
10C2:  BTSS    W3.F
10C4:  BRA     10CA
10C6:  NEG     W0,W0
10C8:  BRA     10CA
10CA:  RETURN  
10CC:  MOV     W5,[W15++]
10CE:  MOV     #C,W5
10D0:  REPEAT  #3
10D2:  MOV     [W5++],[W15++]
10D4:  BTSS    W0.F
10D6:  BRA     10F0
10D8:  NEG     W0,W0
10DA:  BSET    W4.8
10DC:  BTSS    W4.F
10DE:  BRA     10F0
10E0:  MOV     W0,[W15++]
10E2:  MOV     #2D,W0
10E4:  BTSC.B  223.1
10E6:  BRA     10E4
10E8:  MOV     W0,224
10EA:  MOV     [--W15],W0
10EC:  BCLR    W4.8
10EE:  DEC.B   0008
10F0:  CLR     W5
10F2:  MOV     W0,W7
10F4:  MOV     W4,W9
10F6:  BCLR    W4.F
10F8:  CP0.B   W4L
10FA:  BRA     NZ,1108
10FC:  BTSC    W9.F
10FE:  BRA     1104
1100:  MOV     #0,W5
1102:  BRA     1122
1104:  MOV     #0,W5
1106:  BRA     1122
1108:  SUB.B   W4L,#6,W5L
110A:  BRA     NC,1120
110C:  MOV     #30,W0
110E:  BTSS    W9.F
1110:  MOV     #20,W0
1112:  BTSC.B  223.1
1114:  BRA     1112
1116:  MOV     W0,224
1118:  DEC     W5,W5
111A:  BRA     NN,1112
111C:  MOV     #5,W5
111E:  BRA     1122
1120:  MOV     W4,W5
1122:  MOV     #6,W4
1124:  BTSC    W5.8
1126:  INC     W4,W4
1128:  BSET    W5.E
112A:  BTSC    W9.F
112C:  BSET    W5.F
112E:  MOV     #2710,W8
1130:  REPEAT  #11
1132:  DIV.U   W7,W8
1134:  CALL    1178
1138:  MOV     W1,W7
113A:  MOV     #3E8,W8
113C:  REPEAT  #11
113E:  DIV.U   W7,W8
1140:  CALL    1178
1144:  MOV     W1,W7
1146:  MOV     #64,W8
1148:  REPEAT  #11
114A:  DIV.U   W7,W8
114C:  CALL    1178
1150:  MOV     W1,W7
1152:  MOV     #A,W8
1154:  REPEAT  #11
1156:  DIV.U   W7,W8
1158:  CALL    1178
115C:  BTSS    W9.8
115E:  BRA     116A
1160:  MOV     #2D,W0
1162:  BTSC.B  223.1
1164:  BRA     1162
1166:  MOV     W0,224
1168:  BCLR    W9.8
116A:  MOV     #30,W0
116C:  ADD.B   W1L,W0L,W0L
116E:  MOV     W0,2A
1170:  BTSC.B  223.1
1172:  BRA     1170
1174:  MOV     W0,224
1176:  BRA     11B8
1178:  MOV     #30,W6
117A:  CP0     W0
117C:  BRA     NZ,119A
117E:  BTSS    W5.E
1180:  BRA     11AE
1182:  DEC     W4,W4
1184:  CP.B    W4L,W5L
1186:  BRA     Z,118C
1188:  BTSC.B  42.0
118A:  RETURN  
118C:  CP0     W0
118E:  BRA     NZ,119A
1190:  BTSS    W5.E
1192:  BRA     11AE
1194:  BTSS    W5.F
1196:  MOV     #20,W6
1198:  BRA     11AE
119A:  BCLR    W5.E
119C:  BTSS    W9.8
119E:  BRA     11AE
11A0:  MOV     W0,W10
11A2:  MOV     #2D,W0
11A4:  BTSC.B  223.1
11A6:  BRA     11A4
11A8:  MOV     W0,224
11AA:  BCLR    W9.8
11AC:  MOV     W10,W0
11AE:  ADD.B   W6L,W0L,W0L
11B0:  BTSC.B  223.1
11B2:  BRA     11B0
11B4:  MOV     W0,224
11B6:  RETURN  
11B8:  MOV     #12,W5
11BA:  REPEAT  #3
11BC:  MOV     [--W15],[W5--]
11BE:  MOV     [--W15],W5
11C0:  RETURN  
11C2:  MOV     W6,[W15++]
11C4:  MOV     W7,[W15++]
11C6:  MOV     W8,[W15++]
11C8:  MOV     W9,[W15++]
11CA:  CLR     W4
11CC:  CLR     W5
11CE:  CLR     W6
11D0:  CLR     W7
11D2:  XOR     W2,W3,W8
11D4:  BRA     Z,11F8
11D6:  MOV     #20,W8
11D8:  BCLR.B  42.0
11DA:  RLC     W0,W0
11DC:  RLC     W1,W1
11DE:  RLC     W4,W4
11E0:  RLC     W5,W5
11E2:  CP      W5,W3
11E4:  BRA     NZ,11E8
11E6:  CPB     W4,W2
11E8:  BRA     NC,11F0
11EA:  SUB     W4,W2,W4
11EC:  SUBB    W5,W3,W5
11EE:  BSET.B  42.0
11F0:  RLC     W6,W6
11F2:  RLC     W7,W7
11F4:  DEC     W8,W8
11F6:  BRA     NZ,11D8
11F8:  MOV     W7,W1
11FA:  MOV     W6,W0
11FC:  MOV     [--W15],W9
11FE:  MOV     [--W15],W8
1200:  MOV     [--W15],W7
1202:  MOV     [--W15],W6
1204:  RETURN  
1206:  MOV     W5,[W15++]
1208:  MOV     #C,W5
120A:  REPEAT  #7
120C:  MOV     [W5++],[W15++]
120E:  BTSS    W1.F
1210:  BRA     1220
1212:  NEG     W0,W0
1214:  BRA     Z,1218
1216:  BRA     NZ,121C
1218:  NEG     W1,W1
121A:  BRA     121E
121C:  COM     W1,W1
121E:  BSET    W4.8
1220:  CLR     W5
1222:  MOV     W0,W6
1224:  MOV     W1,W7
1226:  MOV     W4,W12
1228:  BCLR    W4.F
122A:  CP0.B   W4L
122C:  BRA     NZ,1230
122E:  BRA     1260
1230:  SUB.B   W4L,#B,W5L
1232:  BRA     NC,1260
1234:  SUB.B   W4L,W5L,W4L
1236:  BTSS    W12.F
1238:  BRA     1250
123A:  BTSS    W4.8
123C:  BRA     124C
123E:  MOV     #2D,W0
1240:  BTSC.B  223.1
1242:  BRA     1240
1244:  MOV     W0,224
1246:  BCLR    W4.8
1248:  DEC     W5,W5
124A:  BRA     N,1260
124C:  MOV     #30,W0
124E:  BRA     1252
1250:  MOV     #20,W0
1252:  BTSC.B  223.1
1254:  BRA     1252
1256:  MOV     W0,224
1258:  DEC     W5,W5
125A:  BRA     NN,1252
125C:  BTSC    W4.8
125E:  DEC.B   W4L,W4L
1260:  MOV     #E,W8
1262:  MOV     #0,W9
1264:  LNK     #10
1266:  MOV     W12,[W14+W8]
1268:  DEC2    W8,W8
126A:  BRA     NN,1266
126C:  MOV     W4,W5
126E:  MOV     #A,W4
1270:  BTSC    W5.8
1272:  INC     W4,W4
1274:  BSET    W5.E
1276:  BTSC    W12.F
1278:  BSET    W5.F
127A:  CP0.B   W5L
127C:  BRA     Z,1280
127E:  DEC.B   W5L,W5L
1280:  MOV     W4,[W14]
1282:  MOV     W5,[W14+#2]
1284:  MOV     W6,W0
1286:  MOV     W7,W1
1288:  MOV     #CA00,W2
128A:  MOV     #3B9A,W3
128C:  MOV     #2710,W8
128E:  BCLR    W13.F
1290:  BCLR.B  43.0
1292:  CALL    11C2
1296:  BTG     W13.F
1298:  BTSC    W13.F
129A:  BRA     12AA
129C:  MOV     W0,[W14+#8]
129E:  MOV     W1,[W14+#A]
12A0:  MOV     W0,W2
12A2:  MOV     W1,W3
12A4:  MOV     [W14+#4],W0
12A6:  MOV     [W14+#6],W1
12A8:  BRA     1290
12AA:  MOV     W2,[W14+#8]
12AC:  MOV     W3,[W14+#A]
12AE:  MOV     W4,[W14+#4]
12B0:  MOV     W5,[W14+#6]
12B2:  MOV     [W14],W4
12B4:  MOV     [W14+#2],W5
12B6:  MOV     #30,W6
12B8:  CP0     W0
12BA:  BRA     NZ,12DE
12BC:  BTSS    W5.E
12BE:  BRA     12E2
12C0:  DEC     W4,W4
12C2:  MOV     W4,[W14]
12C4:  CP0     W4
12C6:  BRA     Z,12E2
12C8:  CP.B    W4L,W5L
12CA:  BRA     Z,12D0
12CC:  BTSC.B  42.0
12CE:  BRA     1300
12D0:  BTSS    W5.F
12D2:  BRA     12DA
12D4:  BTSS    W5.8
12D6:  BRA     12F8
12D8:  BRA     12E8
12DA:  MOV     #20,W6
12DC:  BRA     12F8
12DE:  BCLR    W5.E
12E0:  MOV     W5,[W14+#2]
12E2:  MOV     [W14+#2],W5
12E4:  BTSS    W5.8
12E6:  BRA     12F8
12E8:  BCLR    W5.8
12EA:  MOV     W5,[W14+#2]
12EC:  MOV     W0,W10
12EE:  MOV     #2D,W0
12F0:  BTSC.B  223.1
12F2:  BRA     12F0
12F4:  MOV     W0,224
12F6:  MOV     W10,W0
12F8:  ADD.B   W6L,W0L,W0L
12FA:  BTSC.B  223.1
12FC:  BRA     12FA
12FE:  MOV     W0,224
1300:  MOV     [W14+#8],W0
1302:  MOV     [W14+#A],W1
1304:  MOV     #A,W2
1306:  CLR     W3
1308:  CP      W0,#1
130A:  BRA     Z,130E
130C:  BRA     1290
130E:  ULNK    
1310:  MOV     #1A,W5
1312:  REPEAT  #7
1314:  MOV     [--W15],[W5--]
1316:  MOV     [--W15],W5
1318:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(internal = 8 MHz, clock = 32000000) 
.................... #PIN_SELECT U1TX = PIN_B13 
.................... #PIN_SELECT U1RX = PIN_B12 
....................  
.................... #use rs232(UART1, baud = 9600, xmit = PIN_B13, rcv = PIN_B12) 
....................  
.................... #PIN_SELECT OC1 = PIN_B2  //DX02 
.................... #PIN_SELECT OC2 = PIN_B3  //DX03 
.................... #PIN_SELECT OC3 = PIN_B4  //DXI0  (PWM) 
.................... #PIN_SELECT INT1 = PIN_B5 //DXI1  (Encoder) 
.................... // #PIN_SELECT INT2 = PIN_B6			// Pin output is connected to DXI2 
....................  
....................  
.................... int percent_duty = 0; 
.................... long countPulse; 
.................... float timer3time = 0; 
.................... float volt = 0; 
.................... int x; 
....................  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
*
0DFC:  PUSH    42
0DFE:  PUSH    36
0E00:  PUSH    32
0E02:  MOV     W0,[W15++]
0E04:  MOV     #2,W0
0E06:  REPEAT  #C
0E08:  MOV     [W0++],[W15++]
....................   if (percent_duty == 120){ 
0E0A:  MOV     8B0,W4
0E0C:  XOR     #78,W4
0E0E:  BRA     NZ,E1A
....................     percent_duty = -(percent_duty); 
0E10:  MOV     #0,W4
0E12:  MOV     8B0,W3
0E14:  SUB     W4,W3,W0
0E16:  MOV     W0,8B0
....................   } 
0E18:  BRA     E20
....................   else{ 
....................     percent_duty += 10; 
0E1A:  MOV     8B0,W4
0E1C:  ADD     W4,#A,W4
0E1E:  MOV     W4,8B0
....................   } 
0E20:  BCLR.B  86.4
0E22:  MOV     #1A,W0
0E24:  REPEAT  #C
0E26:  MOV     [--W15],[W0--]
0E28:  MOV     [--W15],W0
0E2A:  POP     32
0E2C:  POP     36
0E2E:  POP     42
0E30:  RETFIE  
.................... } 
....................  
.................... // int convertToDUTY(float voltage) { 
.................... //   int duty = abs(voltage) * 100 / 12; 
.................... //   return duty; 
.................... // } 
....................  
.................... int dutyPercentInput(int duty_percent){ 
*
131A:  MOV     8CA,W0
131C:  BTSS    W0.F
131E:  BRA     1326
1320:  MOV     #0,W4
1322:  MOV     8CA,W3
1324:  SUB     W4,W3,W0
1326:  MOV     W0,8CC
....................   int duty = abs(duty_percent); 
....................   if(duty > 100){ 
1328:  MOV     8CC,W4
132A:  MOV     #64,W3
132C:  CP      W3,W4
132E:  BRA     GE,1334
....................     duty = 100; 
1330:  MOV     #64,W4
1332:  MOV     W4,8CC
....................   } 
....................   return duty; 
1334:  PUSH    8CC
1336:  POP     0
1338:  RETURN  
.................... } 
....................  
.................... int getDirection(int duty_percent) { 
....................   int direction; 
....................   if (duty_percent > 0) { 
*
13BA:  MOV     8CC,W4
13BC:  CP      W4,#0
13BE:  BRA     LE,13C4
....................     direction = 0; 
13C0:  CLR     8CE
....................   } else if (duty_percent < 0) { 
13C2:  BRA     13D4
13C4:  MOV     8CC,W4
13C6:  CP      W4,#0
13C8:  BRA     GE,13D0
....................     direction = 1; 
13CA:  MOV     #1,W4
13CC:  MOV     W4,8CE
....................   } 
13CE:  BRA     13D4
....................   else{ 
....................     direction = 2; 
13D0:  MOV     #2,W4
13D2:  MOV     W4,8CE
....................   } 
....................   return direction; 
13D4:  PUSH    8CE
13D6:  POP     0
13D8:  RETURN  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT1); 
*
1470:  BSET.B  96.4
....................   ext_int_edge(1, H_TO_L); // Falling Edge 
1472:  BSET.B  82.1
1474:  RETURN  
.................... } 
....................  
.................... #INT_TIMER2 
.................... void TIMER2_isr() { 
*
133A:  PUSH    42
133C:  PUSH    36
133E:  PUSH    32
1340:  MOV     W0,[W15++]
1342:  MOV     #2,W0
1344:  REPEAT  #C
1346:  MOV     [W0++],[W15++]
....................   timer3time += 0.01; 
1348:  BCLR.B  43.0
134A:  MOV     8B6,W0
134C:  MOV     8B8,W1
134E:  MOV     #D70A,W2
1350:  MOV     #3C23,W3
1352:  CALL    E32
1356:  MOV     W0,8B6
1358:  MOV     W1,8B8
.................... 	// Send time and voltage in milli for resolution's sake 
....................   printf("%d", (int)(timer3time*1000)); 
135A:  MOV     8B6,W0
135C:  MOV     8B8,W1
135E:  MOV     #0,W2
1360:  MOV     #447A,W3
1362:  CALL    FDC
1366:  CALL    10A0
136A:  MOV     W0,W5
136C:  MOV     W5,W0
136E:  MOV     #0,W4
1370:  CALL    10CC
....................   printf(","); 
1374:  BTSC.B  223.1
1376:  BRA     1374
1378:  MOV     #2C,W4
137A:  MOV     W4,224
....................   printf("%d", countPulse); 
137C:  MOV     8B2,W0
137E:  MOV     8B4,W1
1380:  MOV     #0,W4
1382:  CALL    1206
.................... 	printf(","); 
1386:  BTSC.B  223.1
1388:  BRA     1386
138A:  MOV     #2C,W4
138C:  MOV     W4,224
....................   printf("%d", dutyPercentInput(percent_duty)); 
138E:  PUSH    8B0
1390:  POP     8CA
1392:  CALL    131A
1396:  MOV     W0,W5
1398:  MOV     W5,W0
139A:  MOV     #0,W4
139C:  CALL    10CC
.................... 	printf("\n"); 
13A0:  BTSC.B  223.1
13A2:  BRA     13A0
13A4:  MOV     #A,W4
13A6:  MOV     W4,224
13A8:  BCLR.B  84.7
13AA:  MOV     #1A,W0
13AC:  REPEAT  #C
13AE:  MOV     [--W15],[W0--]
13B0:  MOV     [--W15],W0
13B2:  POP     32
13B4:  POP     36
13B6:  POP     42
13B8:  RETFIE  
.................... } 
....................  
.................... void init_Timer2() { 
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_256, 625); 
*
1462:  CLR     110
1464:  MOV     #271,W4
1466:  MOV     W4,10C
1468:  MOV     #8030,W4
146A:  MOV     W4,110
....................   enable_interrupts(INT_TIMER2); 
146C:  BSET.B  94.7
146E:  RETURN  
.................... } 
....................  
.................... void directional_drive(int direction, int driveduty) { 
*
13DA:  MOV     W5,[W15++]
....................   if (direction == 0) { // turn right 
13DC:  CP0     8C6
13DE:  BRA     NZ,13EC
....................     set_pwm_duty(1, 2 * driveduty); 
13E0:  MOV     8C8,W4
13E2:  MUL.UU  W4,#2,W0
13E4:  MOV     W0,W5
13E6:  MOV     W5,180
....................     set_pwm_duty(2, 0); 
13E8:  CLR     186
....................   } else if (direction == 1) { // turn left 
13EA:  BRA     1408
13EC:  MOV     8C6,W4
13EE:  CP      W4,#1
13F0:  BRA     NZ,13FE
....................     set_pwm_duty(1, 0); 
13F2:  CLR     180
....................     set_pwm_duty(2, 2 * driveduty); 
13F4:  MOV     8C8,W4
13F6:  MUL.UU  W4,#2,W0
13F8:  MOV     W0,W5
13FA:  MOV     W5,186
....................   } else if (direction == 2) {//stop 
13FC:  BRA     1408
13FE:  MOV     8C6,W4
1400:  CP      W4,#2
1402:  BRA     NZ,1408
....................     set_pwm_duty(1, 0); 
1404:  CLR     180
....................     set_pwm_duty(2, 0); 
1406:  CLR     186
....................   } 
1408:  MOV     [--W15],W5
140A:  RETURN  
.................... } 
....................  
....................  
.................... #INT_TIMER3 
.................... void TIMER3_ist() { 
140C:  PUSH    42
140E:  PUSH    36
1410:  PUSH    32
1412:  MOV     W0,[W15++]
1414:  MOV     #2,W0
1416:  REPEAT  #C
1418:  MOV     [W0++],[W15++]
141A:  PUSH    8B0
141C:  POP     8CA
141E:  CALL    131A
1422:  MOV     W0,8C0
1424:  PUSH    8B0
1426:  POP     8CC
1428:  CALL    13BA
142C:  MOV     W0,8C2
....................   // volt = chirpSine(timer3time); 
....................  
....................   int duty = dutyPercentInput(percent_duty); 
....................   int dir = getDirection(percent_duty); 
....................   directional_drive(dir, duty); 
142E:  PUSH    8C2
1430:  POP     8C6
1432:  PUSH    8C0
1434:  POP     8C8
1436:  CALL    13DA
....................   // timer3time += 0.0001; 
143A:  BCLR.B  85.0
143C:  MOV     #1A,W0
143E:  REPEAT  #C
1440:  MOV     [--W15],[W0--]
1442:  MOV     [--W15],W0
1444:  POP     32
1446:  POP     36
1448:  POP     42
144A:  RETFIE  
.................... } 
....................  
.................... void Drivemotor() { 
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); // Set frequency at 10 KHz 
144C:  CLR     112
144E:  MOV     #C8,W4
1450:  MOV     W4,10E
1452:  MOV     #8010,W4
1454:  MOV     W4,112
....................   enable_interrupts(INT_TIMER3); 
1456:  BSET.B  95.0
....................   setup_compare(1, COMPARE_PWM | COMPARE_TIMER3); 
1458:  MOV     #E,W4
145A:  MOV     W4,184
....................   setup_compare(2, COMPARE_PWM | COMPARE_TIMER3); 
145C:  MOV     #E,W4
145E:  MOV     W4,18A
1460:  RETURN  
.................... } 
....................  
.................... void main() { 
*
1476:  MOV     #2780,W15
1478:  MOV     #27FF,W0
147A:  MOV     W0,20
147C:  NOP     
147E:  MOV     #4444,W0
1480:  MOV     W0,A6
1482:  BSET.B  81.7
1484:  MOV     #46,W0
1486:  MOV.B   W0L,742
1488:  MOV     #57,W0
148A:  MOV.B   W0L,742
148C:  BCLR.B  742.6
148E:  MOV     #53F,W0
1490:  MOV     W0,680
1492:  MOV     #3F0C,W0
1494:  MOV     W0,6A4
1496:  MOV     #1312,W0
1498:  MOV     W0,6C2
149A:  MOV     #14,W0
149C:  MOV     W0,6C4
149E:  MOV     #300,W0
14A0:  MOV     W0,6CC
14A2:  MOV     #46,W0
14A4:  MOV.B   W0L,742
14A6:  MOV     #57,W0
14A8:  MOV.B   W0L,742
14AA:  BSET.B  742.6
14AC:  CLR     744
14AE:  MOV     #8000,W4
14B0:  MOV     W4,220
14B2:  MOV     #400,W4
14B4:  MOV     W4,222
14B6:  BSET.B  220.3
14B8:  MOV     #1A0,W4
14BA:  MOV     W4,228
14BC:  CLR     8B0
14BE:  CLR     8B6
14C0:  CLR     8B8
14C2:  CLR     8BA
14C4:  CLR     8BC
14C6:  SETM    32C
14C8:  BRA     155E
14CA:  DATA    C0,06,08
14CC:  DATA    00,00,00
14CE:  DATA    4B,F0,3F
14D0:  DATA    5C,0A,58
14D2:  DATA    F6,3B,8F
14D4:  DATA    00,C0,3C
14D6:  DATA    8B,28,AC
14D8:  DATA    3C,BE,F6
14DA:  DATA    3F,D2,D5
14DC:  DATA    44,16,8C
14DE:  DATA    15,D7,BF
14E0:  DATA    69,00,5A
14E2:  DATA    2E,1B,87
14E4:  DATA    99,3F,9A
14E6:  DATA    5F,AD,4B
14E8:  DATA    91,E4,01
14EA:  DATA    C0,5D,11
14EC:  DATA    2F,92,E4
14EE:  DATA    81,FB,3F
14F0:  DATA    38,DA,91
14F2:  DATA    80,9D,C5
14F4:  DATA    E0,BF,6F
14F6:  DATA    12,C0,B4
14F8:  DATA    C3,09,AB
14FA:  DATA    3F,6B,C1
14FC:  DATA    03,4E,C1
14FE:  DATA    B5,45,BF
1500:  DATA    F7,40,05
1502:  DATA    FF,00,5A
1504:  DATA    EF,3F,F3
1506:  DATA    A3,E2,F7
1508:  DATA    D7,FF,01
150A:  DATA    40,C0,B4
150C:  DATA    FF,05,3C
150E:  DATA    58,FC,3F
1510:  DATA    3B,D3,C0
1512:  DATA    B5,BA,8C
1514:  DATA    E2,3F,39
1516:  DATA    D3,C7,3D
1518:  DATA    41,79,B2
151A:  DATA    3F,87,0D
151C:  DATA    3C,50,D0
151E:  DATA    AF,62,3F
1520:  DATA    30,4B,8D
1522:  DATA    A2,82,AA
1524:  DATA    04,40,09
1526:  DATA    A0,40,4A
1528:  DATA    05,76,03
152A:  DATA    40,EC,9E
152C:  DATA    37,88,A6
152E:  DATA    44,F0,3F
1530:  DATA    8F,12,8D
1532:  DATA    29,9A,5B
1534:  DATA    C7,3F,0E
1536:  DATA    E0,80,7C
1538:  DATA    A1,D8,86
153A:  DATA    3F,29,4B
153C:  DATA    FB,95,C2
153E:  DATA    37,1A,3F
1540:  DATA    00,00,00
1542:  INC     W2,W2
1544:  CP      W2,#1
1546:  BRA     NZ,1550
1548:  TBLRDL  [W1],W3
154A:  TBLRDH  [W1++],W4
154C:  MOV.B   6,W0L
154E:  RETURN  
1550:  CP      W2,#2
1552:  BRA     NZ,1558
1554:  MOV.B   7,W0L
1556:  RETURN  
1558:  MOV.B   8,W0L
155A:  CLR     W2
155C:  RETURN  
155E:  MOV     #0,W6
1560:  MOV     #0,W0
1562:  MOV     W0,32
1564:  MOV     #14CA,W0
1566:  MOV     W0,W1
1568:  CLR     W2
156A:  CALL    1542
156E:  MOV.B   W0L,B
1570:  CALL    1542
1574:  MOV.B   W0L,A
1576:  CP0     W5
1578:  BRA     Z,15AC
157A:  BTSS    W5.F
157C:  BRA     158C
157E:  CALL    1542
1582:  MOV.B   W0L,D
1584:  CALL    1542
1588:  MOV.B   W0L,C
158A:  BCLR    W5.F
158C:  BTSS    W5.E
158E:  BRA     15A0
1590:  BCLR    W5.E
1592:  DEC     W5,W5
1594:  CALL    1542
1598:  MOV.B   W0L,W7L
159A:  REPEAT  W5
159C:  MOV.B   W7L,[W6++]
159E:  BRA     156A
15A0:  CALL    1542
15A4:  MOV.B   W0L,[W6++]
15A6:  DEC     W5,W5
15A8:  BRA     NZ,15A0
15AA:  BRA     156A
....................   countPulse = 0; 
15AC:  CLR     8B2
15AE:  CLR     8B4
....................   timer3time = 0; 
15B0:  CLR     8B6
15B2:  CLR     8B8
....................   disable_interrupts(GLOBAL); 
15B4:  BCLR.B  81.7
15B6:  MOV     #E0,W4
15B8:  MOV     W4,42
15BA:  BSET.B  81.7
....................   Drivemotor(); 
15BC:  CALL    144C
....................   Init_Timer2(); 
15C0:  CALL    1462
....................   Init_Interrupts(); 
15C4:  CALL    1470
....................   enable_interrupts(GLOBAL); 
15C8:  BCLR.B  81.7
15CA:  CLR     42
15CC:  BSET.B  81.7
....................  
....................  
....................   while (TRUE) { 
15CE:  BRA     15CE
....................   } 
.................... } 
15D0:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
