CCS PCD C Compiler, Version 5.015, 5967               27-Oct-18 01:28

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\Milestone2\Drive-Motor-with-encoder.lst

               ROM used:   3446 bytes (10%)
                           Largest free fragment is 27270
               RAM used:   318 (4%) at main() level
                           440 (5%) worst case
               Stack size: 128

*
0C00:  GOTO    181C
*
0C40:  GOTO    1318
0C44:  GOTO    178A
*
0C74:  GOTO    DFC
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0E30:  MOV     W5,[W15++]
0E32:  MOV     #C,W5
0E34:  REPEAT  #3
0E36:  MOV     [W5++],[W15++]
0E38:  CLR     W9
0E3A:  MOV     #8000,W8
0E3C:  BTSC.B  43.0
0E3E:  XOR     W8,W3,W3
0E40:  CP0     W0
0E42:  BRA     NZ,E4A
0E44:  MOV     #7FFF,W10
0E46:  AND     W1,W10,W10
0E48:  BTSS.B  42.1
0E4A:  MOV     W1,W10
0E4C:  XOR     W3,W10,W11
0E4E:  MOV     W1,W6
0E50:  MOV     W3,W7
0E52:  MOV     W3,W12
0E54:  BCLR.B  42.1
0E56:  BCLR.B  42.0
0E58:  RLC     W6,W6
0E5A:  SWAP    W6
0E5C:  AND     #FF,W6
0E5E:  CP0     W6
0E60:  BRA     Z,FA4
0E62:  BCLR.B  42.1
0E64:  BCLR.B  42.0
0E66:  RLC     W7,W7
0E68:  SWAP    W7
0E6A:  AND     #FF,W7
0E6C:  CP0     W7
0E6E:  BRA     Z,FAE
0E70:  BCLR.B  42.1
0E72:  BCLR.B  42.0
0E74:  CP      W7,W6
0E76:  BRA     Z,FB0
0E78:  BRA     N,FC0
0E7A:  BCLR    W9.0
0E7C:  BSET    W9.1
0E7E:  SUB     W7,W6,W8
0E80:  MOV     W7,W6
0E82:  AND     #FF,W1
0E84:  BSET    W1.7
0E86:  AND     #FF,W3
0E88:  BSET    W3.7
0E8A:  MOV     #28,W7
0E8C:  CP      W7,W8
0E8E:  BRA     N,EB2
0E90:  BCLR.B  42.1
0E92:  BCLR.B  42.0
0E94:  RRC     W1,W1
0E96:  RRC     W0,W0
0E98:  DEC     W8,W8
0E9A:  BRA     NZ,E90
0E9C:  BRA     EB8
0E9E:  MOV     #28,W7
0EA0:  CP      W7,W8
0EA2:  BRA     N,EB6
0EA4:  BCLR.B  42.1
0EA6:  BCLR.B  42.0
0EA8:  RRC     W3,W3
0EAA:  RRC     W2,W2
0EAC:  DEC     W8,W8
0EAE:  BRA     NZ,EA4
0EB0:  BRA     ED0
0EB2:  MOV     W2,W0
0EB4:  MOV     W3,W1
0EB6:  BRA     F3E
0EB8:  BTSS    W11.F
0EBA:  BRA     EDE
0EBC:  BTSC    W9.4
0EBE:  MOV     W12,W11
0EC0:  NEG     W0,W0
0EC2:  BRA     Z,EC8
0EC4:  COM.B   W1L,W1L
0EC6:  BRA     ECA
0EC8:  NEG     W1,W1
0ECA:  BTSC    W9.4
0ECC:  BRA     F24
0ECE:  BRA     EDE
0ED0:  BTSS    W11.F
0ED2:  BRA     EDE
0ED4:  NEG     W2,W2
0ED6:  BRA     Z,EDC
0ED8:  COM.B   W3L,W3L
0EDA:  BRA     EDE
0EDC:  NEG     W3,W3
0EDE:  AND     #FF,W5
0EE0:  BCLR.B  42.1
0EE2:  BCLR.B  42.0
0EE4:  ADD     W0,W2,W0
0EE6:  ADDC.B  W1L,W3L,W1L
0EE8:  BTSC.B  42.0
0EEA:  BSET    W9.3
0EEC:  BTSC    W9.0
0EEE:  BRA     F02
0EF0:  BTSC    W9.1
0EF2:  BRA     EF6
0EF4:  BRA     F0C
0EF6:  BTSC    W11.F
0EF8:  BRA     F24
0EFA:  BTSC    W9.3
0EFC:  BRA     F50
0EFE:  BSET    W9.6
0F00:  BRA     F3E
0F02:  BTSC    W11.F
0F04:  BRA     F24
0F06:  BTSC    W9.3
0F08:  BRA     F50
0F0A:  BRA     F3E
0F0C:  BCLR    W9.2
0F0E:  BTSC    W11.F
0F10:  BRA     F1A
0F12:  MOV     W10,W11
0F14:  BTSC    W9.3
0F16:  BRA     F50
0F18:  BRA     F86
0F1A:  BSET    W9.4
0F1C:  XOR.B   #80,W1L
0F1E:  BTSC    W1.7
0F20:  BRA     EBC
0F22:  MOV     W10,W11
0F24:  AND     #FF,W1
0F26:  IOR      W0,  W1,W7
0F28:  BRA     Z,F3E
0F2A:  BTSC    W1.7
0F2C:  BRA     F3E
0F2E:  BCLR.B  42.1
0F30:  BCLR.B  42.0
0F32:  RLC     W0,W0
0F34:  RLC     W1,W1
0F36:  DEC     W6,W6
0F38:  BTSC.B  42.1
0F3A:  BRA     F9E
0F3C:  BRA     F2A
0F3E:  BTSC    W9.0
0F40:  MOV     W10,W11
0F42:  BTSC    W9.1
0F44:  MOV     W12,W11
0F46:  BTSS    W9.5
0F48:  BRA     F7E
0F4A:  BTSC    W10.F
0F4C:  BSET    W0.8
0F4E:  BRA     F86
0F50:  BSET.B  42.0
0F52:  RRC.B   W1L,W1L
0F54:  RRC     W0,W0
0F56:  BTSC.B  42.0
0F58:  BSET    W9.5
0F5A:  INC     W6,W6
0F5C:  BRA     Z,F9E
0F5E:  BTSS    W9.5
0F60:  BRA     F72
0F62:  INC     W0,W0
0F64:  BRA     NZ,F72
0F66:  INC.B   W1L,W1L
0F68:  BRA     NZ,F72
0F6A:  RRC.B   W1L,W1L
0F6C:  RRC     W0,W0
0F6E:  INC     W6,W6
0F70:  BRA     Z,F9E
0F72:  BTSC    W9.0
0F74:  MOV     W10,W11
0F76:  BTSC    W9.1
0F78:  MOV     W12,W11
0F7A:  BTSC.B  42.1
0F7C:  BRA     F9E
0F7E:  BTSC    W9.6
0F80:  MOV     W10,W11
0F82:  BTSC    W9.7
0F84:  MOV     W12,W11
0F86:  IOR      W0,  W1,W2
0F88:  BRA     Z,FD0
0F8A:  BCLR    W1.7
0F8C:  SWAP    W6
0F8E:  BCLR.B  42.1
0F90:  BCLR.B  42.0
0F92:  RRC     W6,W6
0F94:  XOR     W6,W1,W1
0F96:  BSET    W1.F
0F98:  BTSS    W11.F
0F9A:  BCLR    W1.F
0F9C:  BRA     FD0
0F9E:  MOV     #0,W0
0FA0:  MOV     #0,W1
0FA2:  BRA     FD0
0FA4:  BTSC    W10.F
0FA6:  XOR     W8,W3,W3
0FA8:  MOV     W2,W0
0FAA:  MOV     W3,W1
0FAC:  BRA     FD0
0FAE:  BRA     FD0
0FB0:  AND     #FF,W3
0FB2:  BSET    W3.7
0FB4:  AND     #FF,W1
0FB6:  BSET    W1.7
0FB8:  BTSC    W11.F
0FBA:  BCLR    W3.7
0FBC:  BSET    W9.2
0FBE:  BRA     ED0
0FC0:  SUB     W6,W7,W8
0FC2:  AND     #FF,W1
0FC4:  BSET    W1.7
0FC6:  AND     #FF,W3
0FC8:  BSET    W3.7
0FCA:  BCLR    W9.1
0FCC:  BSET    W9.0
0FCE:  BRA     E9E
0FD0:  MOV     #12,W5
0FD2:  REPEAT  #3
0FD4:  MOV     [--W15],[W5--]
0FD6:  MOV     [--W15],W5
0FD8:  RETURN  
0FDA:  MOV     W5,[W15++]
0FDC:  MOV     #C,W5
0FDE:  REPEAT  #4
0FE0:  MOV     [W5++],[W15++]
0FE2:  MOV     W0,W4
0FE4:  MOV     W1,W5
0FE6:  MOV     W3,W7
0FE8:  MOV     W2,W6
0FEA:  BCLR.B  42.0
0FEC:  BCLR.B  42.1
0FEE:  RLC     W1,W1
0FF0:  SWAP    W1
0FF2:  AND     #FF,W1
0FF4:  CP0     W1
0FF6:  BRA     Z,108E
0FF8:  BCLR.B  42.0
0FFA:  BCLR.B  42.1
0FFC:  RLC     W3,W3
0FFE:  SWAP    W3
1000:  AND     #FF,W3
1002:  CP0     W3
1004:  BRA     Z,108E
1006:  ZE      W0,W0
1008:  ADD.B   W3L,W1L,W0L
100A:  BRA     C,1014
100C:  SUB     #7F,W0
100E:  BRA     Z,108E
1010:  BRA     NC,108E
1012:  BRA     1018
1014:  ADD.B   #81,W0L
1016:  BRA     C,108E
1018:  XOR     W5,W7,W10
101A:  BCLR.B  42.0
101C:  BCLR.B  42.1
101E:  AND     #FF,W5
1020:  BSET    W5.7
1022:  BCLR.B  42.0
1024:  AND     #FF,W7
1026:  BSET    W7.7
1028:  MUL.UU  W4,W6,W2
102A:  MUL.UU  W5,W6,W8
102C:  ADDC    W8,W3,W3
102E:  MOV     W9,W1
1030:  BTSC.B  42.0
1032:  INC     W1,W1
1034:  BCLR.B  42.0
1036:  MUL.UU  W7,W4,W8
1038:  ADDC    W8,W3,W3
103A:  ADDC    W9,W1,W1
103C:  MUL.UU  W5,W7,W8
103E:  ADDC    W8,W1,W1
1040:  INC     W0,W0
1042:  CP0     W1
1044:  BTSC.B  42.1
1046:  BRA     104A
1048:  BRA     1050
104A:  CP0     W3
104C:  BTSC.B  42.1
104E:  BRA     105A
1050:  BTSC    W1.F
1052:  BRA     105A
1054:  RLC     W3,W3
1056:  RLC     W1,W1
1058:  DEC     W0,W0
105A:  MOV     W1,W2
105C:  BCLR.B  42.0
105E:  BTSS    W3.7
1060:  BRA     1074
1062:  MOV     #FF00,W7
1064:  AND     W3,W7,W3
1066:  ADD     #100,W3
1068:  ADDC    W2,#0,W2
106A:  CP0     W2
106C:  BRA     NZ,1074
106E:  CP0     W3
1070:  BRA     NZ,1074
1072:  INC     W0,W0
1074:  SWAP    W0
1076:  BCLR.B  42.0
1078:  BCLR.B  42.1
107A:  RRC     W0,W1
107C:  BTSC    W10.F
107E:  BSET    W1.F
1080:  BCLR    W2.F
1082:  SWAP    W2
1084:  XOR.B   W2L,W1L,W1L
1086:  SWAP    W3
1088:  MOV.B   W3L,W2L
108A:  MOV     W2,W0
108C:  BRA     1094
108E:  MOV     #0,W0
1090:  MOV     #0,W1
1092:  BRA     1094
1094:  MOV     #14,W5
1096:  REPEAT  #4
1098:  MOV     [--W15],[W5--]
109A:  MOV     [--W15],W5
109C:  RETURN  
109E:  MOV     W0,W2
10A0:  MOV     W1,W3
10A2:  MOV.B   W1L,W0L
10A4:  SWAP    W0
10A6:  BSET    W0.F
10A8:  RLC     W1,W1
10AA:  SWAP    W1
10AC:  ZE      W1,W1
10AE:  MOV     #8E,W4
10B0:  SUB.B   W4L,W1L,W1L
10B2:  BRA     Z,10C0
10B4:  CP0     W0
10B6:  BRA     Z,10C0
10B8:  BCLR.B  42.0
10BA:  RRC     W0,W0
10BC:  DEC     W1,W1
10BE:  BRA     NZ,10B4
10C0:  BTSS    W3.F
10C2:  BRA     10C8
10C4:  NEG     W0,W0
10C6:  BRA     10C8
10C8:  RETURN  
10CA:  MOV     W5,[W15++]
10CC:  MOV     #C,W5
10CE:  REPEAT  #3
10D0:  MOV     [W5++],[W15++]
10D2:  BTSS    W0.F
10D4:  BRA     10EE
10D6:  NEG     W0,W0
10D8:  BSET    W4.8
10DA:  BTSS    W4.F
10DC:  BRA     10EE
10DE:  MOV     W0,[W15++]
10E0:  MOV     #2D,W0
10E2:  BTSC.B  223.1
10E4:  BRA     10E2
10E6:  MOV     W0,224
10E8:  MOV     [--W15],W0
10EA:  BCLR    W4.8
10EC:  DEC.B   0008
10EE:  CLR     W5
10F0:  MOV     W0,W7
10F2:  MOV     W4,W9
10F4:  BCLR    W4.F
10F6:  CP0.B   W4L
10F8:  BRA     NZ,1106
10FA:  BTSC    W9.F
10FC:  BRA     1102
10FE:  MOV     #0,W5
1100:  BRA     1120
1102:  MOV     #0,W5
1104:  BRA     1120
1106:  SUB.B   W4L,#6,W5L
1108:  BRA     NC,111E
110A:  MOV     #30,W0
110C:  BTSS    W9.F
110E:  MOV     #20,W0
1110:  BTSC.B  223.1
1112:  BRA     1110
1114:  MOV     W0,224
1116:  DEC     W5,W5
1118:  BRA     NN,1110
111A:  MOV     #5,W5
111C:  BRA     1120
111E:  MOV     W4,W5
1120:  MOV     #6,W4
1122:  BTSC    W5.8
1124:  INC     W4,W4
1126:  BSET    W5.E
1128:  BTSC    W9.F
112A:  BSET    W5.F
112C:  MOV     #2710,W8
112E:  REPEAT  #11
1130:  DIV.U   W7,W8
1132:  CALL    1176
1136:  MOV     W1,W7
1138:  MOV     #3E8,W8
113A:  REPEAT  #11
113C:  DIV.U   W7,W8
113E:  CALL    1176
1142:  MOV     W1,W7
1144:  MOV     #64,W8
1146:  REPEAT  #11
1148:  DIV.U   W7,W8
114A:  CALL    1176
114E:  MOV     W1,W7
1150:  MOV     #A,W8
1152:  REPEAT  #11
1154:  DIV.U   W7,W8
1156:  CALL    1176
115A:  BTSS    W9.8
115C:  BRA     1168
115E:  MOV     #2D,W0
1160:  BTSC.B  223.1
1162:  BRA     1160
1164:  MOV     W0,224
1166:  BCLR    W9.8
1168:  MOV     #30,W0
116A:  ADD.B   W1L,W0L,W0L
116C:  MOV     W0,2A
116E:  BTSC.B  223.1
1170:  BRA     116E
1172:  MOV     W0,224
1174:  BRA     11B6
1176:  MOV     #30,W6
1178:  CP0     W0
117A:  BRA     NZ,1198
117C:  BTSS    W5.E
117E:  BRA     11AC
1180:  DEC     W4,W4
1182:  CP.B    W4L,W5L
1184:  BRA     Z,118A
1186:  BTSC.B  42.0
1188:  RETURN  
118A:  CP0     W0
118C:  BRA     NZ,1198
118E:  BTSS    W5.E
1190:  BRA     11AC
1192:  BTSS    W5.F
1194:  MOV     #20,W6
1196:  BRA     11AC
1198:  BCLR    W5.E
119A:  BTSS    W9.8
119C:  BRA     11AC
119E:  MOV     W0,W10
11A0:  MOV     #2D,W0
11A2:  BTSC.B  223.1
11A4:  BRA     11A2
11A6:  MOV     W0,224
11A8:  BCLR    W9.8
11AA:  MOV     W10,W0
11AC:  ADD.B   W6L,W0L,W0L
11AE:  BTSC.B  223.1
11B0:  BRA     11AE
11B2:  MOV     W0,224
11B4:  RETURN  
11B6:  MOV     #12,W5
11B8:  REPEAT  #3
11BA:  MOV     [--W15],[W5--]
11BC:  MOV     [--W15],W5
11BE:  RETURN  
11C0:  MOV     W6,[W15++]
11C2:  MOV     W7,[W15++]
11C4:  MOV     W8,[W15++]
11C6:  MOV     W9,[W15++]
11C8:  CLR     W4
11CA:  CLR     W5
11CC:  CLR     W6
11CE:  CLR     W7
11D0:  XOR     W2,W3,W8
11D2:  BRA     Z,11F6
11D4:  MOV     #20,W8
11D6:  BCLR.B  42.0
11D8:  RLC     W0,W0
11DA:  RLC     W1,W1
11DC:  RLC     W4,W4
11DE:  RLC     W5,W5
11E0:  CP      W5,W3
11E2:  BRA     NZ,11E6
11E4:  CPB     W4,W2
11E6:  BRA     NC,11EE
11E8:  SUB     W4,W2,W4
11EA:  SUBB    W5,W3,W5
11EC:  BSET.B  42.0
11EE:  RLC     W6,W6
11F0:  RLC     W7,W7
11F2:  DEC     W8,W8
11F4:  BRA     NZ,11D6
11F6:  MOV     W7,W1
11F8:  MOV     W6,W0
11FA:  MOV     [--W15],W9
11FC:  MOV     [--W15],W8
11FE:  MOV     [--W15],W7
1200:  MOV     [--W15],W6
1202:  RETURN  
1204:  MOV     W5,[W15++]
1206:  MOV     #C,W5
1208:  REPEAT  #7
120A:  MOV     [W5++],[W15++]
120C:  BTSS    W1.F
120E:  BRA     121E
1210:  NEG     W0,W0
1212:  BRA     Z,1216
1214:  BRA     NZ,121A
1216:  NEG     W1,W1
1218:  BRA     121C
121A:  COM     W1,W1
121C:  BSET    W4.8
121E:  CLR     W5
1220:  MOV     W0,W6
1222:  MOV     W1,W7
1224:  MOV     W4,W12
1226:  BCLR    W4.F
1228:  CP0.B   W4L
122A:  BRA     NZ,122E
122C:  BRA     125E
122E:  SUB.B   W4L,#B,W5L
1230:  BRA     NC,125E
1232:  SUB.B   W4L,W5L,W4L
1234:  BTSS    W12.F
1236:  BRA     124E
1238:  BTSS    W4.8
123A:  BRA     124A
123C:  MOV     #2D,W0
123E:  BTSC.B  223.1
1240:  BRA     123E
1242:  MOV     W0,224
1244:  BCLR    W4.8
1246:  DEC     W5,W5
1248:  BRA     N,125E
124A:  MOV     #30,W0
124C:  BRA     1250
124E:  MOV     #20,W0
1250:  BTSC.B  223.1
1252:  BRA     1250
1254:  MOV     W0,224
1256:  DEC     W5,W5
1258:  BRA     NN,1250
125A:  BTSC    W4.8
125C:  DEC.B   W4L,W4L
125E:  MOV     #E,W8
1260:  MOV     #0,W9
1262:  LNK     #10
1264:  MOV     W12,[W14+W8]
1266:  DEC2    W8,W8
1268:  BRA     NN,1264
126A:  MOV     W4,W5
126C:  MOV     #A,W4
126E:  BTSC    W5.8
1270:  INC     W4,W4
1272:  BSET    W5.E
1274:  BTSC    W12.F
1276:  BSET    W5.F
1278:  CP0.B   W5L
127A:  BRA     Z,127E
127C:  DEC.B   W5L,W5L
127E:  MOV     W4,[W14]
1280:  MOV     W5,[W14+#2]
1282:  MOV     W6,W0
1284:  MOV     W7,W1
1286:  MOV     #CA00,W2
1288:  MOV     #3B9A,W3
128A:  MOV     #2710,W8
128C:  BCLR    W13.F
128E:  BCLR.B  43.0
1290:  CALL    11C0
1294:  BTG     W13.F
1296:  BTSC    W13.F
1298:  BRA     12A8
129A:  MOV     W0,[W14+#8]
129C:  MOV     W1,[W14+#A]
129E:  MOV     W0,W2
12A0:  MOV     W1,W3
12A2:  MOV     [W14+#4],W0
12A4:  MOV     [W14+#6],W1
12A6:  BRA     128E
12A8:  MOV     W2,[W14+#8]
12AA:  MOV     W3,[W14+#A]
12AC:  MOV     W4,[W14+#4]
12AE:  MOV     W5,[W14+#6]
12B0:  MOV     [W14],W4
12B2:  MOV     [W14+#2],W5
12B4:  MOV     #30,W6
12B6:  CP0     W0
12B8:  BRA     NZ,12DC
12BA:  BTSS    W5.E
12BC:  BRA     12E0
12BE:  DEC     W4,W4
12C0:  MOV     W4,[W14]
12C2:  CP0     W4
12C4:  BRA     Z,12E0
12C6:  CP.B    W4L,W5L
12C8:  BRA     Z,12CE
12CA:  BTSC.B  42.0
12CC:  BRA     12FE
12CE:  BTSS    W5.F
12D0:  BRA     12D8
12D2:  BTSS    W5.8
12D4:  BRA     12F6
12D6:  BRA     12E6
12D8:  MOV     #20,W6
12DA:  BRA     12F6
12DC:  BCLR    W5.E
12DE:  MOV     W5,[W14+#2]
12E0:  MOV     [W14+#2],W5
12E2:  BTSS    W5.8
12E4:  BRA     12F6
12E6:  BCLR    W5.8
12E8:  MOV     W5,[W14+#2]
12EA:  MOV     W0,W10
12EC:  MOV     #2D,W0
12EE:  BTSC.B  223.1
12F0:  BRA     12EE
12F2:  MOV     W0,224
12F4:  MOV     W10,W0
12F6:  ADD.B   W6L,W0L,W0L
12F8:  BTSC.B  223.1
12FA:  BRA     12F8
12FC:  MOV     W0,224
12FE:  MOV     [W14+#8],W0
1300:  MOV     [W14+#A],W1
1302:  MOV     #A,W2
1304:  CLR     W3
1306:  CP      W0,#1
1308:  BRA     Z,130C
130A:  BRA     128E
130C:  ULNK    
130E:  MOV     #1A,W5
1310:  REPEAT  #7
1312:  MOV     [--W15],[W5--]
1314:  MOV     [--W15],W5
1316:  RETURN  
*
13A0:  MOV     W5,[W15++]
13A2:  MOV     W6,[W15++]
13A4:  MOV     W7,[W15++]
13A6:  XOR     W1,W3,W4
13A8:  BTSS    W4.F
13AA:  BRA     13B8
13AC:  BCLR.B  42.0
13AE:  BCLR.B  42.1
13B0:  BTSS    W1.F
13B2:  BRA     1400
13B4:  BSET.B  42.0
13B6:  BRA     1400
13B8:  MOV     W1,W4
13BA:  MOV     W0,W5
13BC:  MOV     W3,W6
13BE:  MOV     W2,W7
13C0:  RLC     W1,W1
13C2:  SWAP    W1
13C4:  RLC     W3,W3
13C6:  SWAP    W3
13C8:  SUB.B   W3L,W1L,W1L
13CA:  BRA     Z,13D6
13CC:  BTSS    W4.F
13CE:  BRA     1400
13D0:  MOV     #1,W0
13D2:  XOR.B   42
13D4:  BRA     1400
13D6:  MOV.B   W4L,W1L
13D8:  MOV.B   W6L,W3L
13DA:  BCLR    W1.7
13DC:  BCLR    W3.7
13DE:  SUB.B   W3L,W1L,W1L
13E0:  BRA     Z,13EC
13E2:  BTSS    W4.F
13E4:  BRA     1400
13E6:  MOV     #1,W0
13E8:  XOR.B   42
13EA:  BRA     1400
13EC:  SUB     W7,W5,W1
13EE:  BRA     Z,13FA
13F0:  BTSS    W4.F
13F2:  BRA     1400
13F4:  MOV     #1,W0
13F6:  XOR.B   42
13F8:  BRA     1400
13FA:  BCLR.B  42.0
13FC:  BRA     1400
13FE:  BRA     1400
1400:  MOV     [--W15],W7
1402:  MOV     [--W15],W6
1404:  MOV     [--W15],W5
1406:  RETURN  
1408:  MOV     W5,[W15++]
140A:  MOV     W6,[W15++]
140C:  MOV     #8E,W1
140E:  CP0     W0
1410:  BRA     Z,1436
1412:  BTSC    W0.F
1414:  BRA     141E
1416:  BCLR.B  42.0
1418:  RLC     W0,W0
141A:  DEC     W1,W1
141C:  BRA     1412
141E:  SWAP    W1
1420:  BCLR.B  42.0
1422:  RRC     W1,W1
1424:  BCLR    W0.F
1426:  SWAP    W0
1428:  XOR.B   W0L,W1L,W1L
142A:  AND.B   #0,W0L
142C:  BRA     143C
142E:  MOV.B   W1L,W0L
1430:  BSET    W1.7
1432:  AND.B   #0,W1L
1434:  BRA     143C
1436:  CLR     W0
1438:  CLR     W1
143A:  BRA     143C
143C:  MOV     [--W15],W6
143E:  MOV     [--W15],W5
1440:  RETURN  
*
160A:  MOV     W5,[W15++]
160C:  MOV     #C,W5
160E:  REPEAT  #4
1610:  MOV     [W5++],[W15++]
1612:  CLR     W9
1614:  XOR     W1,W3,W9
1616:  MOV     W1,W6
1618:  MOV     W0,W5
161A:  MOV     W3,W8
161C:  MOV     W2,W7
161E:  RLC     W1,W1
1620:  SWAP    W1
1622:  ZE      W1,W1
1624:  CP0     W1
1626:  BRA     Z,16C4
1628:  RLC     W3,W3
162A:  SWAP    W3
162C:  ZE      W3,W3
162E:  CP0     W3
1630:  BRA     Z,16C4
1632:  CLR     W0
1634:  SUB.B   W1L,W3L,W0L
1636:  BRA     NC,163E
1638:  ADD.B   #7F,W0L
163A:  BRA     C,16C4
163C:  BRA     1644
163E:  SUB.B   #81,W0L
1640:  BRA     NC,16C4
1642:  BRA     Z,16C4
1644:  MOV     W5,W1
1646:  MOV     W6,W2
1648:  BSET    W2.7
164A:  AND     #FF,W2
164C:  AND     #FF,W8
164E:  BSET    W8.7
1650:  MOV     #19,W10
1652:  CLR     W3
1654:  CLR     W4
1656:  SUB     W1,W7,W1
1658:  SUBB    W2,W8,W2
165A:  BRA     N,1660
165C:  BRA     C,1666
165E:  BRA     NZ,1668
1660:  ADD     W1,W7,W1
1662:  ADDC    W2,W8,W2
1664:  BRA     1668
1666:  BSET    W4.0
1668:  DEC     W10,W10
166A:  BRA     Z,167A
166C:  BCLR.B  42.0
166E:  RLC     W1,W1
1670:  RLC     W2,W2
1672:  BCLR.B  42.0
1674:  RLC     W4,W4
1676:  RLC     W3,W3
1678:  BRA     1656
167A:  CLR     W10
167C:  BTSC    W3.8
167E:  BRA     1682
1680:  BRA     168E
1682:  BCLR.B  42.0
1684:  RRC     W3,W3
1686:  BCLR    W3.7
1688:  RRC     W4,W4
168A:  RLC     W10,W10
168C:  BRA     1692
168E:  DEC     W0,W0
1690:  BRA     Z,16C4
1692:  BTSC    W10.F
1694:  BRA     NC,16A0
1696:  RLC     W1,W1
1698:  RLC     W2,W2
169A:  SUB     W1,W7,W1
169C:  SUBB    W2,W8,W2
169E:  BRA     NC,16B2
16A0:  INC     W4,W4
16A2:  BRA     NZ,16B2
16A4:  INC     W3,W3
16A6:  BRA     NZ,16B2
16A8:  INC     W0,W0
16AA:  BRA     Z,16C4
16AC:  BRA     16B2
16AE:  DEC     W0,W0
16B0:  BRA     Z,16C4
16B2:  SWAP    W0
16B4:  RRC     W0,W1
16B6:  BSET    W1.F
16B8:  BTSS    W9.F
16BA:  BCLR    W1.F
16BC:  BCLR    W3.7
16BE:  XOR.B   W3L,W1L,W1L
16C0:  MOV     W4,W0
16C2:  BRA     16CA
16C4:  MOV     #0,W0
16C6:  MOV     #0,W1
16C8:  BRA     16CA
16CA:  MOV     #14,W5
16CC:  REPEAT  #4
16CE:  MOV     [--W15],[W5--]
16D0:  MOV     [--W15],W5
16D2:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "math.h" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
1442:  MOV     W5,[W15++]
1444:  MOV     W6,[W15++]
1446:  CLR     8FE
1448:  MOV     #3F80,W4
144A:  MOV     W4,900
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
144C:  CLR     908
144E:  MOV     #BF00,W4
1450:  MOV     W4,90A
1452:  MOV     #AAA3,W4
1454:  MOV     W4,90C
1456:  MOV     #3D2A,W4
1458:  MOV     W4,90E
145A:  MOV     #9B4,W4
145C:  MOV     W4,910
145E:  MOV     #BAB6,W4
1460:  MOV     W4,912
1462:  MOV     #B6AA,W4
1464:  MOV     W4,914
1466:  MOV     #37CF,W4
1468:  MOV     W4,916
146A:  MOV     #F6E8,W4
146C:  MOV     W4,918
146E:  MOV     #B48B,W4
1470:  MOV     W4,91A
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
1472:  MOV     8F2,W0
1474:  MOV     8F4,W1
1476:  MOV     #0,W2
1478:  MOV     #0,W3
147A:  CALL    13A0
147E:  BRA     NC,148A
1480:  MOV     #8F2,W0
1482:  MOV     #8F2,W1
1484:  REPEAT  #3
1486:  MOV     [W0++],[W1++]
1488:  BTG.B   8F5.7
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
148A:  MOV     8F2,W0
148C:  MOV     8F4,W1
148E:  MOV     #F983,W2
1490:  MOV     #3F22,W3
1492:  CALL    FDA
1496:  CALL    109E
149A:  MOV.B   W0L,902
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
149C:  MOV     8F2,W0
149E:  MOV     8F4,W1
14A0:  MOV     #F983,W2
14A2:  MOV     #3F22,W3
14A4:  CALL    FDA
14A8:  MOV     W0,W5
14AA:  MOV     W1,W6
14AC:  MOV.B   902,W0L
14AE:  CLR.B   1
14B0:  CALL    1408
14B4:  BSET.B  43.0
14B6:  MOV     W0,W2
14B8:  MOV     W1,W3
14BA:  MOV     W5,W0
14BC:  MOV     W6,W1
14BE:  CALL    E30
14C2:  MOV     W0,904
14C4:  MOV     W1,906
....................    quad = quad % 4;                    // quadrant (0 to 3) 
14C6:  MOV.B   902,W0L
14C8:  AND.B   W0L,#3,W0L
14CA:  MOV.B   W0L,902
....................  
....................    if (quad == 0 || quad == 2) 
14CC:  CP0.B   902
14CE:  BRA     Z,14D6
14D0:  MOV     902,W4
14D2:  CP.B    W4L,#2
14D4:  BRA     NZ,14E8
....................       t = frac * PI_DIV_BY_TWO; 
14D6:  MOV     904,W0
14D8:  MOV     906,W1
14DA:  MOV     #FDB,W2
14DC:  MOV     #3FC9,W3
14DE:  CALL    FDA
14E2:  MOV     W0,8FA
14E4:  MOV     W1,8FC
14E6:  BRA     1534
....................    else if (quad == 1) 
14E8:  MOV     902,W4
14EA:  CP.B    W4L,#1
14EC:  BRA     NZ,1512
....................       t = (1-frac) * PI_DIV_BY_TWO; 
14EE:  BSET.B  43.0
14F0:  MOV     #0,W0
14F2:  MOV     #3F80,W1
14F4:  MOV     904,W2
14F6:  MOV     906,W3
14F8:  CALL    E30
14FC:  MOV     W0,W5
14FE:  MOV     W1,W6
1500:  MOV     W5,W0
1502:  MOV     W6,W1
1504:  MOV     #FDB,W2
1506:  MOV     #3FC9,W3
1508:  CALL    FDA
150C:  MOV     W0,8FA
150E:  MOV     W1,8FC
1510:  BRA     1534
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
1512:  BSET.B  43.0
1514:  MOV     904,W0
1516:  MOV     906,W1
1518:  MOV     #0,W2
151A:  MOV     #3F80,W3
151C:  CALL    E30
1520:  MOV     W0,W5
1522:  MOV     W1,W6
1524:  MOV     W5,W0
1526:  MOV     W6,W1
1528:  MOV     #FDB,W2
152A:  MOV     #3FC9,W3
152C:  CALL    FDA
1530:  MOV     W0,8FA
1532:  MOV     W1,8FC
....................  
....................    y = 1.0; 
1534:  CLR     8F6
1536:  MOV     #3F80,W4
1538:  MOV     W4,8F8
....................    t = t * t; 
153A:  MOV     8FA,W0
153C:  MOV     8FC,W1
153E:  MOV     8FA,W2
1540:  MOV     8FC,W3
1542:  CALL    FDA
1546:  MOV     W0,8FA
1548:  MOV     W1,8FC
....................    for (i = 0; i <= 4; i++) 
154A:  CLR.B   903
154C:  MOV     902,W4
154E:  LSR     W4,#8,W4
1550:  CP.B    W4L,#4
1552:  BRA     GTU,1596
....................    { 
....................       t2 = t2 * t; 
1554:  MOV     8FE,W0
1556:  MOV     900,W1
1558:  MOV     8FA,W2
155A:  MOV     8FC,W3
155C:  CALL    FDA
1560:  MOV     W0,8FE
1562:  MOV     W1,900
....................       y = y + p[i] * t2; 
1564:  MOV.B   903,W0L
1566:  CLR.B   1
1568:  SL      W0,#2,W0
156A:  MOV     #908,W4
156C:  ADD     W0,W4,W0
156E:  MOV     #A,W4
1570:  MOV     [W0++],[W4++]
1572:  MOV     [W0++],[W4++]
1574:  MOV     W5,W0
1576:  MOV     W6,W1
1578:  MOV     8FE,W2
157A:  MOV     900,W3
157C:  CALL    FDA
1580:  BCLR.B  43.0
1582:  MOV     W0,W2
1584:  MOV     W1,W3
1586:  MOV     8F6,W0
1588:  MOV     8F8,W1
158A:  CALL    E30
158E:  MOV     W0,8F6
1590:  MOV     W1,8F8
1592:  INC.B   0903
1594:  BRA     154C
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
1596:  MOV     902,W4
1598:  CP.B    W4L,#2
159A:  BRA     Z,15A2
159C:  MOV     902,W4
159E:  CP.B    W4L,#1
15A0:  BRA     NZ,15AC
....................       y = -y;  // correct sign 
15A2:  MOV     #8F6,W0
15A4:  MOV     #8F6,W1
15A6:  REPEAT  #3
15A8:  MOV     [W0++],[W1++]
15AA:  BTG.B   8F9.7
....................  
....................    return (y); 
15AC:  MOV     8F6,W0
15AE:  MOV     8F8,W1
15B0:  MOV     [--W15],W6
15B2:  MOV     [--W15],W5
15B4:  RETURN  
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
15B6:  MOV     W5,[W15++]
15B8:  MOV     W6,[W15++]
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
15BA:  BSET.B  43.0
15BC:  MOV     8E0,W0
15BE:  MOV     8E2,W1
15C0:  MOV     #FDB,W2
15C2:  MOV     #3FC9,W3
15C4:  CALL    E30
15C8:  MOV     W0,W5
15CA:  MOV     W1,W6
15CC:  MOV     W5,8F2
15CE:  MOV     W6,8F4
15D0:  CALL    1442
15D4:  MOV.D   W0,W0
15D6:  MOV     [--W15],W6
15D8:  MOV     [--W15],W5
15DA:  RETURN  
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(internal = 8 MHz, clock = 32000000) 
.................... #PIN_SELECT U1TX = PIN_B13 
.................... #PIN_SELECT U1RX = PIN_B12 
....................  
.................... #use rs232(UART1, baud = 115200, xmit = PIN_B13, rcv = PIN_B12) 
....................  
.................... #PIN_SELECT OC1 = PIN_B2  // Pin output is connected to DX02 
.................... #PIN_SELECT OC2 = PIN_B3  // Pin output is connected to DX03 
.................... #PIN_SELECT OC3 = PIN_B4  // Pin output is connected to DXI0  (PWM) 
.................... #PIN_SELECT INT1 = PIN_B5 // Pin output is connected to DXI1  (Encoder) 
.................... // #PIN_SELECT INT2 = PIN_B6			// Pin output is connected to DXI2 
.................... // (Stop motor) 
....................  
.................... long countPulse; 
.................... float timer3time = 0; 
.................... float volt = 0; 
.................... int x; 
....................  
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) { 
*
0DFC:  PUSH    42
0DFE:  PUSH    36
0E00:  PUSH    32
0E02:  MOV     W0,[W15++]
0E04:  MOV     #2,W0
0E06:  REPEAT  #C
0E08:  MOV     [W0++],[W15++]
....................   if (input(PIN_B6) == 0) { 
0E0A:  BSET.B  2C8.6
0E0C:  BTSC.B  2CA.6
0E0E:  BRA     E18
....................     countPulse--; 
0E10:  DEC     08B0
0E12:  BTSS.B  42.0
0E14:  DEC     08B2
....................   } else { 
0E16:  BRA     E1E
....................     countPulse++; 
0E18:  INC     08B0
0E1A:  BTSC.B  42.1
0E1C:  INC     08B2
....................   } 
0E1E:  BCLR.B  86.4
0E20:  MOV     #1A,W0
0E22:  REPEAT  #C
0E24:  MOV     [--W15],[W0--]
0E26:  MOV     [--W15],W0
0E28:  POP     32
0E2A:  POP     36
0E2C:  POP     42
0E2E:  RETFIE  
.................... } 
....................  
.................... float chirpSine(float time) { 
*
15DC:  MOV     W5,[W15++]
15DE:  MOV     W6,[W15++]
15E0:  PUSH    8C8
15E2:  POP     8E0
15E4:  PUSH    8CA
15E6:  POP     8E2
15E8:  CALL    15B6
15EC:  MOV     W0,W5
15EE:  MOV     W1,W6
15F0:  MOV     W5,W0
15F2:  MOV     W6,W1
15F4:  MOV     #0,W2
15F6:  MOV     #4140,W3
15F8:  CALL    FDA
15FC:  MOV     W0,8CC
15FE:  MOV     W1,8CE
....................   float sig = sin(time) * 12; 
....................   return sig; 
1600:  MOV     8CC,W0
1602:  MOV     8CE,W1
1604:  MOV     [--W15],W6
1606:  MOV     [--W15],W5
1608:  RETURN  
.................... } 
.................... int convertToDUTY(float voltage) { 
*
16D4:  MOV     W5,[W15++]
16D6:  MOV     W6,[W15++]
16D8:  MOV     8D0,W0
16DA:  MOV     8D2,W1
16DC:  BCLR    W1.F
16DE:  MOV     W0,W5
16E0:  MOV     W1,W6
16E2:  MOV     W5,W0
16E4:  MOV     W6,W1
16E6:  MOV     #0,W2
16E8:  MOV     #42C8,W3
16EA:  CALL    FDA
16EE:  MOV     W0,W5
16F0:  MOV     W1,W6
16F2:  MOV     W5,W0
16F4:  MOV     W6,W1
16F6:  MOV     #0,W2
16F8:  MOV     #4140,W3
16FA:  CALL    160A
16FE:  CALL    109E
1702:  MOV     W0,8D4
....................   int duty = abs(voltage) * 100 / 12; 
....................   return duty; 
1704:  PUSH    8D4
1706:  POP     0
1708:  MOV     [--W15],W6
170A:  MOV     [--W15],W5
170C:  RETURN  
.................... } 
....................  
.................... int getDirection(float voltage) { 
....................   int direction; 
....................   if (voltage > 0) { 
170E:  MOV     #0,W0
1710:  MOV     #0,W1
1712:  MOV     8C4,W2
1714:  MOV     8C6,W3
1716:  CALL    13A0
171A:  BRA     NC,1720
....................     direction = 0; 
171C:  CLR     8C8
....................   } else if (voltage < 0) { 
171E:  BRA     1738
1720:  MOV     8C4,W0
1722:  MOV     8C6,W1
1724:  MOV     #0,W2
1726:  MOV     #0,W3
1728:  CALL    13A0
172C:  BRA     NC,1734
....................     direction = 1; 
172E:  MOV     #1,W4
1730:  MOV     W4,8C8
....................   } else { 
1732:  BRA     1738
....................     direction = 2; 
1734:  MOV     #2,W4
1736:  MOV     W4,8C8
....................   } 
....................   return direction; 
1738:  PUSH    8C8
173A:  POP     0
173C:  RETURN  
.................... } 
....................  
.................... void Init_Interrupts() { 
....................   enable_interrupts(INT_EXT1); 
*
1816:  BSET.B  96.4
....................   ext_int_edge(1, L_TO_H); // Rising Edge 
1818:  BCLR.B  82.1
181A:  RETURN  
.................... } 
....................  
.................... #INT_TIMER2 
.................... void TIMER2_isr() { 
*
1318:  PUSH    42
131A:  PUSH    36
131C:  PUSH    32
131E:  MOV     W0,[W15++]
1320:  MOV     #2,W0
1322:  REPEAT  #C
1324:  MOV     [W0++],[W15++]
....................   timer3time += 0.01; 
1326:  BCLR.B  43.0
1328:  MOV     8B4,W0
132A:  MOV     8B6,W1
132C:  MOV     #D70A,W2
132E:  MOV     #3C23,W3
1330:  CALL    E30
1334:  MOV     W0,8B4
1336:  MOV     W1,8B6
.................... 	// Send time and voltage in milli for resolution's sake 
....................   printf("%d", (int)(timer3time*1000)); 
1338:  MOV     8B4,W0
133A:  MOV     8B6,W1
133C:  MOV     #0,W2
133E:  MOV     #447A,W3
1340:  CALL    FDA
1344:  CALL    109E
1348:  MOV     W0,W5
134A:  MOV     W5,W0
134C:  MOV     #0,W4
134E:  CALL    10CA
....................   printf(","); 
1352:  BTSC.B  223.1
1354:  BRA     1352
1356:  MOV     #2C,W4
1358:  MOV     W4,224
....................   printf("%d", countPulse); 
135A:  MOV     8B0,W0
135C:  MOV     8B2,W1
135E:  MOV     #0,W4
1360:  CALL    1204
.................... 	printf(","); 
1364:  BTSC.B  223.1
1366:  BRA     1364
1368:  MOV     #2C,W4
136A:  MOV     W4,224
....................   printf("%d", (int)(volt * 1000)); 
136C:  MOV     8B8,W0
136E:  MOV     8BA,W1
1370:  MOV     #0,W2
1372:  MOV     #447A,W3
1374:  CALL    FDA
1378:  CALL    109E
137C:  MOV     W0,W5
137E:  MOV     W5,W0
1380:  MOV     #0,W4
1382:  CALL    10CA
.................... 	printf("\n"); 
1386:  BTSC.B  223.1
1388:  BRA     1386
138A:  MOV     #A,W4
138C:  MOV     W4,224
138E:  BCLR.B  84.7
1390:  MOV     #1A,W0
1392:  REPEAT  #C
1394:  MOV     [--W15],[W0--]
1396:  MOV     [--W15],W0
1398:  POP     32
139A:  POP     36
139C:  POP     42
139E:  RETFIE  
.................... } 
....................  
.................... void init_Timer2() { 
....................   setup_timer2(TMR_INTERNAL | TMR_DIV_BY_256, 625); 
*
1808:  CLR     110
180A:  MOV     #271,W4
180C:  MOV     W4,10C
180E:  MOV     #8030,W4
1810:  MOV     W4,110
....................   enable_interrupts(INT_TIMER2); 
1812:  BSET.B  94.7
1814:  RETURN  
.................... } 
....................  
.................... void flip(int direction, int PWM) { 
*
173E:  MOV     W5,[W15++]
....................   if (direction == 0) { // turn right 
1740:  CP0     8CC
1742:  BRA     NZ,1752
....................     x = 1; 
1744:  MOV     #1,W4
1746:  MOV     W4,8BC
....................     output_bit(PIN_B2, 1); 
1748:  BSET.B  2CC.2
174A:  BCLR.B  2C8.2
....................     output_bit(PIN_B3, 0); 
174C:  BCLR.B  2CC.3
174E:  BCLR.B  2C8.3
....................   } else if (direction == 1) { // turn left 
1750:  BRA     1772
1752:  MOV     8CC,W4
1754:  CP      W4,#1
1756:  BRA     NZ,1764
....................     x = 0; 
1758:  CLR     8BC
....................     output_bit(PIN_B2, 0); 
175A:  BCLR.B  2CC.2
175C:  BCLR.B  2C8.2
....................     output_bit(PIN_B3, 1); 
175E:  BSET.B  2CC.3
1760:  BCLR.B  2C8.3
....................   } else if (direction == 2) { 
1762:  BRA     1772
1764:  MOV     8CC,W4
1766:  CP      W4,#2
1768:  BRA     NZ,1772
....................     output_bit(PIN_B2, 1); 
176A:  BSET.B  2CC.2
176C:  BCLR.B  2C8.2
....................     output_bit(PIN_B3, 1); 
176E:  BSET.B  2CC.3
1770:  BCLR.B  2C8.3
....................   } 
....................   set_pwm_duty(3, 200 * PWM / 100); 
1772:  MOV     #C8,W4
1774:  MOV     8CE,W3
1776:  MUL.SS  W4,W3,W0
1778:  MOV     W0,W5
177A:  MOV     W5,W4
177C:  MOV     #64,W3
177E:  REPEAT  #11
1780:  DIV.S   W4,W3
1782:  MOV     W0,W5
1784:  MOV     W5,18C
1786:  MOV     [--W15],W5
1788:  RETURN  
.................... } 
....................  
.................... #INT_TIMER3 
.................... void TIMER3_ist() { 
178A:  PUSH    42
178C:  PUSH    36
178E:  PUSH    32
1790:  MOV     W0,[W15++]
1792:  MOV     #2,W0
1794:  REPEAT  #C
1796:  MOV     [W0++],[W15++]
.................... 	if(timer3time <= 10){ 
1798:  MOV     8B4,W0
179A:  MOV     8B6,W1
179C:  MOV     #0,W2
179E:  MOV     #4120,W3
17A0:  CALL    13A0
17A4:  BRA     C,17A8
17A6:  BRA     NZ,17E2
....................   volt = chirpSine(timer3time); 
17A8:  PUSH    8B4
17AA:  POP     8C8
17AC:  PUSH    8B6
17AE:  POP     8CA
17B0:  CALL    15DC
17B4:  MOV     W0,8B8
17B6:  MOV     W1,8BA
....................   int duty = convertToDUTY(volt); 
....................   int dir = getDirection(volt); 
17B8:  PUSH    8B8
17BA:  POP     8D0
17BC:  PUSH    8BA
17BE:  POP     8D2
17C0:  CALL    16D4
17C4:  MOV     W0,8BE
17C6:  PUSH    8B8
17C8:  POP     8C4
17CA:  PUSH    8BA
17CC:  POP     8C6
17CE:  CALL    170E
17D2:  MOV     W0,8C0
....................   flip(dir, duty); 
17D4:  PUSH    8C0
17D6:  POP     8CC
17D8:  PUSH    8BE
17DA:  POP     8CE
17DC:  CALL    173E
.................... 	} 
17E0:  BRA     17E4
.................... 	else{ 
.................... 		set_pwm_duty(3, 0); 
17E2:  CLR     18C
.................... 	} 
....................   // timer3time += 0.0001; 
17E4:  BCLR.B  85.0
17E6:  MOV     #1A,W0
17E8:  REPEAT  #C
17EA:  MOV     [--W15],[W0--]
17EC:  MOV     [--W15],W0
17EE:  POP     32
17F0:  POP     36
17F2:  POP     42
17F4:  RETFIE  
.................... } 
....................  
.................... void Drivemotor() { 
....................   setup_timer3(TMR_INTERNAL | TMR_DIV_BY_8, 200); // Set frequency at 10 KHz 
17F6:  CLR     112
17F8:  MOV     #C8,W4
17FA:  MOV     W4,10E
17FC:  MOV     #8010,W4
17FE:  MOV     W4,112
....................   enable_interrupts(INT_TIMER3); 
1800:  BSET.B  95.0
....................   setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
1802:  MOV     #E,W4
1804:  MOV     W4,190
1806:  RETURN  
.................... } 
....................  
.................... void main() { 
*
181C:  MOV     #2780,W15
181E:  MOV     #27FF,W0
1820:  MOV     W0,20
1822:  NOP     
1824:  MOV     #4444,W0
1826:  MOV     W0,A6
1828:  BSET.B  81.7
182A:  MOV     #46,W0
182C:  MOV.B   W0L,742
182E:  MOV     #57,W0
1830:  MOV.B   W0L,742
1832:  BCLR.B  742.6
1834:  MOV     #53F,W0
1836:  MOV     W0,680
1838:  MOV     #3F0C,W0
183A:  MOV     W0,6A4
183C:  MOV     #1312,W0
183E:  MOV     W0,6C2
1840:  MOV     #14,W0
1842:  MOV     W0,6C4
1844:  MOV     #300,W0
1846:  MOV     W0,6CC
1848:  MOV     #46,W0
184A:  MOV.B   W0L,742
184C:  MOV     #57,W0
184E:  MOV.B   W0L,742
1850:  BSET.B  742.6
1852:  CLR     744
1854:  MOV     #8000,W4
1856:  MOV     W4,220
1858:  MOV     #400,W4
185A:  MOV     W4,222
185C:  BSET.B  220.3
185E:  MOV     #22,W4
1860:  MOV     W4,228
1862:  CLR     8B4
1864:  CLR     8B6
1866:  CLR     8B8
1868:  CLR     8BA
186A:  SETM    32C
186C:  BRA     1902
186E:  DATA    C0,06,08
1870:  DATA    00,00,00
1872:  DATA    4B,F0,3F
1874:  DATA    5C,0A,58
1876:  DATA    F6,3B,8F
1878:  DATA    00,C0,3C
187A:  DATA    8B,28,AC
187C:  DATA    3C,BE,F6
187E:  DATA    3F,D2,D5
1880:  DATA    44,16,8C
1882:  DATA    15,D7,BF
1884:  DATA    69,00,5A
1886:  DATA    2E,1B,87
1888:  DATA    99,3F,9A
188A:  DATA    5F,AD,4B
188C:  DATA    91,E4,01
188E:  DATA    C0,5D,11
1890:  DATA    2F,92,E4
1892:  DATA    81,FB,3F
1894:  DATA    38,DA,91
1896:  DATA    80,9D,C5
1898:  DATA    E0,BF,6F
189A:  DATA    12,C0,B4
189C:  DATA    C3,09,AB
189E:  DATA    3F,6B,C1
18A0:  DATA    03,4E,C1
18A2:  DATA    B5,45,BF
18A4:  DATA    F7,40,05
18A6:  DATA    FF,00,5A
18A8:  DATA    EF,3F,F3
18AA:  DATA    A3,E2,F7
18AC:  DATA    D7,FF,01
18AE:  DATA    40,C0,B4
18B0:  DATA    FF,05,3C
18B2:  DATA    58,FC,3F
18B4:  DATA    3B,D3,C0
18B6:  DATA    B5,BA,8C
18B8:  DATA    E2,3F,39
18BA:  DATA    D3,C7,3D
18BC:  DATA    41,79,B2
18BE:  DATA    3F,87,0D
18C0:  DATA    3C,50,D0
18C2:  DATA    AF,62,3F
18C4:  DATA    30,4B,8D
18C6:  DATA    A2,82,AA
18C8:  DATA    04,40,09
18CA:  DATA    A0,40,4A
18CC:  DATA    05,76,03
18CE:  DATA    40,EC,9E
18D0:  DATA    37,88,A6
18D2:  DATA    44,F0,3F
18D4:  DATA    8F,12,8D
18D6:  DATA    29,9A,5B
18D8:  DATA    C7,3F,0E
18DA:  DATA    E0,80,7C
18DC:  DATA    A1,D8,86
18DE:  DATA    3F,29,4B
18E0:  DATA    FB,95,C2
18E2:  DATA    37,1A,3F
18E4:  DATA    00,00,00
18E6:  INC     W2,W2
18E8:  CP      W2,#1
18EA:  BRA     NZ,18F4
18EC:  TBLRDL  [W1],W3
18EE:  TBLRDH  [W1++],W4
18F0:  MOV.B   6,W0L
18F2:  RETURN  
18F4:  CP      W2,#2
18F6:  BRA     NZ,18FC
18F8:  MOV.B   7,W0L
18FA:  RETURN  
18FC:  MOV.B   8,W0L
18FE:  CLR     W2
1900:  RETURN  
1902:  MOV     #0,W6
1904:  MOV     #0,W0
1906:  MOV     W0,32
1908:  MOV     #186E,W0
190A:  MOV     W0,W1
190C:  CLR     W2
190E:  CALL    18E6
1912:  MOV.B   W0L,B
1914:  CALL    18E6
1918:  MOV.B   W0L,A
191A:  CP0     W5
191C:  BRA     Z,1950
191E:  BTSS    W5.F
1920:  BRA     1930
1922:  CALL    18E6
1926:  MOV.B   W0L,D
1928:  CALL    18E6
192C:  MOV.B   W0L,C
192E:  BCLR    W5.F
1930:  BTSS    W5.E
1932:  BRA     1944
1934:  BCLR    W5.E
1936:  DEC     W5,W5
1938:  CALL    18E6
193C:  MOV.B   W0L,W7L
193E:  REPEAT  W5
1940:  MOV.B   W7L,[W6++]
1942:  BRA     190E
1944:  CALL    18E6
1948:  MOV.B   W0L,[W6++]
194A:  DEC     W5,W5
194C:  BRA     NZ,1944
194E:  BRA     190E
....................   countPulse = 0; 
1950:  CLR     8B0
1952:  CLR     8B2
....................   timer3time = 0; 
1954:  CLR     8B4
1956:  CLR     8B6
....................   disable_interrupts(GLOBAL); 
1958:  BCLR.B  81.7
195A:  MOV     #E0,W4
195C:  MOV     W4,42
195E:  BSET.B  81.7
....................   Drivemotor(); 
1960:  CALL    17F6
....................   Init_Timer2(); 
1964:  CALL    1808
....................   Init_Interrupts(); 
1968:  CALL    1816
....................   enable_interrupts(GLOBAL); 
196C:  BCLR.B  81.7
196E:  CLR     42
1970:  BSET.B  81.7
....................  
....................   while (TRUE) { 
1972:  BRA     1972
....................   } 
.................... } 
1974:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
