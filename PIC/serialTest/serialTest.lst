CCS PCD C Compiler, Version 5.015, 5967               21-Sep-18 21:37

               Filename:   C:\Users\asus\Documents\GitHub\chickendinnerpickerproject\PIC\serialTest.lst

               ROM used:   602 bytes (2%)
                           Largest free fragment is 30114
               RAM used:   128 (2%) at main() level
                           129 (2%) worst case
               Stack size: 128

*
0C00:  GOTO    E0C
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Intelligence Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... //#fuses FRC_PLL 
.................... #use delay (internal = 8 MHz, clock = 32000000) 
*
0DFC:  CP0     W0
0DFE:  BTSC.B  42.1
0E00:  BRA     E0A
0E02:  REPEAT  #3E7B
0E04:  NOP     
0E06:  DEC     W0,W0
0E08:  BRA     NZ,E02
0E0A:  RETURN  
.................... #PIN_SELECT U1RX = PIN_B12 
.................... #PIN_SELECT U1TX = PIN_B13 
....................  
.................... #use rs232(UART1, BAUD = 9600, PARITY = N, STOP = 1, XMIT = PIN_B13, RCV = PIN_B12) 
....................  
.................... //#use fixed_io(b_outputs = PIN_B4, PIN_B5, PIN_B6, PIN_B7) 
....................  
.................... //int led_data = 0; 
.................... int main(){ 
0E0C:  MOV     #2780,W15
0E0E:  MOV     #27FF,W0
0E10:  MOV     W0,20
0E12:  NOP     
0E14:  BSET.B  81.7
0E16:  MOV     #46,W0
0E18:  MOV.B   W0L,742
0E1A:  MOV     #57,W0
0E1C:  MOV.B   W0L,742
0E1E:  BCLR.B  742.6
0E20:  MOV     #3F0C,W0
0E22:  MOV     W0,6A4
0E24:  MOV     #300,W0
0E26:  MOV     W0,6CC
0E28:  MOV     #46,W0
0E2A:  MOV.B   W0L,742
0E2C:  MOV     #57,W0
0E2E:  MOV.B   W0L,742
0E30:  BSET.B  742.6
0E32:  CLR     744
0E34:  MOV     #8000,W4
0E36:  MOV     W4,220
0E38:  MOV     #400,W4
0E3A:  MOV     W4,222
0E3C:  BSET.B  220.3
0E3E:  MOV     #1A0,W4
0E40:  MOV     W4,228
0E42:  SETM    32C
.................... 	//set_tris_b(0xFF0F); 
.................... 	while(TRUE){ 
.................... 		//output_b((led_data<<4)); 
....................     putc('1'); 
0E44:  MOV.B   #31,W0L
0E46:  BTSC.B  223.1
0E48:  BRA     E46
0E4A:  MOV.B   W0L,224
0E4C:  CLR.B   225
.................... 		//led_data += 1; 
.................... 		delay_ms(100); 
0E4E:  MOV     #64,W0
0E50:  CALL    DFC
0E54:  BRA     E44
.................... 	} 
.................... 	return (0); 
0E56:  CLR     0
.................... } 
0E58:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
